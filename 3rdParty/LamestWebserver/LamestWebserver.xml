<?xml version="1.0"?>
<doc>
  <assembly>
    <name>LamestWebserver</name>
  </assembly>
  <members>
    <member name="T:LamestWebserver.HttpResponse">
      <summary>
            Contains tools to build HTTP-Responses.
            </summary>
    </member>
    <member name="F:LamestWebserver.HttpResponse.HtmlDateFormat">
      <summary>
            An expression used for DateTime.ToString to parse into correct HTTP DateFormat
            </summary>
    </member>
    <member name="F:LamestWebserver.HttpResponse.Date">
      <summary>
            The current date in HTTP DateFormat
            </summary>
    </member>
    <member name="F:LamestWebserver.HttpResponse.Version">
      <summary>
            The HTTP Version of the Response
            </summary>
    </member>
    <member name="F:LamestWebserver.HttpResponse.Status">
      <summary>
            The HTTP Status Code and Status of the Response
            </summary>
    </member>
    <member name="F:LamestWebserver.HttpResponse.Range">
      <summary>
            describes the range of bytes this package sends
            item1 = begin
            item2 = end
            is null when all bytes are requested
            </summary>
    </member>
    <member name="F:LamestWebserver.HttpResponse.ContentType">
      <summary>
            The content-type of the response
            </summary>
    </member>
    <member name="F:LamestWebserver.HttpResponse.Cookies">
      <summary>
            The cookies, that shall be set in the client browser
            </summary>
    </member>
    <member name="F:LamestWebserver.HttpResponse.ModifiedDate">
      <summary>
            The modified date of the file (if any)
            </summary>
    </member>
    <member name="F:LamestWebserver.HttpResponse.CharSet">
      <summary>
            The HTTP ContentType charset attribute. Only applicable if ContentType is not null.
            </summary>
    </member>
    <member name="M:LamestWebserver.HttpResponse.#ctor(LamestWebserver.HttpRequest)">
      <summary>
            Creates a new HttpResponse
            </summary>
    </member>
    <member name="M:LamestWebserver.HttpResponse.#ctor(LamestWebserver.HttpRequest,System.Byte[])">
      <summary>
            Creates a new HttpResponse from the given requestPacket with the given data as response.
            </summary>
      <param name="requestPacket">The request packet.</param>
      <param name="binaryData">The binary data to reply with.</param>
    </member>
    <member name="M:LamestWebserver.HttpResponse.#ctor(LamestWebserver.HttpRequest,System.String)">
      <summary>
            Creates a new HttpResponse from the given requestPacket with the given string as response.
            </summary>
      <param name="requestPacket">The request packet.</param>
      <param name="responseString">The string response to reply with.</param>
    </member>
    <member name="M:LamestWebserver.HttpResponse.GetPackage">
      <summary>
            Returns the contents of the complete package to be sent via tcp to the client 
            </summary>
      <returns>the contents as byte array</returns>
    </member>
    <member name="P:LamestWebserver.HttpResponse.BinaryData">
      <summary>
            the binary data contained in the request
            Also sets the contentLength.
            </summary>
    </member>
    <member name="T:LamestWebserver.ServerCore">
      <summary>
            A ServerCore provides functionality for accepting Connections on a TCP port.
            </summary>
    </member>
    <member name="T:LamestWebserver.ServerCore.EThreadingType">
      <summary>
            Defines the handling of Server Threads.
            </summary>
    </member>
    <member name="F:LamestWebserver.ServerCore.EThreadingType.WorkerThreads">
      <summary>
            A fixed pool of threads will execute tasks.
            </summary>
    </member>
    <member name="F:LamestWebserver.ServerCore.EThreadingType.ThreadSpawner">
      <summary>
            Tasks will be launched as separate threads.
            </summary>
    </member>
    <member name="F:LamestWebserver.ServerCore.DefaultReadTimeout">
      <summary>
            The default time to wait until a NetworkStream is being closed because of a no data coming in.
            </summary>
    </member>
    <member name="F:LamestWebserver.ServerCore.ServerShutdownClientHandlerForceQuitTimeout">
      <summary>
            When stopping the Server the timeout to use before quiting the worker threads forcefully.
            </summary>
    </member>
    <member name="F:LamestWebserver.ServerCore.Port">
      <summary>
            The Port, the server is listening at.
            </summary>
    </member>
    <member name="F:LamestWebserver.ServerCore.ThreadingType">
      <summary>
            Defines the behavior of this Server when executing tasks.
            </summary>
    </member>
    <member name="M:LamestWebserver.ServerCore.#ctor(System.Int32)">
      <summary>
            Creates a new Server that is set-up to listen to a specified TCP port. Call `Start` to start the listener thread.
            </summary>
      <param name="port">The port to listen on.</param>
    </member>
    <member name="M:LamestWebserver.ServerCore.#ctor(System.Net.IPAddress,System.Int32,LamestWebserver.ServerCore.EThreadingType)">
      <summary>
            Creates a new Server that is set-up to listen to a specified TCP port on a specified IPAddress. Call `Start` to start the listener thread.
            </summary>
      <param name="localAddress">The local address to listen on.</param>
      <param name="port">The port to listen on.</param>
      <param name="threadingType">The threading behaviour of this server.</param>
    </member>
    <member name="M:LamestWebserver.ServerCore.Finalize">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.ServerCore.Dispose">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.ServerCore.Stop">
      <summary>
            Stops the Server from running.
            </summary>
    </member>
    <member name="M:LamestWebserver.ServerCore.Start">
      <summary>
            Starts the TCP Listener Thread.
            </summary>
    </member>
    <member name="M:LamestWebserver.ServerCore.HandleClient(System.Net.Sockets.TcpClient,System.Net.Sockets.NetworkStream)">
      <summary>
            Handles client interactions.
            </summary>
      <param name="tcpClient">The TcpClient of the client.</param>
      <param name="networkStream">The networkStream of the connection to the client.</param>
    </member>
    <member name="M:LamestWebserver.ServerCore.TcpPortIsUnused(System.Int32)">
      <summary>
            Source: http://stackoverflow.com/questions/570098/in-c-how-to-check-if-a-tcp-port-is-available
            </summary>
      <param name="port">The TCP-Port to check for</param>
      <returns>true if unused</returns>
    </member>
    <member name="P:LamestWebserver.ServerCore.CurrentThreadStream">
      <summary>
            Gets or sets the current stream for the active thread.
            </summary>
    </member>
    <member name="T:LamestWebserver.SessionData">
      <summary>
            Contains the current SessionData
            </summary>
    </member>
    <member name="F:LamestWebserver.SessionData.CurrentSession">
      <summary>
            contains the current session identificator for this thread
            </summary>
    </member>
    <member name="M:LamestWebserver.SessionData.GetHttpHeadValue(System.String)">
      <summary>
            get the value of a HTTP HEAD variable by name. (null if not existent)
            </summary>
      <param name="name">The name of the HTTP HEAD variable</param>
      <returns>the value of the given HTTP HEAD variable (or null if not existent)</returns>
    </member>
    <member name="M:LamestWebserver.SessionData.GetHttpPostValue(System.String)">
      <summary>
            get the value of a HTTP POST variable by name. (null if not existent)
            </summary>
      <param name="name">The name of the HTTP POST variable</param>
      <returns>the value of the given HTTP POST variable (or null if not existent)</returns>
    </member>
    <member name="M:LamestWebserver.SessionData.GetVariable(System.String,LamestWebserver.EVariableScope)">
      <summary>
            Get the value of a variable defined at a certain scope by name
            </summary>
      <param name="name">name of the variable</param>
      <param name="scope">scope at which the variable is defined</param>
      <returns>returns the value of the variable (or null if not existent or exception if you really want to mess things up, dude!)</returns>
    </member>
    <member name="M:LamestWebserver.SessionData.GetVariable``1(System.String,LamestWebserver.EVariableScope)">
      <summary>
            Get the value of a variable defined at a certain scope by name
            </summary>
      <param name="name">name of the variable</param>
      <param name="scope">scope at which the variable is defined</param>
      <returns>returns the value of the variable (or null if not existent or exception if you really want to mess things up, dude!)</returns>
    </member>
    <member name="M:LamestWebserver.SessionData.SetVariable``1(System.String,``0,LamestWebserver.EVariableScope)">
      <summary>
            Set the value of a variable defined at a certain scope by name
            </summary>
      <typeparam name="T">The type of the value</typeparam>
      <param name="name">name of the variable</param>
      <param name="value">the value to set to the variable</param>
      <param name="scope">scope at which the variable is/will be defined</param>
    </member>
    <member name="M:LamestWebserver.SessionData.SetGlobalVariable``1(System.String,``0)">
      <summary>
            set the value of a variable saved globally (available from everywhere on this server)
            </summary>
      <typeparam name="T">The Type of the Value</typeparam>
      <param name="name">The name of the variable</param>
      <param name="value">The value of the variable</param>
    </member>
    <member name="M:LamestWebserver.SessionData.GetGlobalVariable(System.String)">
      <summary>
            get the value (or null if not existent) from the variables saved globally (available from everywhere on this server)
            </summary>
      <param name="name">the name of the variable</param>
      <returns>the value of the variable (or null if not existent)</returns>
    </member>
    <member name="M:LamestWebserver.SessionData.GetGlobalVariable``1(System.String)">
      <summary>
            get the value (or null if not existent) from the variables saved globally (available from everywhere on this server) and casts it to a specified Type T
            </summary>
      <typeparam name="T">The type T to cast the value to</typeparam>
      <param name="name">the name of the variable</param>
      <returns>the value of the variable (or null if not existent)</returns>
    </member>
    <member name="M:LamestWebserver.SessionData.SetUserFileVariable``1(System.String,``0)">
      <summary>
            set the value of a variable saved globally for the current _USER_AND_FILE_COMBINATION_
            </summary>
      <typeparam name="T">The Type of the Value</typeparam>
      <param name="name">The name of the variable</param>
      <param name="value">The value of the variable</param>
    </member>
    <member name="M:LamestWebserver.SessionData.GetUserFileVariable(System.String)">
      <summary>
            get the value (or null if not existent) from the variables saved globally for the current _USER_AND_FILE_COMBINATION_
            </summary>
      <param name="name">the name of the variable</param>
      <returns>the value of the variable (or null if not existent)</returns>
    </member>
    <member name="M:LamestWebserver.SessionData.GetUserFileVariable``1(System.String)">
      <summary>
            get the value (or null if not existent) from the variables saved globally for the current _USER_AND_FILE_COMBINATION_ and casts it to a specified Type T
            </summary>
      <typeparam name="T">The type T to cast the value to</typeparam>
      <param name="name">the name of the variable</param>
      <returns>the value of the variable (or null if not existent)</returns>
    </member>
    <member name="M:LamestWebserver.SessionData.SetUserVariable``1(System.String,``0)">
      <summary>
            set the value of a variable saved globally for the current _USER_
            </summary>
      <typeparam name="T">The Type of the Value</typeparam>
      <param name="name">The name of the variable</param>
      <param name="value">The value of the variable</param>
    </member>
    <member name="M:LamestWebserver.SessionData.GetUserVariable(System.String)">
      <summary>
            get the value (or null if not existent) from the variables saved globally for the current _USER_
            </summary>
      <param name="name">the name of the variable</param>
      <returns>the value of the variable (or null if not existent)</returns>
    </member>
    <member name="M:LamestWebserver.SessionData.GetUserVariable``1(System.String)">
      <summary>
            get the value (or null if not existent) from the variables saved globally for the current _USER_ and casts it to a specified Type T
            </summary>
      <typeparam name="T">The type T to cast the value to</typeparam>
      <param name="name">the name of the variable</param>
      <returns>the value of the variable (or null if not existent)</returns>
    </member>
    <member name="M:LamestWebserver.SessionData.SetFileVariable``1(System.String,``0)">
      <summary>
            set the value of a variable saved globally for the current _FILE_
            </summary>
      <typeparam name="T">The Type of the Value</typeparam>
      <param name="name">The name of the variable</param>
      <param name="value">The value of the variable</param>
    </member>
    <member name="M:LamestWebserver.SessionData.GetFileVariable(System.String)">
      <summary>
            get the value (or null if not existent) from the variables saved globally for the current _FILE_
            </summary>
      <param name="name">the name of the variable</param>
      <returns>the value of the variable (or null if not existent)</returns>
    </member>
    <member name="M:LamestWebserver.SessionData.GetFileVariable``1(System.String)">
      <summary>
            get the value (or null if not existent) from the variables saved globally for the current _FILE_ and casts it to a specified Type T
            </summary>
      <typeparam name="T">The type T to cast the value to</typeparam>
      <param name="name">the name of the variable</param>
      <returns>the value of the variable (or null if not existent)</returns>
    </member>
    <member name="M:LamestWebserver.SessionData.UserExists(System.String)">
      <summary>
            Tells if a user has ever been registered with the given name
            </summary>
      <param name="userName">the name of the user</param>
      <returns>true if the user has ever existed</returns>
    </member>
    <member name="M:LamestWebserver.SessionData.GetGlobalVariables">
      <summary>
            Retrieves a collection of all global variables.
            </summary>
      <returns>a collection of all global variables.</returns>
    </member>
    <member name="M:LamestWebserver.SessionData.GetUserPerFileVariables">
      <summary>
            Retrieves a collection of the per file user variables.
            </summary>
      <returns>a collection of the per file user variables.</returns>
    </member>
    <member name="M:LamestWebserver.SessionData.GetPerFileVariables">
      <summary>
            Retrieves a collection of the per file variables.
            </summary>
      <returns>a collection of the per file user variables.</returns>
    </member>
    <member name="P:LamestWebserver.SessionData.UserName">
      <summary>
            The name of the current user (the sessionID handles this!) (the current user could by incognito due to a missing sessionID)
            </summary>
    </member>
    <member name="P:LamestWebserver.SessionData.KnownUser">
      <summary>
            Represents the state of the current viewer of the page - true if this user has a special hash
            </summary>
    </member>
    <member name="P:LamestWebserver.SessionData.Ssid">
      <summary>
            The SSID of the current Request
            </summary>
    </member>
    <member name="P:LamestWebserver.SessionData.RequestedFile">
      <summary>
            the currently requested file
            </summary>
    </member>
    <member name="P:LamestWebserver.SessionData.HttpHeadVariables">
      <summary>
            The Variables mentioned in the HTTP head (http://www.link.com/?IamAHeadVariable=IamTheCorrespondingValue)
            </summary>
    </member>
    <member name="P:LamestWebserver.SessionData.HttpPostVariables">
      <summary>
            The Variables mentinoed in the HTTP POST packet (they don't have to have values!)
            </summary>
    </member>
    <member name="T:LamestWebserver.EVariableScope">
      <summary>
            contains all available scopes for variables
            </summary>
    </member>
    <member name="F:LamestWebserver.EVariableScope.File">
      <summary>
            available for all visitors of this page
            </summary>
    </member>
    <member name="F:LamestWebserver.EVariableScope.User">
      <summary>
            Available globally for this USER
            </summary>
    </member>
    <member name="F:LamestWebserver.EVariableScope.FileAndUser">
      <summary>
            Available for the current User on only this page
            </summary>
    </member>
    <member name="F:LamestWebserver.EVariableScope.Global">
      <summary>
            Available for all Users on any page
            </summary>
    </member>
    <member name="T:LamestWebserver.SessionIdentificatorSlim">
      <summary>
            A slim variant of SessionData used in WebSockets
            </summary>
    </member>
    <member name="T:LamestWebserver.HttpRequest">
      <summary>
            Represents a decoded HTTP Packet or is used for packing data into a HTTP Packet for sending
            </summary>
    </member>
    <member name="F:LamestWebserver.HttpRequest.Version">
      <summary>
            The HTTP Version of the Request
            </summary>
    </member>
    <member name="F:LamestWebserver.HttpRequest.ModifiedDate">
      <summary>
            if the request packet contains a modified date it is contained in here
            </summary>
    </member>
    <member name="F:LamestWebserver.HttpRequest.RequestUrl">
      <summary>
            The contents of the request package
            </summary>
    </member>
    <member name="F:LamestWebserver.HttpRequest.Cookies">
      <summary>
            The cookies, that were set in the request
            </summary>
    </member>
    <member name="F:LamestWebserver.HttpRequest.VariablesHttpHead">
      <summary>
            HEAD variables set or mentioned in the request
            </summary>
    </member>
    <member name="F:LamestWebserver.HttpRequest.VariablesHttpPost">
      <summary>
            POST variables set or mentioned in the request
            </summary>
    </member>
    <member name="F:LamestWebserver.HttpRequest.IsWebsocketUpgradeRequest">
      <summary>
            Is the sent package a upgradeRequest to a WebSocket?
            </summary>
    </member>
    <member name="F:LamestWebserver.HttpRequest.HttpType">
      <summary>
            the HTTP type of the request (GET, POST)
            </summary>
    </member>
    <member name="F:LamestWebserver.HttpRequest.Stream">
      <summary>
            The current stream which is used for communicating.
            </summary>
    </member>
    <member name="F:LamestWebserver.HttpRequest.TcpClient">
      <summary>
            The current TcpClient which is used for communicating.
            </summary>
    </member>
    <member name="F:LamestWebserver.HttpRequest.IsIncompleteRequest">
      <summary>
            Is true if the browser just sent a request with declared but missing POST information
            </summary>
    </member>
    <member name="F:LamestWebserver.HttpRequest.Range">
      <summary>
            describes the range of bytes there are requested
            item1 = begin
            item2 = end
            is null when all bytes are requested
            </summary>
    </member>
    <member name="M:LamestWebserver.HttpRequest.Constructor(System.String@,System.String,System.IO.Stream)">
      <summary>
            The default constructor for a HTTP Request from string.
            if the version is null then please ignore the packet and wait for the next one to contain the POST values. this method will automatically stitch these packets together.
            </summary>
      <param name="input">the packet from the client decoded to string</param>
      <param name="lastPacket">the string contents of the last packet (Chrome POST packets are split in two packets)</param>
      <param name="stream">the stream at which the packet arrived (only used for sessionData)</param>
      <returns>the corresponding HTTP Packet</returns>
    </member>
    <member name="P:LamestWebserver.HttpRequest.RawRequest">
      <summary>
            Retrieves the raw request code.
            </summary>
    </member>
    <member name="T:LamestWebserver.HttpType">
      <summary>
            The different kinds of HTTP Requests we allow
            </summary>
    </member>
    <member name="F:LamestWebserver.HttpType.Get">
      <summary>
            A GET Request
            </summary>
    </member>
    <member name="F:LamestWebserver.HttpType.Post">
      <summary>
            A POST Request containing values
            </summary>
    </member>
    <member name="T:LamestWebserver.Master">
      <summary>
            Contains Globally available and important methods for LamestWebServer
            </summary>
    </member>
    <member name="T:LamestWebserver.Master.GetContents">
      <summary>
            The prototype for PageResponse Functions.
            </summary>
      <param name="data">the current SessionData</param>
      <returns>the response as string</returns>
    </member>
    <member name="T:LamestWebserver.Master.GetDataContents">
      <summary>
            The prototype for DataResponse Functions.
            </summary>
      <param name="data">The current SessionData.</param>
      <param name="contentType">The mime-contentType of the returned data.</param>
      <param name="encoding">The encoding of the returned response.</param>
      <returns>The response as byte array.</returns>
    </member>
    <member name="T:LamestWebserver.Master.GetDirectoryContents">
      <summary>
            The prototype for a response of a directory page from the server.
            </summary>
      <param name="data">The current SessionData.</param>
      <param name="subUrl">The sub-URL of this directory request.</param>
      <returns>The response as string.</returns>
    </member>
    <member name="T:LamestWebserver.Master.AddPageResponseFunction">
      <summary>
            The prototype for adding new pages to the servers.
            </summary>
      <param name="url">the URL</param>
      <param name="function">The code to execute.</param>
    </member>
    <member name="T:LamestWebserver.Master.AddDataResponseFunction">
      <summary>
            The prototype for adding new dataResponses to the servers.
            </summary>
      <param name="url">The URL.</param>
      <param name="function">The code to execute.</param>
    </member>
    <member name="T:LamestWebserver.Master.AddDirectoryFunction">
      <summary>
            The prototype for adding new directory pages to the servers.
            </summary>
      <param name="url">the url of the directory</param>
      <param name="function">the function to add</param>
    </member>
    <member name="T:LamestWebserver.Master.RemoveFunction">
      <summary>
            The prototype for removing a page from the server 
            </summary>
      <param name="url">the URL of the page</param>
    </member>
    <member name="F:LamestWebserver.Master.lwsLogoBase64">
      <summary>
            The LWS-Logo as Base64 string for HTML-Img-Elements
            </summary>
    </member>
    <member name="M:LamestWebserver.Master.DiscoverPages">
      <summary>
            Automatically discovers pages in the caller Assembly
            </summary>
    </member>
    <member name="M:LamestWebserver.Master.DiscoverPagesFromFile(System.String)">
      <summary>
            Automatically discovers pages in the specified assembly file
            <param name="filename">the assembly file path to load</param></summary>
    </member>
    <member name="M:LamestWebserver.Master.DiscoverPagesFromDirectory(System.String)">
      <summary>
            Automatically discovers pages in the specified assembly-directory
            <param name="path">the assembly directory path to load</param></summary>
    </member>
    <member name="M:LamestWebserver.Master.DiscoverPages(System.Reflection.Assembly,System.Action{System.String})">
      <summary>
            Automatically discovers pages in the specified Assembly
            </summary>
      <param name="asm">the assembly to discover pages in</param>
      <param name="onPageFound">the code to be executed on every page found (Parameter is the Name of the Type)</param>
    </member>
    <member name="M:LamestWebserver.Master.AddPageResponseToServer(System.String,LamestWebserver.Master.GetContents)">
      <summary>
            Adds an arbitrary response to the listening servers.
            </summary>
      <param name="url">The url of the page to add.</param>
      <param name="function">The code of the page.</param>
    </member>
    <member name="M:LamestWebserver.Master.RemovePageResponseFromServer(System.String)">
      <summary>
            Removes an arbitrary page response from the listening servers.
            </summary>
      <param name="url">the URL of the page to remove.</param>
    </member>
    <member name="M:LamestWebserver.Master.AddOneTimePageResponseToServer(System.String,LamestWebserver.Master.GetContents)">
      <summary>
            Adds a function to all listening servers, which will only be available once.
            </summary>
      <param name="url">the URL at which this page will be available.</param>
      <param name="function">the code to execute.</param>
    </member>
    <member name="M:LamestWebserver.Master.AddDataResponseToServer(System.String,LamestWebserver.Master.GetDataContents)">
      <summary>
            Adds an arbitrary data response to the listening servers.
            </summary>
      <param name="url">the url of the page to add.</param>
      <param name="function">the code of the data response.</param>
    </member>
    <member name="M:LamestWebserver.Master.RemoveDataResponseFromServer(System.String)">
      <summary>
            Removes an arbitrary data response from the listening servers.
            </summary>
      <param name="url">The URL of the data response to remove.</param>
    </member>
    <member name="M:LamestWebserver.Master.AddDirectoryPageToServer(System.String,LamestWebserver.Master.GetDirectoryContents)">
      <summary>
            Adds a directory function to all listening servers.
            </summary>
      <param name="url">The URL at which this directory page will be available.</param>
      <param name="function">The code to execute.</param>
    </member>
    <member name="M:LamestWebserver.Master.RemoveDirectoryPageFromServer(System.String)">
      <summary>
            Removes a directory function from all listening servers.
            </summary>
      <param name="url">The URL at which this directory page is available.</param>
    </member>
    <member name="M:LamestWebserver.Master.GetErrorMsg(System.String,System.String)">
      <summary>
            Returns a LamestWebServer-style error message.
            </summary>
      <param name="title">The title of the error message.</param>
      <param name="message">The error message.</param>
      <returns>A complete html page as string.</returns>
    </member>
    <member name="M:LamestWebserver.Master.StartServer(System.Int32,System.String,System.Boolean)">
      <summary>
            Starts a new Webserver listening for pages to add &amp; remove.
            </summary>
      <param name="port">the port of the server</param>
      <param name="directory">the main web directory of the server (e.g. "./web")</param>
      <param name="silent">shall the server print output to the console?</param>
    </member>
    <member name="M:LamestWebserver.Master.StopServers">
      <summary>
            Stops all running servers.
            </summary>
    </member>
    <member name="M:LamestWebserver.Master.StopServer(System.Int32)">
      <summary>
            Stops an arbitrary server. If it's the last one it stops everything server related (Threaded Worker, Notification Handlers)
            </summary>
      <param name="port">the port of the server to stop</param>
    </member>
    <member name="M:LamestWebserver.Master.AddWebsocketHandler(LamestWebserver.WebSocketCommunicationHandler)">
      <summary>
            Adds a WebSocketCommunicationHandler to all listening Servers.
            </summary>
      <param name="webSocketCommunicationHandler">the WebSocketCommunicationHandler</param>
    </member>
    <member name="M:LamestWebserver.Master.RemoveWebsocketHandler(System.String)">
      <summary>
            Removes a WebSocketCommunicationHandler from all listening Servers.
            </summary>
      <param name="URL">the URL of the WebSocketCommunicationHandler</param>
    </member>
    <member name="E:LamestWebserver.Master.AddPageResponseEvent">
      <summary>
            The event, that raises if a page is added.
            </summary>
    </member>
    <member name="E:LamestWebserver.Master.RemovePageResponseEvent">
      <summary>
            The event, that raises if a page is removed.
            </summary>
    </member>
    <member name="E:LamestWebserver.Master.AddDataResponseEvent">
      <summary>
            The event, that raises if a page is added.
            </summary>
    </member>
    <member name="E:LamestWebserver.Master.RemoveDataResponseEvent">
      <summary>
            the event, that raises if a page is removed
            </summary>
    </member>
    <member name="E:LamestWebserver.Master.AddOneTimeFunctionEvent">
      <summary>
            The event, that raises if a page, which is only available for one request, is added.
            </summary>
    </member>
    <member name="E:LamestWebserver.Master.AddDirectoryFunctionEvent">
      <summary>
            The event, that raises if a directory page is added.
            </summary>
    </member>
    <member name="E:LamestWebserver.Master.RemoveDirectoryFunctionEvent">
      <summary>
            The event, thath raises if a directory page is removed.
            </summary>
    </member>
    <member name="T:LamestWebserver.PageFiller">
      <summary>
            A page response on the basis of a special formatted html document
            </summary>
    </member>
    <member name="F:LamestWebserver.PageFiller.File">
      <summary>
            The file to load and process to display the page.
            </summary>
    </member>
    <member name="F:LamestWebserver.PageFiller.ReplaceHrefs">
      <summary>
            Replace the HREFs on this Page to include the sessionID
            </summary>
    </member>
    <member name="M:LamestWebserver.PageFiller.#ctor(System.String,System.String)">
      <summary>
            The constructor for a PageFiller
            </summary>
      <param name="URL">the url this page will be available at</param>
      <param name="file">the file to load and process from local storage</param>
    </member>
    <member name="M:LamestWebserver.PageFiller.RemoveFromServer">
      <summary>
            A Method to remove this page from the server
            </summary>
    </member>
    <member name="M:LamestWebserver.PageFiller.ProcessData(LamestWebserver.HttpSessionData,System.String@)">
      <summary>
            the method which is called when the response is requested for this page
            </summary>
      <param name="sessionData">the current sessionData</param>
      <param name="output">the page to return</param>
    </member>
    <member name="M:LamestWebserver.PageFiller.SetValue(System.String,System.String,System.String@)">
      <summary>
            sets a value in the document
            </summary>
      <param name="key">the key of the value</param>
      <param name="value">the value to set</param>
      <param name="output">the current page input</param>
    </member>
    <member name="P:LamestWebserver.PageFiller.URL">
      <summary>
            the URL, this page reads from before parsing into
            </summary>
    </member>
    <member name="T:LamestWebserver.IURLIdentifyable">
      <summary>
            A Page referencable by URL
            </summary>
    </member>
    <member name="P:LamestWebserver.IURLIdentifyable.URL">
      <summary>
            The URL of this Page
            </summary>
    </member>
    <member name="T:LamestWebserver.ResponseCoreImplementation">
      <summary>
            Simplifies implementation of IURLIdentifyables.
            </summary>
    </member>
    <member name="M:LamestWebserver.ResponseCoreImplementation.#ctor(System.String)">
      <summary>
            Creates a new ResponseCoreImplementation element.
            </summary>
      <param name="URL">The URL of the Response.</param>
    </member>
    <member name="M:LamestWebserver.ResponseCoreImplementation.GetDebugViewResponse(LamestWebserver.SessionData)">
      <summary>
            The response for the DebugView for this Response.
            </summary>
      <param name="sessionData">The current SessionData.</param>
      <returns>Returns a HElement containing the Response.</returns>
    </member>
    <member name="M:LamestWebserver.ResponseCoreImplementation.UpdateDebugResponseData(System.Exception,System.TimeSpan,LamestWebserver.HttpRequest,LamestWebserver.HttpResponse)">
      <inheritdoc />
    </member>
    <member name="P:LamestWebserver.ResponseCoreImplementation.URL">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.PageResponse">
      <summary>
            A abstract class for directly responding with a string to the client request.
            </summary>
    </member>
    <member name="M:LamestWebserver.PageResponse.#ctor(System.String,System.Boolean)">
      <summary>
            Constructs (and also registers if you want to) a new Page Response.
            </summary>
      <param name="URL">The URL of this page.</param>
      <param name="register">Shall this page automatically be registered?</param>
    </member>
    <member name="M:LamestWebserver.PageResponse.RemoveFromServer">
      <summary>
            This method removes the current page from the server (as URL identifyable object)
            </summary>
    </member>
    <member name="M:LamestWebserver.PageResponse.GetContents(LamestWebserver.SessionData)">
      <summary>
            A direct answer to the client as string.
            </summary>
      <param name="sessionData">The current SessionData.</param>
      <returns>The response.</returns>
    </member>
    <member name="T:LamestWebserver.SyncronizedPageResponse">
      <summary>
            A syncronized direct response as string to the client request
            </summary>
    </member>
    <member name="M:LamestWebserver.SyncronizedPageResponse.#ctor(System.String,System.Boolean)">
      <summary>
            Constructs a new SyncronizedPageResponse and registers it if specified at the given URL
            </summary>
      <param name="URL">the URL of this Page</param>
      <param name="register">shall this page be automatically registered?</param>
    </member>
    <member name="M:LamestWebserver.SyncronizedPageResponse.GetContents(LamestWebserver.SessionData)">
      <summary>
            A direct answer to the client as string
            </summary>
      <param name="sessionData">the current sessionData</param>
      <returns>the response</returns>
    </member>
    <member name="T:LamestWebserver.ElementResponse">
      <summary>
            A direct response as HElement to the client request
            </summary>
    </member>
    <member name="M:LamestWebserver.ElementResponse.#ctor(System.String,System.Boolean)">
      <summary>
            Constructs a new ElementResponse and registers it if specified at the given URL
            </summary>
      <param name="URL">the URL of this page</param>
      <param name="register">shall this page be automatically registered?</param>
    </member>
    <member name="M:LamestWebserver.ElementResponse.RemoveFromServer">
      <summary>
            This method is used to remove the current page from the server (as URL identifyable object)
            </summary>
    </member>
    <member name="M:LamestWebserver.ElementResponse.GetElement(LamestWebserver.SessionData)">
      <summary>
            A direct answer to the clients request as HElement
            </summary>
      <param name="sessionData">the current sessionData</param>
      <returns>the response</returns>
    </member>
    <member name="T:LamestWebserver.SyncronizedElementResponse">
      <summary>
            A syncronized direct response as HElement to the clients request
            </summary>
    </member>
    <member name="M:LamestWebserver.SyncronizedElementResponse.#ctor(System.String,System.Boolean)">
      <summary>
            Constructs a new SyncronizedElementResponse and registers it if specified at the given URL
            </summary>
      <param name="URL">the URL of this page</param>
      <param name="register">shall this page be automatically registered at the server?</param>
    </member>
    <member name="M:LamestWebserver.SyncronizedElementResponse.GetElement(LamestWebserver.SessionData)">
      <summary>
            The direct pre-syncronized response to the clients request as HElement
            </summary>
      <param name="sessionData">the current sessionData</param>
      <returns>the response</returns>
    </member>
    <member name="T:LamestWebserver.DirectoryResponse">
      <summary>
            A direct response as string to the client directory / directory item request
            </summary>
    </member>
    <member name="M:LamestWebserver.DirectoryResponse.#ctor(System.String,System.Boolean)">
      <summary>
            Constructs a new Directory Response object
            </summary>
      <param name="URL">the URLL of the directory</param>
      <param name="register">shall this directory be automatically registered at the server?</param>
    </member>
    <member name="M:LamestWebserver.DirectoryResponse.GetContent(LamestWebserver.SessionData,System.String)">
      <summary>
            Retrieves the content of this Directory as string to the response
            </summary>
      <param name="sessionData">the current SessionData</param>
      <param name="subUrl">the requested Sub-URL of the request</param>
      <returns>
      </returns>
    </member>
    <member name="M:LamestWebserver.DirectoryResponse.RemoveFromServer">
      <summary>
            Removes this DirectoryResponse from the Server.
            </summary>
    </member>
    <member name="M:LamestWebserver.DirectoryResponse.GetDebugViewResponse(LamestWebserver.SessionData)">
      <summary>
            The response for the DebugView for this Response.
            </summary>
      <param name="sessionData">The current SessionData.</param>
      <returns>Returns a HElement containing the Response.</returns>
    </member>
    <member name="M:LamestWebserver.DirectoryResponse.UpdateDebugResponseData(System.Exception,System.TimeSpan,System.String,LamestWebserver.HttpRequest,LamestWebserver.HttpResponse)">
      <inheritdoc />
    </member>
    <member name="P:LamestWebserver.DirectoryResponse.URL">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.DirectoryElementResponse">
      <summary>
            A direct response as HElement to the client directory / directory item request
            </summary>
    </member>
    <member name="M:LamestWebserver.DirectoryElementResponse.#ctor(System.String,System.Boolean)">
      <summary>
            Constructs a new Directory Element Response object
            </summary>
      <param name="URL">the URLL of the directory</param>
      <param name="register">shall this directory be automatically registered at the server?</param>
    </member>
    <member name="M:LamestWebserver.DirectoryElementResponse.GetContent(LamestWebserver.SessionData,System.String)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.DirectoryElementResponse.GetResponse(LamestWebserver.SessionData,System.String)">
      <summary>
            Retrieves the content of this Directory as HElement to the response
            </summary>
      <param name="sessionData">the current SessionData</param>
      <param name="subUrl">the requested Sub-URL of the request</param>
      <returns>A HElement as response.</returns>
    </member>
    <member name="T:LamestWebserver.DirectoryJsonResponse">
      <summary>
            A direct response as serializable object that will be serialized to JSON before being returned to the client directory / directory item request
            </summary>
    </member>
    <member name="M:LamestWebserver.DirectoryJsonResponse.#ctor(System.String,System.Boolean)">
      <summary>
            Constructs a new Directory Element Response object
            </summary>
      <param name="URL">the URLL of the directory</param>
      <param name="register">shall this directory be automatically registered at the server?</param>
    </member>
    <member name="M:LamestWebserver.DirectoryJsonResponse.GetContent(LamestWebserver.SessionData,System.String)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.DirectoryJsonResponse.GetResponse(LamestWebserver.SessionData,System.String)">
      <summary>
            Retrieves the content of this Directory as serializable object to the response.
            </summary>
      <param name="sessionData">the current SessionData</param>
      <param name="subUrl">the requested Sub-URL of the request</param>
      <returns>A serializable object.</returns>
    </member>
    <member name="T:LamestWebserver.CachedResponse">
      <summary>
            An automatically caching derivate of ElementResponse.
            </summary>
    </member>
    <member name="F:LamestWebserver.CachedResponse.StartingStringBuilderSize">
      <summary>
            The default size of a response.
            </summary>
    </member>
    <member name="M:LamestWebserver.CachedResponse.#ctor(System.String,System.Boolean)">
      <summary>
            Constructs a new CachedResponse.
            </summary>
      <param name="URL">The URL to register at.</param>
      <param name="register">Shall this page already be registered?</param>
    </member>
    <member name="M:LamestWebserver.CachedResponse.GetElement(LamestWebserver.SessionData)">
      <summary>
            Retrieves the auto-cached Element and it's subelements 
            (if CachingType in HSelectivelyCacheableElement is set to ECachingType.Cacheable for all elements or subelements that should be cached).
            </summary>
      <param name="sessionData">The current SessionData.</param>
      <returns>
      </returns>
    </member>
    <member name="M:LamestWebserver.CachedResponse.GetContents(LamestWebserver.SessionData)">
      <summary>
            Returns a HElement that contains the contents of the requested page.
            </summary>
      <param name="sessionData">The current SessionData.</param>
      <returns>Returns a HElement that contains the contents of the requested page.</returns>
    </member>
    <member name="M:LamestWebserver.CachedResponse.RemoveFromServer">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.DataResponse">
      <summary>
            Inherit from this class to allow for replying to request with data (byte[]).
            </summary>
    </member>
    <member name="M:LamestWebserver.DataResponse.#ctor(System.String,System.Boolean)">
      <summary>
            Creates a new ResponseCoreImplementation element.
            </summary>
      <param name="URL">The URL of the Response.</param>
    </member>
    <member name="M:LamestWebserver.DataResponse.GetDataContents(LamestWebserver.HttpSessionData,System.String@,System.Text.Encoding@)">
      <summary>
            The method that is called for every request to this URL.
            </summary>
      <param name="sessionData">The current SessionData.</param>
      <param name="contentType">The ContentType of the retrieved Data.</param>
      <param name="encoding">The Encoding / CharSet of the retrieved data.</param>
      <returns>The requested data as byte[].</returns>
    </member>
    <member name="M:LamestWebserver.DataResponse.RemoveFromServer">
      <summary>
            This method is used to remove the current data response from the server (as URL identifyable object)
            </summary>
    </member>
    <member name="T:LamestWebserver.JsonResponse">
      <summary>
            Inherit from this class to allow for replying to request with objects which will be serialized to JSON. Please make sure your objects are serializable.
            </summary>
    </member>
    <member name="M:LamestWebserver.JsonResponse.#ctor(System.String,System.Boolean)">
      <summary>
            Creates a new ResponseCoreImplementation element.
            </summary>
      <param name="URL">The URL of the Response.</param>
    </member>
    <member name="M:LamestWebserver.JsonResponse.GetResponseAsJson(LamestWebserver.HttpSessionData,System.String@,System.Text.Encoding@)">
      <summary>
            The internal method that is called for every request to this URL.
            </summary>
      <param name="sessionData">The current SessionData.</param>
      <param name="contentType">The ContentType of the retrieved Data.</param>
      <param name="encoding">The Encoding / CharSet of the retrieved data.</param>
      <returns>The requested data as byte[].</returns>
    </member>
    <member name="M:LamestWebserver.JsonResponse.GetResponse(LamestWebserver.HttpSessionData)">
      <summary>
            The method called for every request to this URL.
            </summary>
      <param name="sessionData">
      </param>
      <returns>Returns the requested *serializable* object</returns>
    </member>
    <member name="M:LamestWebserver.JsonResponse.RemoveFromServer">
      <summary>
            This method is used to remove the current data response from the server (as URL identifyable object)
            </summary>
    </member>
    <member name="T:LamestWebserver.InstantPageResponse">
      <summary>
            This Helper-Class is Used to quickly define new pages at the server
            </summary>
    </member>
    <member name="M:LamestWebserver.InstantPageResponse.AddInstantPageResponse(System.String,LamestWebserver.Master.GetContents)">
      <summary>
            adds a page to the server, that executes the given code
            </summary>
    </member>
    <member name="M:LamestWebserver.InstantPageResponse.AddOneTimeInstantPageResponse(LamestWebserver.Master.GetContents,System.Boolean)">
      <summary>
            adds a temporary page to the server, that executes the given code (only available for ONE request)
            </summary>
      <param name="code">the code to execute</param>
      <param name="instantlyRemove">runtime code should instantly remove these - constructors should not remove, since then they'll be gone the next compile</param>
      <returns>the name at which this temporary page will be available at.</returns>
    </member>
    <member name="M:LamestWebserver.InstantPageResponse.AddTimedRedirect(System.String,System.String,System.Int32,System.String,System.Boolean)">
      <summary>
            adds a page to the server, that redirects to "destinationURL" in X milliseconds
            </summary>
    </member>
    <member name="M:LamestWebserver.InstantPageResponse.AddRedirect(System.String,System.String,System.Boolean)">
      <summary>
            adds a page to the server, that redirects to "destinationURL"
            </summary>
    </member>
    <member name="M:LamestWebserver.InstantPageResponse.AddRedirectWithCode(System.String,System.String,System.Action{LamestWebserver.HttpSessionData},System.Boolean)">
      <summary>
            adds a page to the server, that redirects to "destinationURL" and executes the given code
            </summary>
    </member>
    <member name="M:LamestWebserver.InstantPageResponse.AddConditionalRedirect(System.String,System.String,System.String,System.Func{LamestWebserver.HttpSessionData,System.Boolean},System.Boolean)">
      <summary>
            adds a page to the server, that redirects to "destinationURLifTRUE" if the conditional code returns true and redirects to "destinationURLifFALSE" if the conditional code returns false
            </summary>
    </member>
    <member name="M:LamestWebserver.InstantPageResponse.AddRedirectOrCode(System.String,System.String,LamestWebserver.Master.GetContents,System.Func{LamestWebserver.HttpSessionData,System.Boolean},System.Boolean)">
      <summary>
            adds a page to the server, that redirects if the conditional code returns true and executes other code if the conditional code returns false
            </summary>
    </member>
    <member name="M:LamestWebserver.InstantPageResponse.AddOneTimeRedirect(System.String,System.Boolean,System.Boolean)">
      <summary>
            adds a temporary page to the server, that redirects to "destinationURL" (only available for ONE request)
            </summary>
      <param name="destinationURL">the desired URL to reach</param>
      <param name="instantlyRemove">runtime code should instantly remove these - constructors should not remove, since then they'll be gone the next compile</param>
      <param name="copyPOST">specifies whether all POST values given should be copied throughout the whole redirecting process</param>
      <returns>the name at which this temporary page will be available at.</returns>
    </member>
    <member name="M:LamestWebserver.InstantPageResponse.AddOneTimeRedirectWithCode(System.String,System.Boolean,System.Action{LamestWebserver.HttpSessionData},System.Boolean)">
      <summary>
            adds a temporary page to the server, that redirects to "destinationURL" and executes the given code (only available for ONE request)
            </summary>
      <param name="destinationURL">the desired URL to reach</param>
      <param name="instantlyRemove">runtime code should instantly remove these - constructors should not remove, since then they'll be gone the next compile</param>
      <param name="action">the code to execute</param>
      <param name="copyPOST">specifies whether all POST values given should be copied throughout the whole redirecting process</param>
    </member>
    <member name="M:LamestWebserver.InstantPageResponse.AddOneTimeTimedRedirect(System.String,System.String,System.Int32,System.Boolean,System.Boolean)">
      <summary>
            adds a temporary page to the server, that redirects to "destinationURL" in X milliseconds (only available for ONE request)
            </summary>
      <param name="destinationURL">the desired URL to reach</param>
      <param name="message">the message to display</param>
      <param name="milliseconds">the amount of milliseconds to wait before redirecting</param>
      <param name="instantlyRemove">runtime code should instantly remove these - constructors should not remove, since then they'll be gone the next compile</param>
      <param name="copyPOST">specifies whether all POST values given should be copied throughout the whole redirecting process</param>
      <returns>the name at which this temporary page will be available at.</returns>
    </member>
    <member name="M:LamestWebserver.InstantPageResponse.AddOneTimeConditionalRedirect(System.String,System.String,System.Boolean,System.Func{LamestWebserver.HttpSessionData,System.Boolean},System.Boolean)">
      <summary>
            adds a temporary page to the server, that redirects to "destinationURLifTRUE" if the conditional code returns true and redirects to "destinationURLifFALSE" if the conditional code returns false (only available for ONE request)
            </summary>
      <param name="destinationURLifTRUE">the desired URL to reach if the code returns true</param>
      <param name="destinationURLifFALSE">the desired URL to reach if the code returns false</param>
      <param name="instantlyRemove">runtime code should instantly remove these - constructors should not remove, since then they'll be gone the next compile</param>
      <param name="conditionalCode">the conditional code to execute</param>
      <param name="copyPOST">specifies whether all POST values given should be copied throughout the whole redirecting process</param>
      <returns>the name at which this temporary page will be available at.</returns>
    </member>
    <member name="M:LamestWebserver.InstantPageResponse.AddOneTimeRedirectOrCode(System.String,LamestWebserver.Master.GetContents,System.Boolean,System.Func{LamestWebserver.HttpSessionData,System.Boolean},System.Boolean)">
      <summary>
            adds a temporary page to the server, that redirects if the conditional code returns true and executes other code if the conditional code returns false (only available for ONE request)
            </summary>
      <param name="destinationURLifTRUE">the desired URL to reach if the conditional code returns true</param>
      <param name="codeIfFALSE">the code to be executed if the conditional code returns false</param>
      <param name="instantlyRemove">runtime code should instantly remove these - constructors should not remove, since then they'll be gone the next compile</param>
      <param name="conditionalCode">the conditional code to execute</param>
      <param name="copyPOST">specifies whether all POST values given should be copied throughout the whole redirecting process</param>
      <returns>the name at which this temporary page will be available at.</returns>
    </member>
    <member name="M:LamestWebserver.InstantPageResponse.GenerateRedirectCode(System.String,LamestWebserver.SessionData,System.Boolean)">
      <summary>
            quickly generates a redirecting html page
            </summary>
      <param name="destinationURL">the desired url to reach</param>
      <param name="sessionData">the current SessionData</param>
      <param name="copyPOST">shall the POST-Values be copied?</param>
      <returns>the page as string</returns>
    </member>
    <member name="M:LamestWebserver.InstantPageResponse.GenerateRedirectInMillisecondsCode(System.String,System.String,System.Int32,LamestWebserver.HttpSessionData,System.Boolean)">
      <summary>
            quickly generates a redirecting html page that waits a few milliseconds and displays a message
            </summary>
      <param name="destinationURL">the desired url to reach</param>
      <param name="message">the message to display</param>
      <param name="milliseconds">the amount of milliseconds to wait</param>
      <param name="sessionData">the current SessionData</param>
      <param name="copyPOST">shall the POST-Values be copied?</param>
      <returns>the page as string</returns>
    </member>
    <member name="T:LamestWebserver.SessionContainer">
      <summary>
            Here you can find all the Global SessionID related methods and fields
            </summary>
    </member>
    <member name="T:LamestWebserver.SessionContainer.ESessionIdRereferencingMode">
      <summary>
            Contains the available SessionID recreation modes
            </summary>
    </member>
    <member name="F:LamestWebserver.SessionContainer.ESessionIdRereferencingMode.Keep">
      <summary>
            Keeps the SessionID for a specific session.
            </summary>
    </member>
    <member name="F:LamestWebserver.SessionContainer.ESessionIdRereferencingMode.AlwaysRenew">
      <summary>
            always renews the sessionID during every newly processed page
            </summary>
    </member>
    <member name="T:LamestWebserver.SessionContainer.ESessionIdTransmissionType">
      <summary>
            Contains all available modes for sessionId transmission
            </summary>
    </member>
    <member name="F:LamestWebserver.SessionContainer.ESessionIdTransmissionType.Cookie">
      <summary>
            Transmitts the SessionID via Cookie
            </summary>
    </member>
    <member name="F:LamestWebserver.SessionContainer.UserInfo.lastPullUtcTime">
      <summary>
            The utc time this info was retrieved the last time.
            </summary>
    </member>
    <member name="F:LamestWebserver.SessionContainer.SessionIdRereferencingMode">
      <summary>
            The mode for SessionID recreation.
            </summary>
    </member>
    <member name="F:LamestWebserver.SessionContainer.SessionIdTransmissionType">
      <summary>
            The mode for sessionId transmission
            </summary>
    </member>
    <member name="F:LamestWebserver.SessionContainer.UserVariableHashMapSize">
      <summary>
            The default size of the HashMaps for UserGlobal-Variables
            </summary>
    </member>
    <member name="F:LamestWebserver.SessionContainer.UserHashMapSize">
      <summary>
            The default size of the HashMap containing the User
            </summary>
    </member>
    <member name="F:LamestWebserver.SessionContainer.MaxUsers">
      <summary>
            The maximum count of users being online at one time
            </summary>
    </member>
    <member name="M:LamestWebserver.SessionContainer.GetSSIDforUser(System.String,System.Boolean@,LamestWebserver.SessionContainer.UserInfo@)">
      <summary>
            This method also creates a user if none exists!
            </summary>
      <param name="user">the current user</param>
      <param name="isNewSSID">has a new ssid been created or are we reusing the old one</param>
      <param name="userInfo">the UserInfo of the retrieved User</param>
      <returns>
      </returns>
    </member>
    <member name="M:LamestWebserver.SessionContainer.GenerateUnusedHash">
      <summary>
            generates a 128 bit AES hash that is not used in pagenames
            </summary>
      <returns>
      </returns>
    </member>
    <member name="P:LamestWebserver.SessionContainer.GlobalDefaultCachingType">
      <summary>
            The default CachingType for Pages and Elements without a specific CachingType.
            </summary>
    </member>
    <member name="T:LamestWebserver.HttpSessionData">
      <summary>
            Contains all Session dependent Information
            </summary>
    </member>
    <member name="F:LamestWebserver.HttpSessionData.SetCookies">
      <summary>
            Cookies to set in the client browser
            </summary>
    </member>
    <member name="F:LamestWebserver.HttpSessionData.RemoteEndpoint">
      <summary>
            The remoteEndpoint (if any) of the original Request.
            </summary>
    </member>
    <member name="F:LamestWebserver.HttpSessionData.LocalEndpoint">
      <summary>
            The remoteEndpoint (if any) of the original Request.
            </summary>
    </member>
    <member name="M:LamestWebserver.HttpSessionData.RegisterUser(System.String)">
      <summary>
            Registers the user and assigns a SSID
            </summary>
      <param name="userName">the User to register</param>
      <returns>the SSID for the user</returns>
    </member>
    <member name="M:LamestWebserver.HttpSessionData.ForceGetNextSsid">
      <summary>
            _FORCES_ to get a new SSID for the current user if needed for higher level security (call before building the site)
            </summary>
      <returns>the new ssid</returns>
    </member>
    <member name="M:LamestWebserver.HttpSessionData.LogoutUser">
      <summary>
            deletes the registration of the current user.
            </summary>
    </member>
    <member name="P:LamestWebserver.HttpSessionData.RawHttpPacket">
      <summary>
            the raw packet sent to the server
            </summary>
    </member>
    <member name="P:LamestWebserver.HttpSessionData.Cookies">
      <summary>
            The cookies sent by the client to the server
            </summary>
    </member>
    <member name="P:LamestWebserver.HttpSessionData.HttpPacket">
      <summary>
            HttpPacket of the original Request.
            </summary>
    </member>
    <member name="P:LamestWebserver.HttpSessionData.Stream">
      <summary>
            Stream of the original Request.
            </summary>
    </member>
    <member name="T:LamestWebserver.WebServer">
      <summary>
            A Webserver. The central unit in LamestWebserver.
            </summary>
    </member>
    <member name="F:LamestWebserver.WebServer.CurrentClientRemoteEndpoint">
      <summary>
            The IP and Port of the currently Connected Client.
            </summary>
    </member>
    <member name="F:LamestWebserver.WebServer.PageResponseStorageHashMapSize">
      <summary>
            The size of the Page Response AVLTree-Hashmap. This is not the maximum amount this Hashmap can handle.
            </summary>
    </member>
    <member name="F:LamestWebserver.WebServer.DataResponseStorageHashMapSize">
      <summary>
            The size of the Data Response AVLTree-Hashmap. This is not the maximum amount this Hashmap can handle.
            </summary>
    </member>
    <member name="F:LamestWebserver.WebServer.OneTimePageResponsesStorageQueueSize">
      <summary>
            The maximum amount of items in the One Time Page Response Queue (QueuedAVLTree).
            </summary>
    </member>
    <member name="F:LamestWebserver.WebServer.WebSocketResponsePageStorageHashMapSize">
      <summary>
            The size of the Websocket Response AVLTree-Hashmap. This is not the maximum amount this Hashmap can handle.
            </summary>
    </member>
    <member name="F:LamestWebserver.WebServer.DirectoryResponseStorageHashMapSize">
      <summary>
            The size of the Directory Response AVLTree-Hashmap. This is not the maximum amount this Hashmap can handle.
            </summary>
    </member>
    <member name="F:LamestWebserver.WebServer.RequestMaxPacketSize">
      <summary>
            The size that is read from the networkStream for each request.
            </summary>
    </member>
    <member name="F:LamestWebserver.WebServer.ResponseDefaultStringLength">
      <summary>
            The size that is set as starting StringBuilder capacity for a HttpResponse.
            </summary>
    </member>
    <member name="F:LamestWebserver.WebServer.BlockInsecureConnections">
      <summary>
            Shall the server answer in plain HTTP if no certificate is provided or if the authentication fails?
            <para /> If this is set to true and your Certificate is not set up correctly, the webserver will not respond at all to the clients.
            </summary>
    </member>
    <member name="F:LamestWebserver.WebServer.RequestHandler">
      <summary>
            The RequestHandler used in this Webserver instance.
            </summary>
    </member>
    <member name="F:LamestWebserver.WebServer.RequireUnsafeMemory">
      <summary>
            If enabled will provide callers with a fresh FlushableMemoryPool.
            </summary>
    </member>
    <member name="F:LamestWebserver.WebServer.ErrorMsgContainSessionData">
      <summary>
            Shall the ErrorMsg contain the current SessionData if possible?
            </summary>
    </member>
    <member name="F:LamestWebserver.WebServer.EncryptErrorMsgs">
      <summary>
            Shall exception-messages be encrypted?
            </summary>
    </member>
    <member name="M:LamestWebserver.WebServer.AddDependentWebsever(LamestWebserver.WebServer)">
      <summary>
            Add a webserver to be closed (IDisposable.Dispose()) whenever this webserver is closed. 
            </summary>
      <param name="webserver">The webserver to close with this one.</param>
    </member>
    <member name="M:LamestWebserver.WebServer.#ctor(System.Int32,System.String,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Authentication.SslProtocols)">
      <summary>
            Starts a new Webserver and adds the folder and default components to the CurrentRequestHandler. If you are just adding a server listening on another port as well - just use a different constructor.
            </summary>
      <param name="port">The port to listen to</param>
      <param name="folder">a folder to read from (can be null)</param>
      <param name="certificate">The ssl certificate for https (if null: connection will be http; if set will only be https)
            <para /> If the webserver does not respond after including your certificate, it might not be loaded or set up correctly.
            Consider looking at the LamestWebserver Logger output.</param>
      <param name="enabledSslProtocols">The available ssl protocols if the connection is https.</param>
    </member>
    <member name="M:LamestWebserver.WebServer.#ctor(System.Int32,LamestWebserver.RequestHandlers.RequestHandler,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Authentication.SslProtocols)">
      <summary>
            Starts a new Webserver on a specified RequestHandler.
            </summary>
      <param name="port">The port to listen to.</param>
      <param name="requestHandler">The RequestHandler to use. If null, RequestHandler.CurrentRequestHandler will be used.</param>
      <param name="certificate">The ssl certificate for https (if null: connection will be http; if set will only be https)
            <para /> If the webserver does not respond after including your certificate, it might not be loaded or set up correctly.
            Consider looking at the LamestWebserver Logger output.</param>
      <param name="enabledSslProtocols">The available ssl protocols if the connection is https.</param>
    </member>
    <member name="M:LamestWebserver.WebServer.#ctor(System.Int32,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Authentication.SslProtocols)">
      <summary>
            Starts a new Webserver listening to all previously added Responses.
            </summary>
      <param name="port">the port to listen to</param>
      <param name="certificate">The ssl certificate for https (if null: connection will be http; if set will only be https)
            <para /> If the webserver does not respond after including your certificate, it might not be loaded or set up correctly.
            Consider looking at the LamestWebserver Logger output.</param>
      <param name="enabledSslProtocols">The available ssl protocols if the connection is https.</param>
    </member>
    <member name="M:LamestWebserver.WebServer.Stop">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.WebServer.HandleClient(System.Net.Sockets.TcpClient,System.Net.Sockets.NetworkStream)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.WebServer.GetEncoding(System.String)">
      <summary>
            Source: http://stackoverflow.com/questions/3825390/effective-way-to-find-any-files-encoding
            Determines a text file's encoding by analyzing its byte order mark (BOM).
            Defaults to ASCII when detection of the text file's endianness fails.
            </summary>
      <param name="filename">The text file to analyze.</param>
      <returns>The detected encoding.</returns>
    </member>
    <member name="M:LamestWebserver.WebServer.GetErrorMsg(System.Exception,LamestWebserver.SessionData,System.String)">
      <summary>
            Retrieves an error message
            </summary>
      <param name="exception">the exception that happened</param>
      <param name="sessionData">the sessionData (can be null)</param>
      <param name="httpPacket">the http-request</param>
      <returns>a nice error message</returns>
    </member>
    <member name="P:LamestWebserver.WebServer.ServerCount">
      <summary>
            The number of currently running servers.
            </summary>
    </member>
    <member name="P:LamestWebserver.WebServer.Certificate">
      <summary>
            SSL Certificate. server will use ssl if certificate not null.
            <para /> If the webserver does not respond after including your certificate, it might not be loaded or set up correctly.
            Consider the LamestWebserver log output `ServerHandler.StartHandler();`.
            </summary>
    </member>
    <member name="P:LamestWebserver.WebServer.EnabledSslProtocols">
      <summary>
            Enabled SSL Protocols supported by the server.
            </summary>
    </member>
    <member name="P:LamestWebserver.WebServer.ErrorMsgKey">
      <summary>
            The Key for the exception-message encryption.
            </summary>
    </member>
    <member name="P:LamestWebserver.WebServer.ErrorMsgIV">
      <summary>
            The IV for the exception-message encryption.
            </summary>
    </member>
    <member name="T:LamestWebserver.ServerHandler">
      <summary>
            Provides functionality to overview running servers and logs
            </summary>
    </member>
    <member name="M:LamestWebserver.ServerHandler.StartHandler(System.Boolean)">
      <summary>
            Starts the IO-Loop for handling the server and showing logs.
            </summary>
    </member>
    <member name="M:LamestWebserver.ServerHandler.StopHandler">
      <summary>
            Stops the Handler and all running Servers.
            </summary>
    </member>
    <member name="M:LamestWebserver.ServerHandler.LogMessage(System.String)">
      <summary>
            Logs a message to the ServerLog
            </summary>
      <param name="message">the message to log</param>
    </member>
    <member name="T:LamestWebserver.WebSocketManagementOvertakeFlagException">
      <summary>
            An Exception used to Tell the outer Thread that the Websocket controll has been taken over by another thread.
            </summary>
    </member>
    <member name="T:LamestWebserver.WebSocketCommunicationHandler">
      <summary>
            A raw Communication Handler for WebSocket Connections, representing a response scheme for WebSocket Requests
            </summary>
    </member>
    <member name="M:LamestWebserver.WebSocketCommunicationHandler.#ctor(System.String)">
      <summary>
            Constructs and registers a new CommunicationHandler for Websockets
            </summary>
      <param name="URL">
      </param>
    </member>
    <member name="M:LamestWebserver.WebSocketCommunicationHandler.Register">
      <summary>
            Registers the current handler at the servers
            </summary>
    </member>
    <member name="M:LamestWebserver.WebSocketCommunicationHandler.Unregister">
      <summary>
            Unregisters the current handler at the servers
            </summary>
    </member>
    <member name="P:LamestWebserver.WebSocketCommunicationHandler.URL">
      <inheritdoc />
    </member>
    <member name="E:LamestWebserver.WebSocketCommunicationHandler.OnMessage">
      <summary>
            The event to execute whenever a new Message has been received
            </summary>
    </member>
    <member name="E:LamestWebserver.WebSocketCommunicationHandler.OnResponded">
      <summary>
            The event to execute whenever a new Message has been sent
            </summary>
    </member>
    <member name="E:LamestWebserver.WebSocketCommunicationHandler.OnConnect">
      <summary>
            The event to execute whenever a client connected
            </summary>
    </member>
    <member name="E:LamestWebserver.WebSocketCommunicationHandler.OnDisconnect">
      <summary>
            The event to execute whenever a client disconnected
            </summary>
    </member>
    <member name="T:LamestWebserver.WebSocketHandlerProxy">
      <summary>
            A WebSocketHandlerProxy represents a single clients connection to a WebSocketCommunicationHandler
            </summary>
    </member>
    <member name="F:LamestWebserver.WebSocketHandlerProxy.LastMessageReceived">
      <summary>
            When did we receive the last message from the client
            </summary>
    </member>
    <member name="F:LamestWebserver.WebSocketHandlerProxy.LastMessageSent">
      <summary>
            When did we send the last message to the client
            </summary>
    </member>
    <member name="M:LamestWebserver.WebSocketHandlerProxy.Respond(System.String)">
      <summary>
            Sends a message to the client
            </summary>
      <param name="message">the message to send</param>
    </member>
    <member name="M:LamestWebserver.WebSocketHandlerProxy.RespondPong(System.Byte[])">
      <summary>
            Responds a Pong to the client
            </summary>
      <param name="bytes">the contained bytes</param>
    </member>
    <member name="M:LamestWebserver.WebSocketHandlerProxy.RespondPing(System.Byte[])">
      <summary>
            Responds a Ping to the client
            </summary>
      <param name="bytes">the contained bytes</param>
    </member>
    <member name="M:LamestWebserver.WebSocketHandlerProxy.RespondBinary(System.Byte[])">
      <summary>
            Responds binary data to the client
            </summary>
      <param name="bytes">the bytes to send</param>
    </member>
    <member name="M:LamestWebserver.WebSocketHandlerProxy.ReadAsync">
      <summary>
            Reads asynchronously from the client stream
            </summary>
      <returns>true if the client responded anything</returns>
    </member>
    <member name="M:LamestWebserver.WebSocketHandlerProxy.ConnectionClosed">
      <summary>
            Triggers the disconnected event in the handler
            </summary>
    </member>
    <member name="P:LamestWebserver.WebSocketHandlerProxy.IsActive">
      <summary>
            Is the client still active
            </summary>
    </member>
    <member name="T:LamestWebserver.WebServices.IWebService">
      <summary>
            This interface marks the a type as LamestWebserver WebService.
            </summary>
    </member>
    <member name="T:LamestWebserver.WebServices.WebServiceAttribute">
      <summary>
            An Attribute Associated with the WebService Host.
            </summary>
    </member>
    <member name="T:LamestWebserver.WebServices.WebServiceIgnore">
      <summary>
            This Attribute specifies to Ignore a specific public method, property or field.
            </summary>
    </member>
    <member name="T:LamestWebserver.WebServices.WebServiceException">
      <summary>
            An abstract Exception type for grouping WebServiceExceptions.
            </summary>
    </member>
    <member name="M:LamestWebserver.WebServices.WebServiceException.#ctor">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.WebServices.WebServiceException.#ctor(System.String)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.WebServices.WebServiceException.#ctor(System.String,System.Exception)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.WebServices.WebServiceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.WebServices.RemoteException">
      <summary>
            An Exception for failed remote operations.
            </summary>
    </member>
    <member name="M:LamestWebserver.WebServices.RemoteException.#ctor">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.WebServices.RemoteException.#ctor(System.String)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.WebServices.RemoteException.#ctor(System.String,System.Exception)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.WebServices.RemoteException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.WebServices.ServiceNotAvailableException">
      <summary>
            An exception for when a WebService is not available.
            </summary>
    </member>
    <member name="M:LamestWebserver.WebServices.ServiceNotAvailableException.#ctor">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.WebServices.ServiceNotAvailableException.#ctor(System.String)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.WebServices.ServiceNotAvailableException.#ctor(System.String,System.Exception)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.WebServices.ServiceNotAvailableException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.WebServices.IncompatibleTypeException">
      <summary>
            An exception for when a Type is not compatible with the specifications.
            </summary>
    </member>
    <member name="M:LamestWebserver.WebServices.IncompatibleTypeException.#ctor">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.WebServices.IncompatibleTypeException.#ctor(System.String)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.WebServices.IncompatibleTypeException.#ctor(System.String,System.Exception)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.WebServices.IncompatibleTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.WebServices.WebServiceIncompatibleException">
      <summary>
            An exception for when a remote WebService is behaving different than expected.
            </summary>
    </member>
    <member name="M:LamestWebserver.WebServices.WebServiceIncompatibleException.#ctor">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.WebServices.WebServiceIncompatibleException.#ctor(System.String)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.WebServices.WebServiceIncompatibleException.#ctor(System.String,System.Exception)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.WebServices.WebServiceIncompatibleException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.WebServices.WebServiceHandler">
      <summary>
            A WebServiceHandler communicates with Local &amp; Remote WebServices.
            </summary>
    </member>
    <member name="F:LamestWebserver.WebServices.WebServiceHandler.CurrentServiceHandler">
      <summary>
            The WebServiceHandler Singleton.
            </summary>
    </member>
    <member name="M:LamestWebserver.WebServices.WebServiceHandler.#ctor">
      <summary>
            Creates a WebServiceHandler instance.
            </summary>
    </member>
    <member name="M:LamestWebserver.WebServices.WebServiceHandler.AssignRemoteEndpointToType(System.Type,System.Net.IPEndPoint)">
      <summary>
            Assigns an IPEndPoint to a specific type to be found on Remote Machine as WebServices.
            </summary>
      <param name="type">The type to assign to.</param>
      <param name="remoteEndpoint">The IPEndpoint of the Remote Machine.</param>
    </member>
    <member name="M:LamestWebserver.WebServices.WebServiceHandler.GetLocalService``1">
      <summary>
            Retrieves a local WebService of a specified Type.
            </summary>
      <typeparam name="T">The type to generate a local Object of.</typeparam>
      <returns>Returns an instance of the local WebService implementation.</returns>
    </member>
    <member name="M:LamestWebserver.WebServices.WebServiceHandler.GetLocalService(System.Type)">
      <summary>
            Retrieves a local WebService of a specified Type.
            </summary>
      <param name="type">The type to generate a local Object of.</param>
      <returns>Returns an instance of the local WebService implementation.</returns>
    </member>
    <member name="M:LamestWebserver.WebServices.WebServiceHandler.GetRequesterService``1">
      <summary>
            Retrieves a requesting WebService of a specified Type, that will contact the remote WebService whenever a method is executed or a property is being set or retrieved.
            </summary>
      <typeparam name="T">The type to generate a requesting Object of.</typeparam>
      <returns>Returns an instance of the requesting WebService implementation.</returns>
    </member>
    <member name="M:LamestWebserver.WebServices.WebServiceHandler.GetRequesterService(System.Type)">
      <summary>
            Retrieves a requesting WebService of a specified Type, that will contact the remote WebService whenever a method is executed or a property is being set or retrieved.
            </summary>
      <param name="type">The type to generate a requesting Object of.</param>
      <returns>Returns an instance of the requesting WebService implementation.</returns>
    </member>
    <member name="M:LamestWebserver.WebServices.WebServiceHandler.Request(LamestWebserver.WebServices.WebServiceRequest)">
      <summary>
            Requests a certain WebServiceRequest at the local WebServiceHandler.
            </summary>
      <param name="webServiceRequest">The WebServiceRequest to reply to.</param>
      <returns>Returns the response as WebServiceResponse.</returns>
    </member>
    <member name="T:LamestWebserver.WebServices.WebServiceRequest">
      <summary>
            A request to a WebService.
            </summary>
    </member>
    <member name="F:LamestWebserver.WebServices.WebServiceRequest.Namespace">
      <summary>
            The namespace of the requested type.
            </summary>
    </member>
    <member name="F:LamestWebserver.WebServices.WebServiceRequest.Type">
      <summary>
            The name of the requested type.
            </summary>
    </member>
    <member name="F:LamestWebserver.WebServices.WebServiceRequest.Method">
      <summary>
            The name of the method that will be requested.
            </summary>
    </member>
    <member name="F:LamestWebserver.WebServices.WebServiceRequest.Parameters">
      <summary>
            The parameters of the method call.
            </summary>
    </member>
    <member name="F:LamestWebserver.WebServices.WebServiceRequest.MethodParameterTypes">
      <summary>
            The names of the parameter types of the method definition.
            </summary>
    </member>
    <member name="F:LamestWebserver.WebServices.WebServiceRequest.ParameterTypes">
      <summary>
            The names of the types that were passed as parameters to the method.
            </summary>
    </member>
    <member name="M:LamestWebserver.WebServices.WebServiceRequest.#ctor">
      <summary>
            Deserialization constructor.
            </summary>
    </member>
    <member name="M:LamestWebserver.WebServices.WebServiceRequest.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Deserialization constructor.
            </summary>
      <param name="info">SerializationInfo.</param>
      <param name="context">StreamingContext.</param>
    </member>
    <member name="M:LamestWebserver.WebServices.WebServiceRequest.Request``1(System.String,System.Type[],System.Object[])">
      <summary>
            Builds a request to a specified method of a specified type using the given parameters.
            </summary>
      <typeparam name="T">The Type of the method to call.</typeparam>
      <param name="method">The name of the method to call.</param>
      <param name="methodParameterTypes">The types of the method definition.</param>
      <param name="parameters">The parameters to pass to the method.</param>
      <returns>Returns a WebServiceRequest containing the given specification.</returns>
    </member>
    <member name="M:LamestWebserver.WebServices.WebServiceRequest.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.WebServices.WebServiceRequest.GetSchema">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.WebServices.WebServiceRequest.ReadXml(System.Xml.XmlReader)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.WebServices.WebServiceRequest.WriteXml(System.Xml.XmlWriter)">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.WebServices.WebServiceResponse">
      <summary>
            A response from a WebService retrieving the result of a method call.
            </summary>
    </member>
    <member name="F:LamestWebserver.WebServices.WebServiceResponse.ReturnType">
      <summary>
            The return type of the method call.
            </summary>
    </member>
    <member name="F:LamestWebserver.WebServices.WebServiceResponse.ReturnValueType">
      <summary>
            The type of the returned value (if any).
            </summary>
    </member>
    <member name="F:LamestWebserver.WebServices.WebServiceResponse.ReturnValue">
      <summary>
            The returned value (if any).
            </summary>
    </member>
    <member name="F:LamestWebserver.WebServices.WebServiceResponse.ExceptionThrown">
      <summary>
            The thrown exception (if any).
            </summary>
    </member>
    <member name="F:LamestWebserver.WebServices.WebServiceResponse.StringifiedException">
      <summary>
            The thrown exception as string (if any).
            </summary>
    </member>
    <member name="M:LamestWebserver.WebServices.WebServiceResponse.#ctor">
      <summary>
            Deserialization constructor.
            </summary>
    </member>
    <member name="M:LamestWebserver.WebServices.WebServiceResponse.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Deserialization constructor.
            </summary>
      <param name="info">SerializationInfo.</param>
      <param name="context">StreamingContext.</param>
    </member>
    <member name="M:LamestWebserver.WebServices.WebServiceResponse.Return">
      <summary>
            Builds a new WebServiceResponse for a method that returned `void`.
            </summary>
      <returns>The corresponding WebServiceResponse.</returns>
    </member>
    <member name="M:LamestWebserver.WebServices.WebServiceResponse.Return``1(``0)">
      <summary>
            Builds a new WebServiceResponse for a method that returned a value.
            </summary>
      <returns>The corresponding WebServiceResponse.</returns>
    </member>
    <member name="M:LamestWebserver.WebServices.WebServiceResponse.Exception(System.Exception)">
      <summary>
            Builds a new WebServiceResponse for a method that threw an exception.
            </summary>
      <returns>The corresponding WebServiceResponse.</returns>
    </member>
    <member name="M:LamestWebserver.WebServices.WebServiceResponse.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.WebServices.WebServiceResponse.GetSchema">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.WebServices.WebServiceResponse.ReadXml(System.Xml.XmlReader)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.WebServices.WebServiceResponse.WriteXml(System.Xml.XmlWriter)">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.WebServices.EWebServiceReturnType">
      <summary>
            The return type of a WebServiceResponse.
            </summary>
    </member>
    <member name="F:LamestWebserver.WebServices.EWebServiceReturnType.ReturnVoid">
      <summary>
            The method returned `void`.
            </summary>
    </member>
    <member name="F:LamestWebserver.WebServices.EWebServiceReturnType.ReturnValue">
      <summary>
            The method returned a value.
            </summary>
    </member>
    <member name="F:LamestWebserver.WebServices.EWebServiceReturnType.ExceptionThrown">
      <summary>
            The method threw an exception.
            </summary>
    </member>
    <member name="T:LamestWebserver.WebServices.WebServiceServer">
      <summary>
            A WebServiceServer makes a WebServiceHandler available to Remote Machines.
            </summary>
    </member>
    <member name="F:LamestWebserver.WebServices.WebServiceServer.RequestHandler">
      <summary>
            The internal WebRequestHandler of this WebServiceServer.
            </summary>
    </member>
    <member name="F:LamestWebserver.WebServices.WebServiceServer.RequestMaxPacketSize">
      <summary>
            The size that is read from the networkStream for each request.
            </summary>
    </member>
    <member name="M:LamestWebserver.WebServices.WebServiceServer.#ctor(System.Int32)">
      <summary>
            Starts a new WebServiceServer on a specified port.
            </summary>
      <param name="port">The port to start on.</param>
    </member>
    <member name="M:LamestWebserver.WebServices.WebServiceServer.#ctor(LamestWebserver.WebServices.WebServiceHandler,System.Int32)">
      <summary>
            Starts a WebServiceServer at a given port using a specified WebRequestHandler to resolve requests.
            </summary>
      <param name="webRequestHandler">The WebRequestHandler to resolve requests with.</param>
      <param name="port">The Port to listen on.</param>
    </member>
    <member name="M:LamestWebserver.WebServices.WebServiceServer.HandleClient(System.Net.Sockets.TcpClient,System.Net.Sockets.NetworkStream)">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.WebServices.WebServiceServerRequest">
      <summary>
            Contains Functionality to send requests to remote WebServiceServers.
            </summary>
    </member>
    <member name="F:LamestWebserver.WebServices.WebServiceServerRequest.MaxResponseSize">
      <summary>
            The maximum size of the response from the remote WebServiceServer.
            </summary>
    </member>
    <member name="M:LamestWebserver.WebServices.WebServiceServerRequest.Request(LamestWebserver.WebServices.WebServiceRequest,System.Net.IPEndPoint)">
      <summary>
            Requests a WebServiceRequest at a remote WebServiceServer.
            </summary>
      <param name="request">The request to send.</param>
      <param name="ipEndPoint">The IPEndpoint of the remote WebServiceServer.</param>
      <returns>Returns a WebServiceResponse from the Remote WebServiceServer.</returns>
    </member>
    <member name="T:LamestWebserver.WebServices.Generators.RequesterWebServiceTemplate">
      <summary>
            Class to produce the template output
            </summary>
    </member>
    <member name="F:LamestWebserver.WebServices.Generators.RequesterWebServiceTemplate.Namespace">
      <summary>
            The name of the Namespace to build this class in.
            </summary>
    </member>
    <member name="F:LamestWebserver.WebServices.Generators.RequesterWebServiceTemplate.ClassName">
      <summary>
            The name of the Class to inherit from.
            </summary>
    </member>
    <member name="F:LamestWebserver.WebServices.Generators.RequesterWebServiceTemplate.AssemblyNameSpace">
      <summary>
            The name of the Namespace that the type to inherit from is defined in.
            </summary>
    </member>
    <member name="F:LamestWebserver.WebServices.Generators.RequesterWebServiceTemplate.ClassType">
      <summary>
            The Type of the Class to inherit from.
            </summary>
    </member>
    <member name="M:LamestWebserver.WebServices.Generators.RequesterWebServiceTemplate.TransformText">
      <summary>
            Create the template output
            </summary>
    </member>
    <member name="T:LamestWebserver.WebServices.Generators.RequesterWebServiceTemplateBase">
      <summary>
            Base class for this transformation
            </summary>
    </member>
    <member name="T:LamestWebserver.WebServices.Generators.RequesterWebServiceTemplateBase.ToStringInstanceHelper">
      <summary>
            Utility class to produce culture-oriented representation of an object as a string.
            </summary>
    </member>
    <member name="M:LamestWebserver.WebServices.Generators.RequesterWebServiceTemplateBase.ToStringInstanceHelper.ToStringWithCulture(System.Object)">
      <summary>
            This is called from the compile/run appdomain to convert objects within an expression block to a string
            </summary>
    </member>
    <member name="P:LamestWebserver.WebServices.Generators.RequesterWebServiceTemplateBase.ToStringInstanceHelper.FormatProvider">
      <summary>
            Gets or sets format provider to be used by ToStringWithCulture method.
            </summary>
    </member>
    <member name="M:LamestWebserver.WebServices.Generators.RequesterWebServiceTemplateBase.Write(System.String)">
      <summary>
            Write text directly into the generated output
            </summary>
    </member>
    <member name="M:LamestWebserver.WebServices.Generators.RequesterWebServiceTemplateBase.WriteLine(System.String)">
      <summary>
            Write text directly into the generated output
            </summary>
    </member>
    <member name="M:LamestWebserver.WebServices.Generators.RequesterWebServiceTemplateBase.Write(System.String,System.Object[])">
      <summary>
            Write formatted text directly into the generated output
            </summary>
    </member>
    <member name="M:LamestWebserver.WebServices.Generators.RequesterWebServiceTemplateBase.WriteLine(System.String,System.Object[])">
      <summary>
            Write formatted text directly into the generated output
            </summary>
    </member>
    <member name="M:LamestWebserver.WebServices.Generators.RequesterWebServiceTemplateBase.Error(System.String)">
      <summary>
            Raise an error
            </summary>
    </member>
    <member name="M:LamestWebserver.WebServices.Generators.RequesterWebServiceTemplateBase.Warning(System.String)">
      <summary>
            Raise a warning
            </summary>
    </member>
    <member name="M:LamestWebserver.WebServices.Generators.RequesterWebServiceTemplateBase.PushIndent(System.String)">
      <summary>
            Increase the indent
            </summary>
    </member>
    <member name="M:LamestWebserver.WebServices.Generators.RequesterWebServiceTemplateBase.PopIndent">
      <summary>
            Remove the last indent that was added with PushIndent
            </summary>
    </member>
    <member name="M:LamestWebserver.WebServices.Generators.RequesterWebServiceTemplateBase.ClearIndent">
      <summary>
            Remove any indentation
            </summary>
    </member>
    <member name="P:LamestWebserver.WebServices.Generators.RequesterWebServiceTemplateBase.GenerationEnvironment">
      <summary>
            The string builder that generation-time code is using to assemble generated output
            </summary>
    </member>
    <member name="P:LamestWebserver.WebServices.Generators.RequesterWebServiceTemplateBase.Errors">
      <summary>
            The error collection for the generation process
            </summary>
    </member>
    <member name="P:LamestWebserver.WebServices.Generators.RequesterWebServiceTemplateBase.indentLengths">
      <summary>
            A list of the lengths of each indent that was added with PushIndent
            </summary>
    </member>
    <member name="P:LamestWebserver.WebServices.Generators.RequesterWebServiceTemplateBase.CurrentIndent">
      <summary>
            Gets the current indent we use when adding lines to the output
            </summary>
    </member>
    <member name="P:LamestWebserver.WebServices.Generators.RequesterWebServiceTemplateBase.Session">
      <summary>
            Current transformation session
            </summary>
    </member>
    <member name="P:LamestWebserver.WebServices.Generators.RequesterWebServiceTemplateBase.ToStringHelper">
      <summary>
            Helper to produce culture-oriented representation of an object as a string
            </summary>
    </member>
    <member name="T:LamestWebserver.WebServices.Generators.WebServiceImplementationGenerator">
      <summary>
            Generates WebService Implementations from the WebService Implementation Templates.
            </summary>
    </member>
    <member name="M:LamestWebserver.WebServices.Generators.WebServiceImplementationGenerator.GetWebServiceLocalImplementation``1(LamestWebserver.WebServices.WebServiceHandler)">
      <summary>
            Compiles, builds and retrieves an instance of a local WebServiceImplementation inherited from the given type belonging to the given WebServiceHandler.
            </summary>
      <typeparam name="T">The type to inherit from.</typeparam>
      <param name="webServiceHandler">The corresponding WebServiceHandler.</param>
      <returns>An object of the local WebService.</returns>
    </member>
    <member name="M:LamestWebserver.WebServices.Generators.WebServiceImplementationGenerator.GetWebServiceLocalImplementation(System.Type,LamestWebserver.WebServices.WebServiceHandler)">
      <summary>
            Compiles, builds and retrieves an instance of a local WebServiceImplementation inherited from the given type belonging to the given WebServiceHandler.
            </summary>
      <param name="type">The type to inherit from.</param>
      <param name="webServiceHandler">The corresponding WebServiceHandler.</param>
      <returns>An object of the local WebService.</returns>
    </member>
    <member name="M:LamestWebserver.WebServices.Generators.WebServiceImplementationGenerator.GetWebServiceRequestImplementation``1(LamestWebserver.WebServices.WebServiceHandler)">
      <summary>
            Compiles, builds and retrieves an instance of a remote WebServiceImplementation inherited from the given type belonging to the given WebServiceHandler.
            </summary>
      <typeparam name="T">The type to inherit from.</typeparam>
      <param name="webServiceHandler">The corresponding WebServiceHandler.</param>
      <returns>An object of the remote WebService.</returns>
    </member>
    <member name="M:LamestWebserver.WebServices.Generators.WebServiceImplementationGenerator.GetWebServiceRequestImplementation(System.Type,LamestWebserver.WebServices.WebServiceHandler)">
      <summary>
            Compiles, builds and retrieves an instance of a remote WebServiceImplementation inherited from the given type belonging to the given WebServiceHandler.
            </summary>
      <param name="type">The type to inherit from.</param>
      <param name="webServiceHandler">The corresponding WebServiceHandler.</param>
      <returns>An object of the remote WebService.</returns>
    </member>
    <member name="M:LamestWebserver.WebServices.Generators.WebServiceImplementationGenerator.CompileAndBuildObject(System.String,System.Type,System.String,LamestWebserver.WebServices.WebServiceHandler)">
      <summary>
            Compiles a piece of code and builds an instance of the given type.
            </summary>
      <param name="code">The code to compile.</param>
      <param name="type">The baseType of the 'typeName' type.</param>
      <param name="typeName">The type to retrieve &amp; build an instance of from the compiled code.</param>
      <param name="webServiceHandler">The current WebServiceHandler.</param>
      <returns>Returns the instance of the given type.</returns>
    </member>
    <member name="M:LamestWebserver.WebServices.Generators.WebServiceImplementationGenerator.GetWebServiceLocalImplementationName``1">
      <summary>
            Retrieves the Name of a local WebService that would derive from the given type.
            </summary>
      <typeparam name="T">The type to derive a WebService from.</typeparam>
      <returns>Returns the name of the type as string.</returns>
    </member>
    <member name="M:LamestWebserver.WebServices.Generators.WebServiceImplementationGenerator.GetWebServiceLocalImplementationName(System.Type)">
      <summary>
            Retrieves the Name of a local WebService that would derive from the given type.
            </summary>
      <param name="type">The type to derive a WebService from.</param>
      <returns>Returns the name of the type as string.</returns>
    </member>
    <member name="M:LamestWebserver.WebServices.Generators.WebServiceImplementationGenerator.GetWebServiceLocalImplementationNamespace">
      <summary>
            Retrieves the namespace of a local WebService.
            </summary>
      <returns>Returns the name of the namespace of a local WebService.</returns>
    </member>
    <member name="M:LamestWebserver.WebServices.Generators.WebServiceImplementationGenerator.GetWebServiceRequestImplementationName``1">
      <summary>
            Retrieves the Name of a remote WebService that would derive from the given type.
            </summary>
      <typeparam name="T">The type to derive a WebService from.</typeparam>
      <returns>Returns the name of the type as string.</returns>
    </member>
    <member name="M:LamestWebserver.WebServices.Generators.WebServiceImplementationGenerator.GetWebServiceRequestImplementationName(System.Type)">
      <summary>
            Retrieves the Name of a remote WebService that would derive from the given type.
            </summary>
      <param name="type">The type to derive a WebService from.</param>
      <returns>Returns the name of the type as string.</returns>
    </member>
    <member name="M:LamestWebserver.WebServices.Generators.WebServiceImplementationGenerator.GetWebServiceRequestImplementationNamespace">
      <summary>
            Retrieves the namespace of a remote WebService.
            </summary>
      <returns>Returns the name of the namespace of a remote WebService.</returns>
    </member>
    <member name="T:LamestWebserver.WebServices.Generators.LocalWebServiceTemplate">
      <summary>
            Class to produce the template output
            </summary>
    </member>
    <member name="F:LamestWebserver.WebServices.Generators.LocalWebServiceTemplate.Namespace">
      <summary>
            The name of the Namespace to build this class in.
            </summary>
    </member>
    <member name="F:LamestWebserver.WebServices.Generators.LocalWebServiceTemplate.ClassName">
      <summary>
            The name of the Class to inherit from.
            </summary>
    </member>
    <member name="F:LamestWebserver.WebServices.Generators.LocalWebServiceTemplate.AssemblyNameSpace">
      <summary>
            The name of the Namespace that the type to inherit from is defined in.
            </summary>
    </member>
    <member name="F:LamestWebserver.WebServices.Generators.LocalWebServiceTemplate.ClassType">
      <summary>
            The Type of the Class to inherit from.
            </summary>
    </member>
    <member name="M:LamestWebserver.WebServices.Generators.LocalWebServiceTemplate.TransformText">
      <summary>
            Create the template output
            </summary>
    </member>
    <member name="T:LamestWebserver.WebServices.Generators.LocalWebServiceTemplateBase">
      <summary>
            Base class for this transformation
            </summary>
    </member>
    <member name="T:LamestWebserver.WebServices.Generators.LocalWebServiceTemplateBase.ToStringInstanceHelper">
      <summary>
            Utility class to produce culture-oriented representation of an object as a string.
            </summary>
    </member>
    <member name="M:LamestWebserver.WebServices.Generators.LocalWebServiceTemplateBase.ToStringInstanceHelper.ToStringWithCulture(System.Object)">
      <summary>
            This is called from the compile/run appdomain to convert objects within an expression block to a string
            </summary>
    </member>
    <member name="P:LamestWebserver.WebServices.Generators.LocalWebServiceTemplateBase.ToStringInstanceHelper.FormatProvider">
      <summary>
            Gets or sets format provider to be used by ToStringWithCulture method.
            </summary>
    </member>
    <member name="M:LamestWebserver.WebServices.Generators.LocalWebServiceTemplateBase.Write(System.String)">
      <summary>
            Write text directly into the generated output
            </summary>
    </member>
    <member name="M:LamestWebserver.WebServices.Generators.LocalWebServiceTemplateBase.WriteLine(System.String)">
      <summary>
            Write text directly into the generated output
            </summary>
    </member>
    <member name="M:LamestWebserver.WebServices.Generators.LocalWebServiceTemplateBase.Write(System.String,System.Object[])">
      <summary>
            Write formatted text directly into the generated output
            </summary>
    </member>
    <member name="M:LamestWebserver.WebServices.Generators.LocalWebServiceTemplateBase.WriteLine(System.String,System.Object[])">
      <summary>
            Write formatted text directly into the generated output
            </summary>
    </member>
    <member name="M:LamestWebserver.WebServices.Generators.LocalWebServiceTemplateBase.Error(System.String)">
      <summary>
            Raise an error
            </summary>
    </member>
    <member name="M:LamestWebserver.WebServices.Generators.LocalWebServiceTemplateBase.Warning(System.String)">
      <summary>
            Raise a warning
            </summary>
    </member>
    <member name="M:LamestWebserver.WebServices.Generators.LocalWebServiceTemplateBase.PushIndent(System.String)">
      <summary>
            Increase the indent
            </summary>
    </member>
    <member name="M:LamestWebserver.WebServices.Generators.LocalWebServiceTemplateBase.PopIndent">
      <summary>
            Remove the last indent that was added with PushIndent
            </summary>
    </member>
    <member name="M:LamestWebserver.WebServices.Generators.LocalWebServiceTemplateBase.ClearIndent">
      <summary>
            Remove any indentation
            </summary>
    </member>
    <member name="P:LamestWebserver.WebServices.Generators.LocalWebServiceTemplateBase.GenerationEnvironment">
      <summary>
            The string builder that generation-time code is using to assemble generated output
            </summary>
    </member>
    <member name="P:LamestWebserver.WebServices.Generators.LocalWebServiceTemplateBase.Errors">
      <summary>
            The error collection for the generation process
            </summary>
    </member>
    <member name="P:LamestWebserver.WebServices.Generators.LocalWebServiceTemplateBase.indentLengths">
      <summary>
            A list of the lengths of each indent that was added with PushIndent
            </summary>
    </member>
    <member name="P:LamestWebserver.WebServices.Generators.LocalWebServiceTemplateBase.CurrentIndent">
      <summary>
            Gets the current indent we use when adding lines to the output
            </summary>
    </member>
    <member name="P:LamestWebserver.WebServices.Generators.LocalWebServiceTemplateBase.Session">
      <summary>
            Current transformation session
            </summary>
    </member>
    <member name="P:LamestWebserver.WebServices.Generators.LocalWebServiceTemplateBase.ToStringHelper">
      <summary>
            Helper to produce culture-oriented representation of an object as a string
            </summary>
    </member>
    <member name="M:LamestWebserver.UI.HLinkSearchBox.GetContent(LamestWebserver.SessionData)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.UI.HLinkSearchBox.GetResponse(LamestWebserver.SessionData)">
      <summary>
            Retrieves the response-functions answer to the browser in a usable format.
            </summary>
      <param name="sessionData">the current sessionData</param>
      <returns>the responded message</returns>
    </member>
    <member name="M:LamestWebserver.UI.HSearchBox.GetContent(LamestWebserver.SessionData)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.UI.HSearchBox.GetResponse(LamestWebserver.SessionData)">
      <summary>
            Retrieves the response-functions answer to the browser in a usable format.
            </summary>
      <param name="sessionData">the current sessionData</param>
      <returns>the responded message</returns>
    </member>
    <member name="T:LamestWebserver.UI.HMultipleValuesButton">
      <summary>
            A button that cycles through multiple distinct states on click.
            </summary>
    </member>
    <member name="M:LamestWebserver.UI.HMultipleValuesButton.GetContent(LamestWebserver.SessionData)">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.UI.ExtentionMethods">
      <summary>
            Contains Extention Methods for LamestWebserver.UI.
            </summary>
    </member>
    <member name="M:LamestWebserver.UI.ExtentionMethods.ToHElement(System.String)">
      <summary>
            Wrapps a string inside a HString.
            </summary>
      <param name="s">the string</param>
      <returns>the string as HElement</returns>
    </member>
    <member name="M:LamestWebserver.UI.ExtentionMethods.ToHElement(System.Int32)">
      <summary>
            Casts an int to string contained in a HString.
            </summary>
      <param name="i">the int</param>
      <returns>the int as HElement</returns>
    </member>
    <member name="M:LamestWebserver.UI.ExtentionMethods.ToHElement(System.Object)">
      <summary>
            Casts an object to string contained in a HString.
            </summary>
      <param name="obj">the object.</param>
      <returns>the object as HElement</returns>
    </member>
    <member name="T:LamestWebserver.UI.PageBuilder">
      <summary>
            A Container for a complete WebPage with html, head and body tags.
            Can also be used as direct response if inherited well.
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.PageBuilder.getContentMethod">
      <summary>
            a function pointer to the executed method on GetContent(ISessionIdentificator sessionData)
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.PageBuilder.PageTitle">
      <summary>
            the title of this page
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.PageBuilder.StylesheetLinks">
      <summary>
            Path to the stylesheets.
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.PageBuilder.Scripts">
      <summary>
            javascript code directly bound into the page code
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.PageBuilder.ScriptLinks">
      <summary>
            path to javascript code files
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.PageBuilder.AdditionalHeadArguments">
      <summary>
            additional lines added to the "head" segment of the page
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.PageBuilder.Favicon">
      <summary>
            The icon to display
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.PageBuilder.StylesheetCode">
      <summary>
            CSS code directly bound into the page code
            </summary>
    </member>
    <member name="M:LamestWebserver.UI.PageBuilder.#ctor(System.String,System.String)">
      <summary>
            Creates a new PageBuilder and registers it at the server for a specified url
            </summary>
      <param name="pagetitle">The window title.</param>
      <param name="URL">the URL at which to register this page</param>
    </member>
    <member name="M:LamestWebserver.UI.PageBuilder.#ctor(System.String,System.String,System.String,System.Func{LamestWebserver.SessionData,System.Boolean})">
      <summary>
            Creates a page builder and registers it as the server for a specified URL. If the conditionalCode returns false the page will not be parsed and the user will be refered to the referalURL
            </summary>
      <param name="title">The window title.</param>
      <param name="URL">the URL at which to register this page</param>
      <param name="referalURL">the URL at which to refer if the conditionalCode returns false</param>
      <param name="conditionalCode">the conditionalCode</param>
    </member>
    <member name="M:LamestWebserver.UI.PageBuilder.#ctor(System.String)">
      <summary>
            Creates a new PageBuilder, but does _NOT_ register it at the server for a specified url
            </summary>
      <param name="title">The title of this window.</param>
    </member>
    <member name="M:LamestWebserver.UI.PageBuilder.GetTagHead(System.String)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.UI.PageBuilder.BuildContent(LamestWebserver.SessionData)">
      <summary>
            The method which is called to parse this element to string
            </summary>
      <param name="sessionData">the current sessionData</param>
      <returns>the contents as string</returns>
    </member>
    <member name="M:LamestWebserver.UI.PageBuilder.GetContent(LamestWebserver.SessionData)">
      <summary>
            The method used to grab contents as string to be registered as page for the server.
            </summary>
      <param name="sessionData">the current sessionData</param>
      <returns>the contents as string</returns>
    </member>
    <member name="M:LamestWebserver.UI.PageBuilder.RemoveFromServer">
      <summary>
            via this method you can "unregister" this pages url (if this pageBuilder is registered) at the server.
            </summary>
    </member>
    <member name="P:LamestWebserver.UI.PageBuilder.URL">
      <summary>
            the URL at which this page is / will be available at
            </summary>
    </member>
    <member name="T:LamestWebserver.UI.HElement">
      <summary>
            A HTML Element
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.HElement.ID">
      <summary>
            the ID of this element
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.HElement.Name">
      <summary>
            the Name of this element
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.HElement.Class">
      <summary>
            the class of this element
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.HElement.Style">
      <summary>
            the style attribute of this element
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.HElement.Title">
      <summary>
            the mouseover text and title attribute of this element
            </summary>
    </member>
    <member name="M:LamestWebserver.UI.HElement.GetContent(LamestWebserver.SessionData)">
      <summary>
            the method used to parse the element to string correctly
            </summary>
      <param name="sessionData">sessionData of the currentUser</param>
      <returns>
      </returns>
    </member>
    <member name="M:LamestWebserver.UI.HElement.op_Multiply(LamestWebserver.UI.HElement,LamestWebserver.SessionData)">
      <summary>
            element.GetContent(sessionData)
            </summary>
      <returns>element.GetContent(sessionData)</returns>
    </member>
    <member name="M:LamestWebserver.UI.HElement.ToString">
      <summary>
            Parses this element to string
            </summary>
      <returns>this element as string</returns>
    </member>
    <member name="M:LamestWebserver.UI.HElement.op_Implicit(System.String)~LamestWebserver.UI.HElement">
      <summary>
            casts a string to a HPlainText element
            </summary>
      <param name="s">
      </param>
    </member>
    <member name="M:LamestWebserver.UI.HElement.op_Explicit(LamestWebserver.UI.HElement)~System.String">
      <summary>
            Parses an element to string
            </summary>
      <param name="element">the element</param>
    </member>
    <member name="M:LamestWebserver.UI.HElement.op_Addition(LamestWebserver.UI.HElement,LamestWebserver.UI.HElement)">
      <summary>
            Adds two elements to be one HMultipleElements object
            </summary>
      <param name="a">the first HElement</param>
      <param name="b">the second HElement</param>
      <returns>a HMultipleElements object</returns>
    </member>
    <member name="M:LamestWebserver.UI.HElement.IsStaticResponse(System.String,LamestWebserver.Caching.ECachingType,System.Text.StringBuilder)">
      <summary>
            Returns true if the HElement returns a static response.
            <paramref name="key">The key of the cache entry if cacheable.</paramref><paramref name="defaultCachingType">The default CachingType to refer to.</paramref><paramref name="response">The StringBuilder to attatch the response to.</paramref></summary>
    </member>
    <member name="T:LamestWebserver.UI.HCacheableElement">
      <summary>
            A HElement inheriting the default IsCacheable response for a static response.
            </summary>
    </member>
    <member name="M:LamestWebserver.UI.HCacheableElement.IsStaticResponse(System.String,LamestWebserver.Caching.ECachingType,System.Text.StringBuilder)">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.UI.HSelectivelyCacheableElement">
      <summary>
            A HElement inheriting a IsCacheable response for a response that could be cachable or not cacheable.
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.HSelectivelyCacheableElement.CachingType">
      <summary>
            Is thie response cacheable?
            </summary>
    </member>
    <member name="M:LamestWebserver.UI.HSelectivelyCacheableElement.IsStaticResponse(System.String,LamestWebserver.Caching.ECachingType,System.Text.StringBuilder)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.UI.HSelectivelyCacheableElement.SetCacheable(LamestWebserver.Caching.ECachingType)">
      <summary>
            Sets the current HSelectivelyCacheableElement cacheable.
            </summary>
      <param name="cachingType">The CachingType to set. (ECachingType.Cacheable by default)</param>
      <returns>Returns the current HSelectivelyCacheableElement.</returns>
    </member>
    <member name="T:LamestWebserver.UI.HNewLine">
      <summary>
            A br element used for line breaks in HTML
            </summary>
    </member>
    <member name="M:LamestWebserver.UI.HNewLine.GetContent(LamestWebserver.SessionData)">
      <summary>
            This Method parses the current element to string
            </summary>
      <param name="sessionData">the current ISessionIdentificator</param>
      <returns>the element as string</returns>
    </member>
    <member name="T:LamestWebserver.UI.HLine">
      <summary>
            A hr element used to display a hoizontal line
            </summary>
    </member>
    <member name="M:LamestWebserver.UI.HLine.GetContent(LamestWebserver.SessionData)">
      <summary>
            This Method parses the current element to string
            </summary>
      <param name="sessionData">the current ISessionIdentificator</param>
      <returns>the element as string</returns>
    </member>
    <member name="T:LamestWebserver.UI.HPlainText">
      <summary>
            The contents of this element will directly be copied into the final html document.
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.HPlainText.Text">
      <summary>
            The text to copy to the HTML document
            </summary>
    </member>
    <member name="M:LamestWebserver.UI.HPlainText.#ctor(System.String)">
      <summary>
            Constructs a new By-Copy-Element. The contents will only be copied into the final HTML code.
            </summary>
      <param name="text">the text to copy into the final HTML code</param>
    </member>
    <member name="M:LamestWebserver.UI.HPlainText.GetContent(LamestWebserver.SessionData)">
      <summary>
            returns the given text
            </summary>
      <param name="sessionData">the current ISessionIdentificator</param>
      <returns>the element as string</returns>
    </member>
    <member name="T:LamestWebserver.UI.HString">
      <summary>
            Copies the given text to the final HTML-Response - html encoded.
            </summary>
    </member>
    <member name="M:LamestWebserver.UI.HString.#ctor(System.String)">
      <summary>
            Creates a new HEncodedString containing the given text.
            </summary>
      <param name="text">
      </param>
    </member>
    <member name="M:LamestWebserver.UI.HString.GetContent(LamestWebserver.SessionData)">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.UI.HMultipleElements">
      <summary>
            Combines multiple HElements without using a div to a single HElement object
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.HMultipleElements.Elements">
      <summary>
            The elements to display
            </summary>
    </member>
    <member name="M:LamestWebserver.UI.HMultipleElements.#ctor(LamestWebserver.UI.HElement[])">
      <summary>
            Constructs a new HMultipleElements containing the given elements
            </summary>
      <param name="elements">the elements to add</param>
    </member>
    <member name="M:LamestWebserver.UI.HMultipleElements.#ctor(System.Collections.Generic.IEnumerable{LamestWebserver.UI.HElement})">
      <summary>
            Constructs a new HMultipleElements containing the given elements
            </summary>
      <param name="elements">the elements to add</param>
    </member>
    <member name="M:LamestWebserver.UI.HMultipleElements.GetContent(LamestWebserver.SessionData)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.UI.HMultipleElements.op_Addition(LamestWebserver.UI.HMultipleElements,LamestWebserver.UI.HElement)">
      <summary>
            Adds elements to the current multiple element
            </summary>
      <param name="thisElement">one multipleElements object</param>
      <param name="otherElement">some HElement</param>
      <returns>the MultipleElements object containing the other multipleElements object</returns>
    </member>
    <member name="M:LamestWebserver.UI.HMultipleElements.op_Implicit(LamestWebserver.UI.HMultipleElements)~System.String">
      <summary>
            Casts a HMultipleElements object to string
            </summary>
      <param name="multipleElements">the elements to cast</param>
      <returns>the elements as string</returns>
    </member>
    <member name="M:LamestWebserver.UI.HMultipleElements.GetCachedContents(System.String,LamestWebserver.Caching.ECachingType,System.Text.StringBuilder)">
      <summary>
            Retrieves cached contents for nested elements.
            </summary>
      <paramref name="key">The cache key of the container.</paramref>
      <paramref name="defaultCachingType">The default CachingType to refer to.</paramref>
      <paramref name="response">The StringBuilder to attatch the response to.</paramref>
    </member>
    <member name="M:LamestWebserver.UI.HMultipleElements.IsStaticResponse(System.String,LamestWebserver.Caching.ECachingType,System.Text.StringBuilder)">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.UI.HLink">
      <summary>
            Represents an "a" element used for links
            </summary>
    </member>
    <member name="M:LamestWebserver.UI.HLink.#ctor(System.String,System.String,System.String)">
      <summary>
            Creates a new Link Element
            </summary>
      <param name="text">The Text of the Link</param>
      <param name="href">The URL this link points to</param>
      <param name="onclick">the Javasctipt action executed when clicking on this link</param>
    </member>
    <member name="M:LamestWebserver.UI.HLink.#ctor(LamestWebserver.UI.HElement,System.String,System.String)">
      <summary>
            Creates a new Link Element
            </summary>
      <param name="element">The Element inside the Link</param>
      <param name="href">The URL this link points to</param>
      <param name="onclick">the Javasctipt action executed when clicking on this link</param>
    </member>
    <member name="M:LamestWebserver.UI.HLink.#ctor(System.String,LamestWebserver.UI.HElement[])">
      <summary>
            Creates a new Link Element
            </summary>
      <param name="href">The URL this link points to</param>
      <param name="elements">The Elements inside the Link</param>
    </member>
    <member name="M:LamestWebserver.UI.HLink.GetTagHead(System.String)">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.UI.HImage">
      <summary>
            A img element representing an image in html
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.HImage.DescriptionTags">
      <summary>
            Additional attributes added to this tag
            </summary>
    </member>
    <member name="M:LamestWebserver.UI.HImage.#ctor(System.String)">
      <summary>
            Creates an Image
            </summary>
      <param name="source">the URL where the image is located at</param>
    </member>
    <member name="M:LamestWebserver.UI.HImage.GetContent(LamestWebserver.SessionData)">
      <summary>
            This Method parses the current element to string
            </summary>
      <param name="sessionData">the current ISessionIdentificator</param>
      <returns>the element as string</returns>
    </member>
    <member name="T:LamestWebserver.UI.HText">
      <summary>
            A "p" tag, representing a textblock
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.HText.DescriptionTags">
      <summary>
            Additional attributes to add to this HTML-Tag
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.HText.Text">
      <summary>
            The text to display
            </summary>
    </member>
    <member name="M:LamestWebserver.UI.HText.#ctor(System.String)">
      <summary>
            Constructs a TextBlock
            </summary>
      <param name="text">the Text displayed</param>
    </member>
    <member name="M:LamestWebserver.UI.HText.GetContent(LamestWebserver.SessionData)">
      <summary>
            This Method parses the current element to string
            </summary>
      <param name="sessionData">the current ISessionIdentificator</param>
      <returns>the element as string</returns>
    </member>
    <member name="T:LamestWebserver.UI.HTextBlock">
      <summary>
            A "p" tag, representing a textblock. You can add HTexts seamlessly to an HTextBlock - only the text inside will be displayed
            </summary>
    </member>
    <member name="M:LamestWebserver.UI.HTextBlock.#ctor(System.String)">
      <summary>
            Constructs a TextBlock
            </summary>
      <param name="text">the Text displayed</param>
    </member>
    <member name="M:LamestWebserver.UI.HTextBlock.#ctor(System.Object[])">
      <summary>
            Constructs a new TextBlock
            </summary>
      <param name="texts">will be a HText if string, will be itself if HElement, else will be HText of .ToString() text</param>
    </member>
    <member name="T:LamestWebserver.UI.HBold">
      <summary>
            A "b" tag, representing bold text
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.HBold.Text">
      <summary>
            The Text to display
            </summary>
    </member>
    <member name="M:LamestWebserver.UI.HBold.#ctor(System.String)">
      <summary>
            Constructs a new HBold
            </summary>
      <param name="text">the text</param>
    </member>
    <member name="M:LamestWebserver.UI.HBold.GetContent(LamestWebserver.SessionData)">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.UI.HItalic">
      <summary>
            A "i" tag, representing italic text
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.HItalic.Text">
      <summary>
            The Text to display
            </summary>
    </member>
    <member name="M:LamestWebserver.UI.HItalic.#ctor(System.String)">
      <summary>
            Constructs a new HItalic
            </summary>
      <param name="text">the text</param>
    </member>
    <member name="M:LamestWebserver.UI.HItalic.GetContent(LamestWebserver.SessionData)">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.UI.HCrossedOut">
      <summary>
            A "del" tag, representing crossed out text
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.HCrossedOut.Text">
      <summary>
            The Text to display
            </summary>
    </member>
    <member name="M:LamestWebserver.UI.HCrossedOut.#ctor(System.String)">
      <summary>
            Constructs a new HBold
            </summary>
      <param name="text">the text</param>
    </member>
    <member name="M:LamestWebserver.UI.HCrossedOut.GetContent(LamestWebserver.SessionData)">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.UI.HUnderlined">
      <summary>
            A "u" tag, representing underlined out text
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.HUnderlined.Text">
      <summary>
            The Text to display
            </summary>
    </member>
    <member name="M:LamestWebserver.UI.HUnderlined.#ctor(System.String)">
      <summary>
            Constructs a new HBold
            </summary>
      <param name="text">the text</param>
    </member>
    <member name="M:LamestWebserver.UI.HUnderlined.GetContent(LamestWebserver.SessionData)">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.UI.HHeadline">
      <summary>
            A h(1-6) tag in html (h1 by default) representing a Headline
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.HHeadline.Text">
      <summary>
            The Text displayed in this Headline
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.HHeadline.DescriptionTags">
      <summary>
            Additional attributes added to this element
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.HHeadline._level">
      <summary>
            The level of this headline (1-6)
            </summary>
    </member>
    <member name="M:LamestWebserver.UI.HHeadline.#ctor(System.String,System.Int32)">
      <summary>
            Constructs a new Headline
            </summary>
      <param name="text">the text of this headline</param>
      <param name="level">the level of this headline</param>
    </member>
    <member name="M:LamestWebserver.UI.HHeadline.GetContent(LamestWebserver.SessionData)">
      <summary>
            This Method parses the current element to string
            </summary>
      <param name="sessionData">the current ISessionIdentificator</param>
      <returns>the element as string</returns>
    </member>
    <member name="T:LamestWebserver.UI.HInput">
      <summary>
            A input tag representing all kinds of Input Elements
            </summary>
    </member>
    <member name="T:LamestWebserver.UI.HInput.EInputType">
      <summary>
            Contains all kinds of valid HTML Input Elements
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.HInput.EInputType.button">
      <summary>
            A button
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.HInput.EInputType.checkbox">
      <summary>
            A checkbox
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.HInput.EInputType.color">
      <summary>
            A ColorPicker
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.HInput.EInputType.date">
      <summary>
            A Date Input
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.HInput.EInputType.datetime">
      <summary>
            A date and time input
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.HInput.EInputType.datetime_local">
      <summary>
            A date and time input for local time
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.HInput.EInputType.email">
      <summary>
            An Email Input
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.HInput.EInputType.file">
      <summary>
            A file selector
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.HInput.EInputType.hidden">
      <summary>
            A hidden name-value-pair
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.HInput.EInputType.image">
      <summary>
            An image
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.HInput.EInputType.month">
      <summary>
            A month selector
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.HInput.EInputType.number">
      <summary>
            A numeric input
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.HInput.EInputType.password">
      <summary>
            a password input (not displaying the contents entered as text)
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.HInput.EInputType.radio">
      <summary>
            A radio button
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.HInput.EInputType.range">
      <summary>
            An input for values within a given range
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.HInput.EInputType.reset">
      <summary>
            A reset button
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.HInput.EInputType.search">
      <summary>
            A search element
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.HInput.EInputType.submit">
      <summary>
            A submit button
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.HInput.EInputType.tel">
      <summary>
            A tel input
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.HInput.EInputType.text">
      <summary>
            A single line textfield (use HTextArea or JSTextArea for multiline Textfields)
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.HInput.EInputType.time">
      <summary>
            A Time input
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.HInput.EInputType.url">
      <summary>
            A url input
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.HInput.EInputType.week">
      <summary>
            A week input
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.HInput.InputType">
      <summary>
            The Type of the input element
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.HInput.Value">
      <summary>
            The Value of the input element
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.HInput.DescriptionTags">
      <summary>
            Additional attributes added to the tag
            </summary>
    </member>
    <member name="M:LamestWebserver.UI.HInput.#ctor(LamestWebserver.UI.HInput.EInputType,System.String,System.String)">
      <summary>
            Constructs a new Input Element
            </summary>
      <param name="inputType">the type of the input element</param>
      <param name="name">the Name of the HTML element</param>
      <param name="value">the predefined value of this input element</param>
    </member>
    <member name="M:LamestWebserver.UI.HInput.GetContent(LamestWebserver.SessionData)">
      <summary>
            This Method parses the current element to string
            </summary>
      <param name="sessionData">the current ISessionIdentificator</param>
      <returns>the element as string</returns>
    </member>
    <member name="T:LamestWebserver.UI.HSingleSelector">
      <summary>
            A list of radio-buttons of which only one can be selected at a time.
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.HSingleSelector.DescriptionTags">
      <summary>
            Additional attributes to be added to the items
            </summary>
    </member>
    <member name="M:LamestWebserver.UI.HSingleSelector.#ctor(System.String,System.Collections.Generic.List{System.Tuple{System.String,System.String}},System.Int32,System.Boolean)">
      <summary>
            Constructs a new HSingleSelector
            </summary>
      <param name="name">the name of the resulting value</param>
      <param name="nameValuePairs">a list of tuples of the selectableItems and their representative value</param>
      <param name="selectedIndex">the selected value of the radioButtons</param>
      <param name="newLineAfterSelection">shall there be a line after each option?</param>
    </member>
    <member name="M:LamestWebserver.UI.HSingleSelector.GetContent(LamestWebserver.SessionData)">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.UI.HTextInput">
      <summary>
            A Text input field.
            </summary>
    </member>
    <member name="M:LamestWebserver.UI.HTextInput.#ctor(System.String,System.String,System.String)">
      <inheritdoc />
      <param name="name">the name of the submitted value</param>
      <param name="value">the default value</param>
      <param name="placeholderText">the placeholder to display when no text has been entered.</param>
    </member>
    <member name="M:LamestWebserver.UI.HTextInput.GetContent(LamestWebserver.SessionData)">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.UI.HPasswordInput">
      <summary>
            A Password-Text input field.
            </summary>
    </member>
    <member name="M:LamestWebserver.UI.HPasswordInput.#ctor(System.String,System.String)">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.UI.HRadioButton">
      <summary>
            A simple Radiobutton.
            </summary>
    </member>
    <member name="M:LamestWebserver.UI.HRadioButton.#ctor(System.String,System.String,System.String,System.Boolean)">
      <summary>
            Constructs a new HRadioButton.
            </summary>
      <param name="name">the name of the retrived value</param>
      <param name="value">the value to retrive</param>
      <param name="text">the displayed text (or null if none)</param>
      <param name="_checked">is it checked by default?</param>
    </member>
    <member name="M:LamestWebserver.UI.HRadioButton.GetContent(LamestWebserver.SessionData)">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.UI.HCheckBox">
      <summary>
            A simple checkbox.
            </summary>
    </member>
    <member name="M:LamestWebserver.UI.HCheckBox.#ctor(System.String,System.String,System.String,System.Boolean)">
      <summary>
            Constructs a new HCheckbox.
            </summary>
      <param name="name">the name of the retrived value</param>
      <param name="value">the value to retrive</param>
      <param name="text">the displayed text (or null if none)</param>
      <param name="_checked">is it checked by default?</param>
    </member>
    <member name="T:LamestWebserver.UI.HContainer">
      <summary>
            A div element representing a container
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.HContainer.Elements">
      <summary>
            A list of all contained elements
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.HContainer.Text">
      <summary>
            The text contained in this element
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.HContainer.DescriptionTags">
      <summary>
            Additional attributes added to the tag
            </summary>
    </member>
    <member name="M:LamestWebserver.UI.HContainer.#ctor(System.String)">
      <summary>
            Sets the HTML Tag.
            </summary>
      <param name="tag">the HTML Tag of this element.</param>
    </member>
    <member name="M:LamestWebserver.UI.HContainer.#ctor(LamestWebserver.UI.HElement[])">
      <summary>
            Adds all listed objects into the container.
            </summary>
      <param name="elements">the elements to add</param>
    </member>
    <member name="M:LamestWebserver.UI.HContainer.#ctor(System.Collections.Generic.IEnumerable{LamestWebserver.UI.HElement})">
      <summary>
            Adds all listed objects into the container.
            </summary>
      <param name="elements">the elements to add</param>
    </member>
    <member name="M:LamestWebserver.UI.HContainer.#ctor(System.String,LamestWebserver.UI.HElement[])">
      <summary>
            Adds all listed objects into the container.
            </summary>
      <param name="tag">the html tag of this element.</param>
      <param name="elements">the elements to add</param>
    </member>
    <member name="M:LamestWebserver.UI.HContainer.AddElement(LamestWebserver.UI.HElement)">
      <summary>
            Adds an element to the element list
            </summary>
      <param name="element">the element</param>
    </member>
    <member name="M:LamestWebserver.UI.HContainer.GetTagHead(System.String)">
      <summary>
            Retrieves the Tag Head for the corresponding HTML element.
            </summary>
      <param name="additionalParams">additional things to add to the head.</param>
      <returns>Returns the Tag Head as string.</returns>
    </member>
    <member name="M:LamestWebserver.UI.HContainer.GetContent(LamestWebserver.SessionData)">
      <summary>
            This Method parses the current element to string
            </summary>
      <param name="sessionData">the current ISessionIdentificator</param>
      <returns>the element as string</returns>
    </member>
    <member name="M:LamestWebserver.UI.HContainer.AddElements(System.Collections.Generic.IEnumerable{LamestWebserver.UI.HElement})">
      <summary>
            Adds a bunch of elements to the element list
            </summary>
      <param name="list">a list of elements</param>
    </member>
    <member name="M:LamestWebserver.UI.HContainer.AddElements(LamestWebserver.UI.HElement[])">
      <summary>
            adds a bunch of elements to the elementlist
            </summary>
      <param name="list">a few elements</param>
    </member>
    <member name="M:LamestWebserver.UI.HContainer.GetCachedContents(System.String,LamestWebserver.Caching.ECachingType,System.Text.StringBuilder)">
      <summary>
            Retrieves cached contents for nested elements.
            </summary>
      <paramref name="key">The cache key of the container.</paramref>
      <paramref name="defaultCachingType">The default CachingType to refer to.</paramref>
      <paramref name="response">The StringBuilder to attatch the response to.</paramref>
    </member>
    <member name="M:LamestWebserver.UI.HContainer.IsStaticResponse(System.String,LamestWebserver.Caching.ECachingType,System.Text.StringBuilder)">
      <inheritdoc />
    </member>
    <member name="P:LamestWebserver.UI.HContainer.Tag">
      <summary>
            The HTML Tag of this Element.
            </summary>
    </member>
    <member name="T:LamestWebserver.UI.HInlineContainer">
      <summary>
            A container for inline elements - represented by a span-HTML tag
            </summary>
    </member>
    <member name="M:LamestWebserver.UI.HInlineContainer.#ctor(LamestWebserver.UI.HElement[])">
      <summary>
            Constructs a new inline container containing the given elements.
            </summary>
      <param name="elements">the contained elements</param>
    </member>
    <member name="T:LamestWebserver.UI.HQuote">
      <summary>
            A 'blockquote' tag - representing a quote.
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.HQuote.Source">
      <summary>
            The source of the Quote
            </summary>
    </member>
    <member name="M:LamestWebserver.UI.HQuote.#ctor(System.String,System.String,LamestWebserver.UI.HElement[])">
      <summary>
            Creates a new HQuote object
            </summary>
      <param name="text">the quoted text</param>
      <param name="source">the source of the quote</param>
      <param name="elements">the contained elements</param>
    </member>
    <member name="M:LamestWebserver.UI.HQuote.GetTagHead(System.String)">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.UI.HForm">
      <summary>
            A form element used for sending contents via POST to the server
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.HForm.Action">
      <summary>
            The URL which will be called when submitting this form
            </summary>
    </member>
    <member name="M:LamestWebserver.UI.HForm.#ctor(System.String)">
      <summary>
            Constructs a new Form pointing to the given action when submitted
            </summary>
      <param name="action">the URL to load when submitted</param>
    </member>
    <member name="M:LamestWebserver.UI.HForm.#ctor(System.String,System.String,System.Func{LamestWebserver.SessionData,System.Boolean})">
      <summary>
            redirects if the conditional code returns true and executes other code if the conditional code returns false
            </summary>
      <param name="redirectURLifTRUE">the url to redirect to if the conditionalCode returns true</param>
      <param name="redirectURLifFALSE">the url to redirect to if the conditionalCode returns false</param>
      <param name="conditionalCode">the conditional code</param>
    </member>
    <member name="M:LamestWebserver.UI.HForm.#ctor(System.String,System.Boolean,System.String,System.Tuple{System.String,System.String}[])">
      <summary>
            creates a form containing a few values which are added to elements. It can also contain a submit button.
            </summary>
      <param name="action">the URL to load when submitted</param>
      <param name="addSubmitButton">shall there be a submit button?</param>
      <param name="buttontext">if yes: what should the text on the submit button say?</param>
      <param name="values">additional values to set in the form as invisible parameters</param>
    </member>
    <member name="M:LamestWebserver.UI.HForm.GetTagHead(System.String)">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.UI.HPanel">
      <summary>
            A 'fieldset' tag - a panel contining multiple inputs / elements
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.HPanel.Legend">
      <summary>
            The title of the panel.
            </summary>
    </member>
    <member name="M:LamestWebserver.UI.HPanel.#ctor(System.String,LamestWebserver.UI.HElement[])">
      <summary>
            Creates a new HFieldSet object
            <param name="legend">the displayed name of the panel</param><param name="elements">the contained elements</param></summary>
    </member>
    <member name="M:LamestWebserver.UI.HPanel.GetTagHead(System.String)">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.UI.HButton">
      <summary>
            A button tag representing a button
            </summary>
    </member>
    <member name="T:LamestWebserver.UI.HButton.EButtonType">
      <summary>
            The type of a button
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.HButton.EButtonType.button">
      <summary>
            A button which is only a button
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.HButton.EButtonType.reset">
      <summary>
            A button which resets the form it lives in
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.HButton.EButtonType.submit">
      <summary>
            A button which submits the form it lives in
            </summary>
    </member>
    <member name="M:LamestWebserver.UI.HButton.#ctor(System.String,LamestWebserver.UI.HButton.EButtonType,System.String,System.String)">
      <summary>
            Creates a button. SUBMIT BUTTONS SHOULDN'T HAVE A HREF!
            </summary>
      <param name="text">the text of the button.</param>
      <param name="type">the button type according to http standards.</param>
      <param name="href">the destination of this button. SUBMIT BUTTONS SHOULDN'T HAVE A HREF!</param>
      <param name="onclick">
      </param>
    </member>
    <member name="M:LamestWebserver.UI.HButton.#ctor(System.String,System.String,System.String)">
      <summary>
            Creates a button.
            </summary>
      <param name="text">the text of the button.</param>
      <param name="href">the destination of this button. SUBMIT BUTTONS SHOULDN'T HAVE A HREF!</param>
      <param name="onclick">the executed javascript-code on clicking the button.</param>
    </member>
    <member name="M:LamestWebserver.UI.HButton.GetTagHead(System.String)">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.UI.HDropDownMenu">
      <summary>
            a select element representing a DropDownMenu
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.HDropDownMenu.DescriptionTags">
      <summary>
            Additional attributes added to the tag
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.HDropDownMenu.Size">
      <summary>
            The amount of entries displayed if not expanded
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.HDropDownMenu.MultipleSelectable">
      <summary>
            does the dropdownmenu allow multiple selections?
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.HDropDownMenu.Disabled">
      <summary>
            is the dropdownmenu disabled for the user?
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.HDropDownMenu.SelectedIndexes">
      <summary>
            the selectedIndexes
            </summary>
    </member>
    <member name="M:LamestWebserver.UI.HDropDownMenu.#ctor(System.String,System.Int32,System.Boolean,System.Tuple{System.String,System.String}[])">
      <summary>
            Constructs a new DropDownMenu element
            </summary>
      <param name="name">the name of the element (for forms)</param>
      <param name="size">The amount of entries displayed if not expanded</param>
      <param name="multipleSelectable">does the dropdownmenu allow multiple selections?</param>
      <param name="textValuePairsToDisplay">All possibly selectable items as a tuple (Text displayed for the user, Value presented to form)</param>
    </member>
    <member name="M:LamestWebserver.UI.HDropDownMenu.#ctor(System.String,System.Tuple{System.String,System.String}[])">
      <summary>
            Constructs a new DropDownMenu element
            </summary>
      <param name="name">the name of the element (for forms)</param>
      <param name="textValuePairsToDisplay">All possibly selectable items as a tuple (Text displayed for the user, Value presented to form)</param>
    </member>
    <member name="M:LamestWebserver.UI.HDropDownMenu.SelectByValue(System.String)">
      <summary>
            Selects an item based on the value given to it.
            Unselects everything else if !multipleSelectable.
            DOES NOT THROW AN EXCEPTION IF NO MATCHING INDEX HAS BEEN FOUND!
            </summary>
      <param name="value">the value to look for</param>
      <returns>this element for inline use.</returns>
    </member>
    <member name="M:LamestWebserver.UI.HDropDownMenu.SelectByText(System.String)">
      <summary>
            Selects an item based on the text given to it.
            Unselects everything else if !multipleSelectable.
            DOES NOT THROW AN EXCEPTION IF NO MATCHING INDEX HAS BEEN FOUND!
            </summary>
      <param name="text">the text to look for</param>
      <returns>this element for inline use.</returns>
    </member>
    <member name="M:LamestWebserver.UI.HDropDownMenu.GetContent(LamestWebserver.SessionData)">
      <summary>
            This Method parses the current element to string
            </summary>
      <param name="sessionData">the current ISessionIdentificator</param>
      <returns>the element as string</returns>
    </member>
    <member name="T:LamestWebserver.UI.HList">
      <summary>
            A ol or ul tag representing an ordered or unordered list
            </summary>
    </member>
    <member name="T:LamestWebserver.UI.HList.EListType">
      <summary>
            The type of the list
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.HList.EListType.OrderedList">
      <summary>
            A numerically ordered list
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.HList.EListType.UnorderedList">
      <summary>
            A unordered list
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.HList.SetListStyleToElements">
      <summary>
            If true adds "display: list-item;" at the start of every subitem Style property.
            </summary>
    </member>
    <member name="M:LamestWebserver.UI.HList.#ctor(LamestWebserver.UI.HList.EListType)">
      <summary>
            Constructs a new List Element
            </summary>
      <param name="listType">the type of the list</param>
    </member>
    <member name="M:LamestWebserver.UI.HList.#ctor(LamestWebserver.UI.HList.EListType,System.Object[])">
      <summary>
            Constructs a new List Element
            </summary>
      <param name="listType">the type of the list</param>
      <param name="elements">the contents of the list</param>
    </member>
    <member name="M:LamestWebserver.UI.HList.#ctor(LamestWebserver.UI.HList.EListType,System.Collections.Generic.IEnumerable{System.Object})">
      <summary>
            Constructs a new List Element
            </summary>
      <param name="listType">the type of the list</param>
      <param name="elements">the contents of the list</param>
    </member>
    <member name="M:LamestWebserver.UI.HList.GetTagHead(System.String)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.UI.HList.IsEmpty">
      <summary>
            Returns true if there are no elements in this List.
            </summary>
      <returns>Returns true if there are no elements in this List.</returns>
    </member>
    <member name="T:LamestWebserver.UI.HTable">
      <summary>
            A table Element representing a table
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.HTable.TableHeader">
      <summary>
            The table header displayed on top of the table rows.
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.HTable.DescriptionTags">
      <summary>
            Additional attributes to be added to this node
            </summary>
    </member>
    <member name="M:LamestWebserver.UI.HTable.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Object}})">
      <summary>
            Constructs a new Table containing the given elements
            </summary>
      <param name="elements">the contained elements</param>
    </member>
    <member name="M:LamestWebserver.UI.HTable.#ctor(System.Collections.Generic.IEnumerable{System.Object}[])">
      <summary>
            Constructs a new Table containing the given data
            </summary>
      <param name="data">the contents of this table</param>
    </member>
    <member name="M:LamestWebserver.UI.HTable.GetContent(LamestWebserver.SessionData)">
      <summary>
            This Method parses the current element to string
            </summary>
      <param name="sessionData">the current ISessionIdentificator</param>
      <returns>the element as string</returns>
    </member>
    <member name="T:LamestWebserver.UI.HTag">
      <summary>
            Represents a custom tag
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.HTag.HasContent">
      <summary>
            if false, the element won't have a start and end tag but will only consist of a single tag (like img)
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.HTag.TagName">
      <summary>
            the name of the tag
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.HTag.Elements">
      <summary>
            A list of all contained elements
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.HTag.Text">
      <summary>
            The text contained in this element
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.HTag.DescriptionTags">
      <summary>
            Additional attributes added to the tag
            </summary>
    </member>
    <member name="M:LamestWebserver.UI.HTag.AddElement(LamestWebserver.UI.HElement)">
      <summary>
            Adds an element to the element list
            </summary>
      <param name="element">the element</param>
    </member>
    <member name="M:LamestWebserver.UI.HTag.#ctor(System.String,System.String,System.Boolean,System.String)">
      <summary>
            Constructs a new custom tag
            </summary>
      <param name="tagName">the name of the custom tag</param>
      <param name="descriptionTags">Additional attributs</param>
      <param name="hasContent">if false, the element won't have a start and end tag but will only consist of a single tag (like img)</param>
      <param name="text">the contatined text in this element</param>
    </member>
    <member name="M:LamestWebserver.UI.HTag.#ctor(System.String,System.String,System.String)">
      <summary>
            Constructs a new custom tag
            </summary>
      <param name="tagName">the name of the custom tag</param>
      <param name="descriptionTags">Additional attributes</param>
      <param name="text">the contatined text in this element (or null if no content)</param>
    </member>
    <member name="M:LamestWebserver.UI.HTag.GetContent(LamestWebserver.SessionData)">
      <summary>
            This Method parses the current element to string
            </summary>
      <param name="sessionData">the current ISessionIdentificator</param>
      <returns>the element as string</returns>
    </member>
    <member name="T:LamestWebserver.UI.HScript">
      <summary>
            A script element representing embedded JavaScript-Code
            </summary>
    </member>
    <member name="M:LamestWebserver.UI.HScript.#ctor(System.String)">
      <summary>
            generates a static script (not the ones that need ISessionIdentificator or the SSID)
            </summary>
    </member>
    <member name="M:LamestWebserver.UI.HScript.#ctor(LamestWebserver.UI.ScriptCollection.ScriptFuction,System.Object[])">
      <summary>
            generates a runtime defined script (like the ones, that need ISessionIdentificator or the SSID)
            </summary>
    </member>
    <member name="M:LamestWebserver.UI.HScript.GetContent(LamestWebserver.SessionData)">
      <summary>
            This Method parses the current element to string
            </summary>
      <param name="sessionData">the current ISessionIdentificator</param>
      <returns>the element as string</returns>
    </member>
    <member name="T:LamestWebserver.UI.HScriptLink">
      <summary>
            Represents a script element pointing to a script-file which has to be loaded as well
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.HScriptLink.URL">
      <summary>
            The URL of the script file
            </summary>
    </member>
    <member name="M:LamestWebserver.UI.HScriptLink.#ctor(System.String)">
      <summary>
            Constructs a new linking Script element
            </summary>
      <param name="URL">the url of the script to load</param>
    </member>
    <member name="M:LamestWebserver.UI.HScriptLink.GetContent(LamestWebserver.SessionData)">
      <summary>
            This Method parses the current element to string
            </summary>
      <param name="sessionData">the current ISessionIdentificator</param>
      <returns>the element as string</returns>
    </member>
    <member name="T:LamestWebserver.UI.HCanvas">
      <summary>
            A canvas element used for complex rendering
            </summary>
    </member>
    <member name="M:LamestWebserver.UI.HCanvas.GetContent(LamestWebserver.SessionData)">
      <summary>
            This Method parses the current element to string
            </summary>
      <param name="sessionData">the current ISessionIdentificator</param>
      <returns>the element as string</returns>
    </member>
    <member name="T:LamestWebserver.UI.HTextArea">
      <summary>
            A textarea element - basically a multiline textbox
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.HTextArea.Cols">
      <summary>
            The amount columns dispalyed
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.HTextArea.Rows">
      <summary>
            The amount rows dispalyed
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.HTextArea.Value">
      <summary>
            The predefined value
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.HTextArea.DescriptionTags">
      <summary>
            Additional attributes added to this tag
            </summary>
    </member>
    <member name="M:LamestWebserver.UI.HTextArea.#ctor(System.String,System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
      <summary>
            Constructs a new textarea element
            </summary>
      <param name="value">the default value of this textarea</param>
      <param name="cols">the amount of columns displayed</param>
      <param name="rows">the amount of rows displayed</param>
    </member>
    <member name="M:LamestWebserver.UI.HTextArea.GetContent(LamestWebserver.SessionData)">
      <summary>
            This Method parses the current element to string
            </summary>
      <param name="sessionData">the current ISessionIdentificator</param>
      <returns>the element as string</returns>
    </member>
    <member name="T:LamestWebserver.UI.HIframe">
      <summary>
            A "p" tag, representing a textblock
            </summary>
    </member>
    <member name="T:LamestWebserver.UI.HIframe.SandboxMode">
      <summary>
            Represents the HTML5 Sandbox attributes to an iframe.
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.HIframe.DescriptionTags">
      <summary>
            Additional attributes to add to this HTML-Tag
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.HIframe.Source">
      <summary>
            The source to display
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.HIframe.SourceHtml">
      <summary>
            The HTML-Content to display
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.HIframe.SandboxAttribute">
      <summary>
            The HTML5 sandbox attribute for iframes. null if nonexistent. SandboxMode.enabled no specific attribute.
            </summary>
    </member>
    <member name="M:LamestWebserver.UI.HIframe.#ctor(System.String)">
      <summary>
            Constructs a TextBlock
            </summary>
      <param name="text">the Text displayed</param>
    </member>
    <member name="M:LamestWebserver.UI.HIframe.GetContent(LamestWebserver.SessionData)">
      <summary>
            This Method parses the current element to string
            </summary>
      <param name="sessionData">the current ISessionIdentificator</param>
      <returns>the element as string</returns>
    </member>
    <member name="T:LamestWebserver.UI.HRuntimeCode">
      <summary>
            Non-static content, which is computed every request
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.HRuntimeCode.RuntimeCode">
      <summary>
            the code to execute
            </summary>
    </member>
    <member name="M:LamestWebserver.UI.HRuntimeCode.#ctor(System.Func{LamestWebserver.SessionData,System.String})">
      <summary>
            Creates non-static content, which is computed every request
            </summary>
      <param name="runtimeCode">The code to execute every request</param>
    </member>
    <member name="M:LamestWebserver.UI.HRuntimeCode.GetContent(LamestWebserver.SessionData)">
      <summary>
            This Method parses the current element to string
            </summary>
      <param name="sessionData">the current ISessionIdentificator</param>
      <returns>the element as string</returns>
    </member>
    <member name="M:LamestWebserver.UI.HRuntimeCode.GetConditionalRuntimeCode(System.Func{LamestWebserver.SessionData,System.String},System.Func{LamestWebserver.SessionData,System.String},System.Func{LamestWebserver.SessionData,System.Boolean})">
      <summary>
            returns a conditional non-static piece of code, which is computed every request if conditionalCode returns true, codeIfTRUE is executed, if it returns false, codeIfFALSE is executed
            </summary>
      <param name="codeIfTRUE">The code to execute if conditionalCode returns TRUE</param>
      <param name="codeIfFALSE">The code to execute if conditionalCode returns FALSE</param>
      <param name="conditionalCode">The Conditional code</param>
      <returns>returns a HRuntimeCode : HElement</returns>
    </member>
    <member name="M:LamestWebserver.UI.HRuntimeCode.GetConditionalRuntimeCode(LamestWebserver.UI.HElement,LamestWebserver.UI.HElement,System.Func{LamestWebserver.SessionData,System.Boolean})">
      <summary>
            returns a conditional non-static HElement, which is computed every request if conditionalCode returns true, elementIfTRUE is returned, if it returns false, elementIfFALSE is returned
            </summary>
      <param name="elementIfTRUE">
      </param>
      <param name="elementIfFALSE">
      </param>
      <param name="conditionalCode">The Conditional code</param>
      <returns>returns a HRuntimeCode : HElement</returns>
    </member>
    <member name="T:LamestWebserver.UI.HSyncronizedRuntimeCode">
      <summary>
            Non-static content, which is computed every request AND SYNCRONIZED
            </summary>
    </member>
    <member name="F:LamestWebserver.UI.HSyncronizedRuntimeCode.runtimeCode">
      <summary>
            the code to execute
            </summary>
    </member>
    <member name="M:LamestWebserver.UI.HSyncronizedRuntimeCode.#ctor(System.Func{LamestWebserver.SessionData,System.String})">
      <summary>
            Creates non-static content, which is computed every request AND SYNCRONIZED
            </summary>
      <param name="runtimeCode">The code to execute every request</param>
    </member>
    <member name="M:LamestWebserver.UI.HSyncronizedRuntimeCode.GetContent(LamestWebserver.SessionData)">
      <summary>
            This Method parses the current element to string
            </summary>
      <param name="sessionData">the current ISessionIdentificator</param>
      <returns>the element as string</returns>
    </member>
    <member name="M:LamestWebserver.UI.HSyncronizedRuntimeCode.getConditionalRuntimeCode(System.Func{LamestWebserver.SessionData,System.String},System.Func{LamestWebserver.SessionData,System.String},System.Func{LamestWebserver.SessionData,System.Boolean})">
      <summary>
            returns a conditional non-static piece of code, which is computed every request if conditionalCode returns true, codeIfTRUE is executed, if it returns false, codeIfFALSE is executed AND SYNCRONIZED
            </summary>
      <param name="codeIfTRUE">The code to execute if conditionalCode returns TRUE</param>
      <param name="codeIfFALSE">The code to execute if conditionalCode returns FALSE</param>
      <param name="conditionalCode">The Conditional code</param>
      <returns>returns a HRuntimeCode : HElement</returns>
    </member>
    <member name="M:LamestWebserver.UI.HSyncronizedRuntimeCode.getConditionalRuntimeCode(LamestWebserver.UI.HElement,LamestWebserver.UI.HElement,System.Func{LamestWebserver.SessionData,System.Boolean})">
      <summary>
            returns a conditional non-static HElement, which is computed every request if conditionalCode returns true, elementIfTRUE is returned, if it returns false, elementIfFALSE is returned AND SYNCRONIZED
            </summary>
      <param name="elementIfTRUE">
      </param>
      <param name="elementIfFALSE">
      </param>
      <param name="conditionalCode">The Conditional code</param>
      <returns>returns a HRuntimeCode : HElement</returns>
    </member>
    <member name="T:LamestWebserver.UI.HCachePool">
      <summary>
            Provides functionality to dynamically cache HElements
            (if CachingType in HSelectivelyCacheableElement is set to ECachingType.Cacheable for all elements or subelements that should be cached).
            </summary>
    </member>
    <member name="M:LamestWebserver.UI.HCachePool.#ctor(LamestWebserver.UI.HElement,LamestWebserver.IURLIdentifyable,System.Int32)">
      <summary>
            Constructs a new HCachePool which provides functionality to cache contained HElements easily
            (if CachingType in HSelectivelyCacheableElement is set to ECachingType.Cacheable for all elements or subelements that should be cached).
            </summary>
      <param name="containedElement">The contained Element to dynamically cache.</param>
      <param name="currentResponse">The current Page.</param>
      <param name="cachePoolIndex">The index of this HCachePool on this page (if you have multiple HCachePools on the same page).</param>
    </member>
    <member name="M:LamestWebserver.UI.HCachePool.GetContent(LamestWebserver.SessionData)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.UI.HCachePool.IsStaticResponse(System.String,LamestWebserver.Caching.ECachingType,System.Text.StringBuilder)">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.UI.ScriptCollection">
      <summary>
            Contains some default JavaScript functions.
            </summary>
    </member>
    <member name="T:LamestWebserver.UI.ScriptCollection.ScriptFuction">
      <summary>
            A prototype for a script-function code piece.
            </summary>
      <param name="sessionData">the current sessionData</param>
      <param name="arguments">the arguments</param>
    </member>
    <member name="M:LamestWebserver.UI.ScriptCollection.GetPageReloadWithFullPostInMilliseconds(LamestWebserver.SessionData,System.Object[])">
      <summary>
            Reloads the current page in X milliseconds redirecting all HTTP-POST values to the new page. parameters: { int milliseconds }
            </summary>
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.UI.ScriptCollection.GetPageReloadInMilliseconds(LamestWebserver.SessionData,System.Object[])">
      <summary>
            Reloads the current page in X milliseconds. parameters: { int milliseconds }
            </summary>
      <param name="sessionData">the current sessionData</param>
      <param name="arguments">the arguments</param>
    </member>
    <member name="M:LamestWebserver.UI.ScriptCollection.GetPageReferalToXInMilliseconds(LamestWebserver.SessionData,System.Object[])">
      <summary>
            Redirects to the page X in Y milliseconds. parameters: { string newPageUrl, int milliseconds }
            </summary>
      <param name="sessionData">the current sessionData</param>
      <param name="arguments">the arguments</param>
    </member>
    <member name="M:LamestWebserver.UI.ScriptCollection.GetPageReferalToX(LamestWebserver.SessionData,System.Object[])">
      <summary>
            Redirects to the page X . parameters: { string newPageUrl }
            </summary>
      <param name="sessionData">the current sessionData</param>
      <param name="arguments">the arguments</param>
    </member>
    <member name="M:LamestWebserver.UI.ScriptCollection.GetPageReferalWithFullPostInMilliseconds(LamestWebserver.SessionData,System.Object[])">
      <summary>
            Redirects to the page X in Y milliseconds redirecting all HTTP-POST values to the new page. parameters: { string newPageUrl, int milliseconds }
            </summary>
      <param name="sessionData">the current sessionData</param>
      <param name="arguments">the arguments</param>
    </member>
    <member name="T:LamestWebserver.UI.CachedByDefault.CPageBuilder">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.UI.CachedByDefault.CPageBuilder.#ctor(System.String,System.String)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.UI.CachedByDefault.CPageBuilder.#ctor(System.String,System.String,System.String,System.Func{LamestWebserver.SessionData,System.Boolean})">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.UI.CachedByDefault.CPageBuilder.#ctor(System.String)">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.UI.CachedByDefault.CLine">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.UI.CachedByDefault.CLine.#ctor">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.UI.CachedByDefault.CPlainText">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.UI.CachedByDefault.CPlainText.#ctor(System.String)">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.UI.CachedByDefault.CString">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.UI.CachedByDefault.CString.#ctor(System.String)">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.UI.CachedByDefault.CLink">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.UI.CachedByDefault.CLink.#ctor(System.String,System.String,System.String)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.UI.CachedByDefault.CLink.#ctor(LamestWebserver.UI.HElement,System.String,System.String)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.UI.CachedByDefault.CLink.#ctor(System.String,LamestWebserver.UI.HElement[])">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.UI.CachedByDefault.CImage">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.UI.CachedByDefault.CImage.#ctor(System.String)">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.UI.CachedByDefault.CText">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.UI.CachedByDefault.CText.#ctor(System.String)">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.UI.CachedByDefault.CTextBlock">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.UI.CachedByDefault.CTextBlock.#ctor(System.String)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.UI.CachedByDefault.CTextBlock.#ctor(System.Object[])">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.UI.CachedByDefault.CBold">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.UI.CachedByDefault.CBold.#ctor(System.String)">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.UI.CachedByDefault.CItalic">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.UI.CachedByDefault.CItalic.#ctor(System.String)">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.UI.CachedByDefault.CCrossedOut">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.UI.CachedByDefault.CCrossedOut.#ctor(System.String)">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.UI.CachedByDefault.CUnderlined">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.UI.CachedByDefault.CUnderlined.#ctor(System.String)">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.UI.CachedByDefault.CHeadline">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.UI.CachedByDefault.CHeadline.#ctor(System.String,System.Int32)">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.UI.CachedByDefault.CInput">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.UI.CachedByDefault.CInput.#ctor(LamestWebserver.UI.HInput.EInputType,System.String,System.String)">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.UI.CachedByDefault.CSingleSelector">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.UI.CachedByDefault.CSingleSelector.#ctor(System.String,System.Collections.Generic.List{System.Tuple{System.String,System.String}},System.Int32,System.Boolean)">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.UI.CachedByDefault.CTextInput">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.UI.CachedByDefault.CTextInput.#ctor(System.String,System.String,System.String)">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.UI.CachedByDefault.CPasswordInput">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.UI.CachedByDefault.CPasswordInput.#ctor(System.String,System.String)">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.UI.CachedByDefault.CRadioButton">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.UI.CachedByDefault.CRadioButton.#ctor(System.String,System.String,System.String,System.Boolean)">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.UI.CachedByDefault.CCheckBox">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.UI.CachedByDefault.CCheckBox.#ctor(System.String,System.String,System.String,System.Boolean)">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.UI.CachedByDefault.CContainer">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.UI.CachedByDefault.CContainer.#ctor(LamestWebserver.UI.HElement[])">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.UI.CachedByDefault.CContainer.#ctor(System.Collections.Generic.IEnumerable{LamestWebserver.UI.HElement})">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.UI.CachedByDefault.CInlineContainer">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.UI.CachedByDefault.CInlineContainer.#ctor(LamestWebserver.UI.HElement[])">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.UI.CachedByDefault.CQuote">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.UI.CachedByDefault.CQuote.#ctor(System.String,System.String,LamestWebserver.UI.HElement[])">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.UI.CachedByDefault.CForm">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.UI.CachedByDefault.CForm.#ctor(System.String)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.UI.CachedByDefault.CForm.#ctor(System.String,System.Boolean,System.String,System.Tuple{System.String,System.String}[])">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.UI.CachedByDefault.CPanel">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.UI.CachedByDefault.CPanel.#ctor(System.String,LamestWebserver.UI.HElement[])">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.UI.CachedByDefault.CButton">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.UI.CachedByDefault.CButton.#ctor(System.String,LamestWebserver.UI.HButton.EButtonType,System.String,System.String)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.UI.CachedByDefault.CButton.#ctor(System.String,System.String,System.String)">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.UI.CachedByDefault.CDropDownMenu">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.UI.CachedByDefault.CDropDownMenu.#ctor(System.String,System.Int32,System.Boolean,System.Tuple{System.String,System.String}[])">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.UI.CachedByDefault.CDropDownMenu.#ctor(System.String,System.Tuple{System.String,System.String}[])">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.UI.CachedByDefault.CList">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.UI.CachedByDefault.CList.#ctor(LamestWebserver.UI.HList.EListType)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.UI.CachedByDefault.CList.#ctor(LamestWebserver.UI.HList.EListType,System.Object[])">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.UI.CachedByDefault.CList.#ctor(LamestWebserver.UI.HList.EListType,System.Collections.Generic.IEnumerable{System.Object})">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.UI.CachedByDefault.CTable">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.UI.CachedByDefault.CTable.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Object}})">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.UI.CachedByDefault.CTable.#ctor(System.Collections.Generic.IEnumerable{System.Object}[])">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.UI.CachedByDefault.CScript">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.UI.CachedByDefault.CScript.#ctor(System.String)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.UI.CachedByDefault.CScript.#ctor(LamestWebserver.UI.ScriptCollection.ScriptFuction,System.Object[])">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.UI.CachedByDefault.CScriptLink">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.UI.CachedByDefault.CScriptLink.#ctor(System.String)">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.UI.CachedByDefault.CCanvas">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.UI.CachedByDefault.CCanvas.#ctor">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.UI.CachedByDefault.CTextArea">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.UI.CachedByDefault.CTextArea.#ctor(System.String,System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.UI.CachedByDefault.CIframe">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.UI.CachedByDefault.CIframe.#ctor(System.String)">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.Synchronization.SynchronizedCollection`2">
      <summary>
            Provides synchronized access to an ICollection&lt;T&gt;.
            </summary>
      <typeparam name="T">The type of the Collection.</typeparam>
      <typeparam name="TCollectionType">The internal implementation of the Collection used.</typeparam>
    </member>
    <member name="M:LamestWebserver.Synchronization.SynchronizedCollection`2.#ctor">
      <summary>
            Constructs a new SynchronizedCollection object and initializes the InnerCollection with it's default constructor.
            </summary>
    </member>
    <member name="M:LamestWebserver.Synchronization.SynchronizedCollection`2.#ctor(`1)">
      <summary>
            Constructs a new SynchronizedCollection.
            </summary>
      <param name="collection">the collection to use</param>
    </member>
    <member name="M:LamestWebserver.Synchronization.SynchronizedCollection`2.op_Implicit(LamestWebserver.Synchronization.SynchronizedCollection{`0,`1})~System.Boolean">
      <summary>
            Provides functionality like NullCheckable.
            </summary>
      <param name="obj">The current object.</param>
    </member>
    <member name="M:LamestWebserver.Synchronization.SynchronizedCollection`2.Add(`0)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Synchronization.SynchronizedCollection`2.Clear">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Synchronization.SynchronizedCollection`2.Contains(`0)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Synchronization.SynchronizedCollection`2.CopyTo(`0[],System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Synchronization.SynchronizedCollection`2.GetEnumerator">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Synchronization.SynchronizedCollection`2.Remove(`0)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Synchronization.SynchronizedCollection`2.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Synchronization.SynchronizedCollection`2.ToString">
      <inheritdoc />
    </member>
    <member name="P:LamestWebserver.Synchronization.SynchronizedCollection`2.InnerCollection">
      <summary>
            The internal Collection for unsynchronized access.
            </summary>
    </member>
    <member name="P:LamestWebserver.Synchronization.SynchronizedCollection`2.Count">
      <inheritdoc />
    </member>
    <member name="P:LamestWebserver.Synchronization.SynchronizedCollection`2.IsReadOnly">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.Synchronization.SynchronizedDictionary`3">
      <summary>
            Provides synchronized access to an IDictionary&lt;TKey, TValue&gt;.
            </summary>
      <typeparam name="TKey">The type of the stored Keys.</typeparam>
      <typeparam name="TValue">The type of the stored Values.</typeparam>
      <typeparam name="TCollectionType">The internal implementation of the Dictionary used.</typeparam>
    </member>
    <member name="M:LamestWebserver.Synchronization.SynchronizedDictionary`3.#ctor">
      <summary>
            Constructs a new SynchronizedDictionary object and initializes the InnerDictionary with it's default constructor.
            </summary>
    </member>
    <member name="M:LamestWebserver.Synchronization.SynchronizedDictionary`3.#ctor(`2)">
      <summary>
            Constructs a new SynchronizedDictionary object and initializes the InnerDictionary.
            </summary>
      <param name="dictionary">The value to initialize the InnerDictionary with.</param>
    </member>
    <member name="M:LamestWebserver.Synchronization.SynchronizedDictionary`3.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            A Deserialization constructor.
            </summary>
      <param name="info">The serialization info.</param>
      <param name="context">The streaming context.</param>
    </member>
    <member name="M:LamestWebserver.Synchronization.SynchronizedDictionary`3.op_Implicit(LamestWebserver.Synchronization.SynchronizedDictionary{`0,`1,`2})~System.Boolean">
      <summary>
            Provides functionality like NullCheckable.
            </summary>
      <param name="obj">The current object.</param>
    </member>
    <member name="M:LamestWebserver.Synchronization.SynchronizedDictionary`3.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Synchronization.SynchronizedDictionary`3.Add(`0,`1)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Synchronization.SynchronizedDictionary`3.Clear">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Synchronization.SynchronizedDictionary`3.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Synchronization.SynchronizedDictionary`3.ContainsKey(`0)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Synchronization.SynchronizedDictionary`3.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Synchronization.SynchronizedDictionary`3.GetEnumerator">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Synchronization.SynchronizedDictionary`3.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Synchronization.SynchronizedDictionary`3.Remove(`0)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Synchronization.SynchronizedDictionary`3.TryGetValue(`0,`1@)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Synchronization.SynchronizedDictionary`3.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Synchronization.SynchronizedDictionary`3.GetSchema">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Synchronization.SynchronizedDictionary`3.ReadXml(System.Xml.XmlReader)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Synchronization.SynchronizedDictionary`3.WriteXml(System.Xml.XmlWriter)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Synchronization.SynchronizedDictionary`3.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Synchronization.SynchronizedDictionary`3.ToString">
      <inheritdoc />
    </member>
    <member name="P:LamestWebserver.Synchronization.SynchronizedDictionary`3.InnerDictionary">
      <summary>
            The internal Dictionary for unsynchronized access.
            </summary>
    </member>
    <member name="P:LamestWebserver.Synchronization.SynchronizedDictionary`3.Item(`0)">
      <inheritdoc />
    </member>
    <member name="P:LamestWebserver.Synchronization.SynchronizedDictionary`3.Count">
      <inheritdoc />
    </member>
    <member name="P:LamestWebserver.Synchronization.SynchronizedDictionary`3.IsReadOnly">
      <inheritdoc />
    </member>
    <member name="P:LamestWebserver.Synchronization.SynchronizedDictionary`3.Keys">
      <inheritdoc />
    </member>
    <member name="P:LamestWebserver.Synchronization.SynchronizedDictionary`3.Values">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.Synchronization.SynchronizedValue`1">
      <summary>
            Provides synchonized access to a variable.
            NOT NullCheckable, because SynchronizedValue&lt;bool&gt; would result in unexpected results when casting to bool.
            </summary>
      <typeparam name="T">The Type of the variable.</typeparam>
    </member>
    <member name="M:LamestWebserver.Synchronization.SynchronizedValue`1.#ctor">
      <summary>
            Empty or Deserialition Constructor.
            </summary>
    </member>
    <member name="M:LamestWebserver.Synchronization.SynchronizedValue`1.#ctor(`0)">
      <summary>
            Constructs a new SynchronizedValue object and initializes the internal Value.
            </summary>
      <param name="value">The initial value.</param>
    </member>
    <member name="M:LamestWebserver.Synchronization.SynchronizedValue`1.op_Implicit(LamestWebserver.Synchronization.SynchronizedValue{`0})~`0">
      <summary>
            Reads from the Value synchronously.
            (You can easily get unsynchronized access using this cast if you set a variable 'T x' to this and then start using 'x' instead of this SynchronizedValue&lt;T&gt;)
            </summary>
      <param name="syncValue">The SynchronizedValue to read from.</param>
    </member>
    <member name="M:LamestWebserver.Synchronization.SynchronizedValue`1.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Synchronization.SynchronizedValue`1.ToString">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Synchronization.SynchronizedValue`1.GetHashCode">
      <inheritdoc />
    </member>
    <member name="P:LamestWebserver.Synchronization.SynchronizedValue`1.Value">
      <summary>
            The synchronized Value.
            </summary>
    </member>
    <member name="T:LamestWebserver.Synchronization.UsableMutexSlim">
      <summary>
            Just a simple UsableMutex with no handling for deadlocks - Only to use Mutexes with IDisposable.
            </summary>
    </member>
    <member name="T:LamestWebserver.Synchronization.UsableMutexSlim.UsableSlimMutexLocker">
      <summary>
            Just a simple IDisposable Mutex lock/release.
            </summary>
    </member>
    <member name="M:LamestWebserver.Synchronization.UsableMutexSlim.UsableSlimMutexLocker.ReLock">
      <summary>
            Locks the internal Mutex again.
            </summary>
    </member>
    <member name="M:LamestWebserver.Synchronization.UsableMutexSlim.UsableSlimMutexLocker.Dispose">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Synchronization.UsableMutexSlim.Lock">
      <summary>
            Locks the mutex; IDisposable.
            </summary>
      <returns>an IDisposable object that releases the mutex on Dispose()</returns>
    </member>
    <member name="T:LamestWebserver.Synchronization.UsableLocker">
      <summary>
            Locks and Releases a ILockable object using IDisposable.
            </summary>
    </member>
    <member name="M:LamestWebserver.Synchronization.UsableLocker.#ctor(LamestWebserver.Synchronization.ILockable)">
      <summary>
            Constructs a new UsableLocker
            </summary>
      <param name="obj">the ILockable object</param>
    </member>
    <member name="M:LamestWebserver.Synchronization.UsableLocker.ReLock">
      <summary>
            Locks the internal Mutex again.
            </summary>
    </member>
    <member name="M:LamestWebserver.Synchronization.UsableLocker.Dispose">
      <summary>
            Releases the internal Mutex.
            </summary>
    </member>
    <member name="M:LamestWebserver.Synchronization.UsableLocker.TryLock(LamestWebserver.Synchronization.ILockable,System.Action)">
      <summary>
            Executes code locking and releasing a given mutex before and after and passes exceptions through this behaviour.
            </summary>
      <param name="obj">the ILockable object</param>
      <param name="action">the code to execute</param>
    </member>
    <member name="T:LamestWebserver.Synchronization.UsableMutexLocker">
      <summary>
            Locks and Releases a Mutex via IDisposable.
            </summary>
    </member>
    <member name="M:LamestWebserver.Synchronization.UsableMutexLocker.#ctor(System.Threading.Mutex)">
      <summary>
            Creates a new UsableMutexLocker.
            </summary>
      <param name="mutex">the mutex to lock</param>
    </member>
    <member name="M:LamestWebserver.Synchronization.UsableMutexLocker.Dispose">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Synchronization.UsableMutexLocker.TryLock(System.Threading.Mutex,System.Action)">
      <summary>
            Executes code locking and releasing a given mutex before and after and passes exceptions through this behaviour.
            </summary>
      <param name="mutex">the mutex</param>
      <param name="action">the code to execute</param>
    </member>
    <member name="T:LamestWebserver.Synchronization.ILockable">
      <summary>
            A Lockable object
            </summary>
    </member>
    <member name="P:LamestWebserver.Synchronization.ILockable.Mutex">
      <summary>
            the mutex that is locked.
            </summary>
    </member>
    <member name="T:LamestWebserver.Synchronization.UsableLockSimple">
      <summary>
            Like a regular Mutex, but simplified, deadlock-safe (due to auto-releasing after a certain time) and disposable if Lock() is called, making it available in using statements.
            UsableLockSimple.Lock() is also available for sorted locking to prevent deadlocks.
            Attention: UsableLockSimple might retry actions if deadlocks occur or a certain operation takes to long. Keep that in mind.
            <para />
            Do not use this Synchronizer if you're experienced with multi-threading and expect it to work like a Mutex. This is a simplified Synchronizer to help unexperienced People to write multi-threaded applications.
            
            <example>
            using (usableLockSimple.Lock())
            {
                // Your Code.
            }
            </example></summary>
    </member>
    <member name="F:LamestWebserver.Synchronization.UsableLockSimple.MutexWaitMillis">
      <summary>
            The milliseconds to wait for the mutex to be free.
            </summary>
    </member>
    <member name="F:LamestWebserver.Synchronization.UsableLockSimple.MutexSelfRelease">
      <summary>
            The milliseconds to wait for the mutex to expect a neverending method might have aquired it and just releasing it by yourself.
            </summary>
    </member>
    <member name="M:LamestWebserver.Synchronization.UsableLockSimple.#ctor">
      <summary>
            Constructs a new UsableLockSimple.
            </summary>
    </member>
    <member name="M:LamestWebserver.Synchronization.UsableLockSimple.HandleTimer">
      <summary>
            Checks if the lastLocked time is to far away, so that we should ignore the value of it and release the mutex
            </summary>
    </member>
    <member name="M:LamestWebserver.Synchronization.UsableLockSimple.StartTimer(System.Boolean)">
      <summary>
            Sets the current Time as lastLocked time if the execute value is true
            </summary>
      <param name="execute">is only executed if true - this value is passed through (like Mutex.WaitOne return value)</param>
      <returns>the execute value</returns>
    </member>
    <member name="M:LamestWebserver.Synchronization.UsableLockSimple.StopTimer">
      <summary>
            Sets the current Thread as not locked
            </summary>
    </member>
    <member name="M:LamestWebserver.Synchronization.UsableLockSimple.WaitOne">
      <summary>
            Locks the mutex.
            </summary>
      <returns>true if the mutex could be locked in time</returns>
    </member>
    <member name="M:LamestWebserver.Synchronization.UsableLockSimple.ReleaseMutex">
      <summary>
            Releases the mutex.
            </summary>
    </member>
    <member name="M:LamestWebserver.Synchronization.UsableLockSimple.Lock">
      <summary>
            Locks the innerMutex in a way, so that it can be used through a using statement (IDisposable)
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:LamestWebserver.Synchronization.UsableLockSimple.Lock(LamestWebserver.Synchronization.UsableLockSimple[])">
      <summary>
            Is used to lock especially multiple mutexes in sorted order to prevent deadlocks
            </summary>
      <param name="mutexes">the UsableLockSimple-s to lock</param>
      <returns>a UsableMutliMutexLocker, that already locked the given mutexes</returns>
    </member>
    <member name="T:LamestWebserver.Synchronization.UsableMultiMutexLocker">
      <summary>
            A MutexLocker for multiple Mutexes
            </summary>
    </member>
    <member name="M:LamestWebserver.Synchronization.UsableMultiMutexLocker.#ctor(System.Threading.Mutex[])">
      <summary>
            constructs a new UsableMultiMutexLocker and already locks all given mutexes.
            </summary>
      <param name="mutexes">the mutexes to lock</param>
    </member>
    <member name="M:LamestWebserver.Synchronization.UsableMultiMutexLocker.Dispose">
      <summary>
            Releases all locked mutexes in opposite locking order.
            </summary>
    </member>
    <member name="T:LamestWebserver.Synchronization.UsableMultiUsableMutexLocker">
      <summary>
            A MutexLocker for multiple UsableLockSimple-s
            </summary>
    </member>
    <member name="M:LamestWebserver.Synchronization.UsableMultiUsableMutexLocker.#ctor(LamestWebserver.Synchronization.UsableLockSimple[])">
      <summary>
            constructs a new UsableMultiUsableMutexLocker and already locks all given mutexes.
            </summary>
      <param name="mutexes">the UsableLockSimple-s to lock</param>
    </member>
    <member name="M:LamestWebserver.Synchronization.UsableMultiUsableMutexLocker.Dispose">
      <summary>
            Releases all locked UsableLockSimple-s in opposite locking order.
            </summary>
    </member>
    <member name="T:LamestWebserver.Synchronization.MutexRetryException">
      <summary>
            This exception symbolizes, that a mutex could not be aquired in time and the Operation has been aborted.
            </summary>
    </member>
    <member name="T:LamestWebserver.Synchronization.UsableWriteLock">
      <summary>
            A safe and fast way to read and write from shared ressources without blocking everything.
            </summary>
    </member>
    <member name="T:LamestWebserver.Synchronization.UsableWriteLock.UsableWriteLockDisposable_write">
      <summary>
            A helper class to be used in a using statement
            </summary>
    </member>
    <member name="M:LamestWebserver.Synchronization.UsableWriteLock.UsableWriteLockDisposable_write.Dispose">
      <summary>
            Releases the Semaphore
            </summary>
    </member>
    <member name="T:LamestWebserver.Synchronization.UsableWriteLock.UsableWriteLockDisposable_read">
      <summary>
            A helper class to be used in a using statement
            </summary>
    </member>
    <member name="M:LamestWebserver.Synchronization.UsableWriteLock.UsableWriteLockDisposable_read.Dispose">
      <summary>
            Releases the mutex and unsubscribes from the writeLock
            </summary>
    </member>
    <member name="M:LamestWebserver.Synchronization.UsableWriteLock.LockRead">
      <summary>
            Locks the WriteLock for reading
            </summary>
      <returns>An IDisposable Object to be used in a using statement</returns>
    </member>
    <member name="M:LamestWebserver.Synchronization.UsableWriteLock.LockWrite">
      <summary>
            Locks the WriteLock for Writing
            </summary>
      <returns>An IDisposable Object to be used in a using statement</returns>
    </member>
    <member name="M:LamestWebserver.Synchronization.UsableWriteLock.LockRead(LamestWebserver.Synchronization.UsableWriteLock[])">
      <summary>
            Locks a couple of UsableWriteLocks for Reading in order to prevent deadlocks.
            </summary>
      <param name="locks">the WriteLocks to lock</param>
      <returns>a multidisposer to release the locks in opposite order</returns>
    </member>
    <member name="M:LamestWebserver.Synchronization.UsableWriteLock.LockWrite(LamestWebserver.Synchronization.UsableWriteLock[])">
      <summary>
            Locks a couple of UsableWriteLocks for Writing in order to prevent deadlocks.
            </summary>
      <param name="locks">the WriteLocks to lock</param>
      <returns>a multidisposer to release the locks in opposite order</returns>
    </member>
    <member name="T:LamestWebserver.Synchronization.UsableSemaphore">
      <summary>
            A wrapper class for a writeLock to be used in a using statement
            </summary>
    </member>
    <member name="M:LamestWebserver.Synchronization.UsableSemaphore.#ctor(System.Threading.SemaphoreSlim)">
      <summary>
            Constructs a new UsableSemaphore. The Semaphore is not locked and will not be locked until you call Lock().
            </summary>
      <param name="semaphore">the writeLock</param>
    </member>
    <member name="M:LamestWebserver.Synchronization.UsableSemaphore.Lock">
      <summary>
            Locks this Semaphore.
            </summary>
    </member>
    <member name="M:LamestWebserver.Synchronization.UsableSemaphore.Dispose">
      <summary>
            Releases this Semaphore.
            </summary>
    </member>
    <member name="T:LamestWebserver.Synchronization.MultiDisposer">
      <summary>
            A MultiDisposer disposes all given object on dispose.
            </summary>
    </member>
    <member name="M:LamestWebserver.Synchronization.MultiDisposer.#ctor(System.IDisposable[])">
      <summary>
            Creates a MultiDisposer.
            </summary>
      <param name="disposables">the IDisposable objects to dispose on dispose.</param>
    </member>
    <member name="M:LamestWebserver.Synchronization.MultiDisposer.Dispose">
      <summary>
            Disposes all given disposing objects in oposite order.
            </summary>
    </member>
    <member name="T:LamestWebserver.Security.Encryption">
      <summary>
            Provides basic functionality for encryption and decryption.
            </summary>
    </member>
    <member name="M:LamestWebserver.Security.Encryption.Encrypt(System.String,System.Byte[],System.Byte[])">
      <summary>
            Encrypts a given string with AES128 CounterMode.
            </summary>
      <param name="message">the message to encrypt</param>
      <param name="key">the key (32 bytes recommended)</param>
      <param name="iv">the iv (16 bytes)</param>
      <returns>the encrypted message as base64 encoded string</returns>
    </member>
    <member name="M:LamestWebserver.Security.Encryption.Decrypt(System.String,System.Byte[],System.Byte[])">
      <summary>
            Decrypts a given Base64 encoded string using AES128 in CounterMode
            </summary>
      <param name="message">the encrypted message</param>
      <param name="key">the key (32 bytes recommended)</param>
      <param name="iv">the iv (16 bytes)</param>
      <returns>the decrypted result as UTF8-string</returns>
    </member>
    <member name="M:LamestWebserver.Security.Encryption.Encrypt(System.Byte[],System.Byte[],System.Byte[])">
      <summary>
            Encrypts a given byte[] with AES128 CounterMode.
            </summary>
      <param name="message">the message to encrypt</param>
      <param name="key">the key (32 bytes recommended)</param>
      <param name="iv">the iv (16 bytes)</param>
      <returns>the encrypted message as byte[]</returns>
    </member>
    <member name="M:LamestWebserver.Security.Encryption.Decrypt(System.Byte[],System.Byte[],System.Byte[])">
      <summary>
            Decrypts a given byte[] using AES128 in CounterMode
            </summary>
      <param name="message">the encrypted message</param>
      <param name="key">the key (32 bytes recommended)</param>
      <param name="iv">the iv (16 bytes)</param>
      <returns>returns the decrypted result as byte[]</returns>
    </member>
    <member name="M:LamestWebserver.Security.Encryption.GetKey">
      <summary>
            Generates a secure 32 byte key.
            </summary>
      <returns>the key</returns>
    </member>
    <member name="M:LamestWebserver.Security.Encryption.GetIV">
      <summary>
            Generates a secure 16 byte initialization vector.
            </summary>
      <returns>the IV</returns>
    </member>
    <member name="T:LamestWebserver.Security.Password">
      <summary>
            A safe way to store passwords.
            (implements IXmlSerializable, ISerializable)
            </summary>
    </member>
    <member name="M:LamestWebserver.Security.Password.#ctor">
      <summary>
            Only used for deserialisation
            </summary>
    </member>
    <member name="M:LamestWebserver.Security.Password.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Only used for deserialization
            </summary>
      <param name="info">SerializationInfo</param>
      <param name="context">StreamingContext</param>
    </member>
    <member name="M:LamestWebserver.Security.Password.#ctor(System.String)">
      <summary>
            Constructs a new password object
            </summary>
      <param name="password">the password</param>
      <exception cref="T:System.InvalidOperationException">throws an exception is the password is null or empty</exception>
    </member>
    <member name="M:LamestWebserver.Security.Password.IsValid(System.String)">
      <summary>
            Checks whether a password matches this password
            </summary>
      <param name="password">the password to compare to</param>
      <returns>
      </returns>
      <exception cref="T:System.InvalidOperationException">throws an exception if the password is null or empty</exception>
    </member>
    <member name="M:LamestWebserver.Security.Password.GetSchema">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Security.Password.ReadXml(System.Xml.XmlReader)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Security.Password.WriteXml(System.Xml.XmlWriter)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Security.Password.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.ProxyServices.ITransparentProxy">
      <summary>
            The interface for a Transparent Proxy
            </summary>
    </member>
    <member name="M:LamestWebserver.ProxyServices.ITransparentProxy.Stop">
      <summary>
            Stops the transparent proxy
            </summary>
    </member>
    <member name="P:LamestWebserver.ProxyServices.ITransparentProxy.ProxyServerPort">
      <summary>
            The port at which the proxy will be available at
            </summary>
    </member>
    <member name="P:LamestWebserver.ProxyServices.ITransparentProxy.Gateway">
      <summary>
            the ipendpoint of the replicated service
            </summary>
    </member>
    <member name="T:LamestWebserver.ProxyServices.TransparentProxy">
      <summary>
            A transparent proxy to redistribute other services locally or under different ports
            </summary>
    </member>
    <member name="M:LamestWebserver.ProxyServices.TransparentProxy.Stop">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.ProxyServices.TransparentProxy.#ctor(System.Net.IPEndPoint,System.Int32,System.Byte[],System.Int32,System.Int32,System.Int32)">
      <summary>
            Constructs a new TranspartentProxy.
            </summary>
      <param name="gateway">the IPEndpoint of the replicated service</param>
      <param name="proxyServerPort">the port at which this service will be available at</param>
      <param name="response">the default response if the service is not available</param>
      <param name="timeout">the timeout at which to drop the connection to a client</param>
      <param name="gatewayTimeout">the timeout at which to expect the replicated service to be not available</param>
      <param name="packetSize">the size of a single packet that is forwarded</param>
      <exception cref="T:System.InvalidOperationException">Throws an exception if the port is currently blocked</exception>
    </member>
    <member name="P:LamestWebserver.ProxyServices.TransparentProxy.ProxyServerPort">
      <inheritdoc />
    </member>
    <member name="P:LamestWebserver.ProxyServices.TransparentProxy.Gateway">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.NotificationService.INotificationHandler">
      <summary>
            An interface for notification based communication between client and server.
            </summary>
    </member>
    <member name="M:LamestWebserver.NotificationService.INotificationHandler.StopHandler">
      <summary>
            Stops and Unregisters the Handler
            </summary>
    </member>
    <member name="M:LamestWebserver.NotificationService.INotificationHandler.Notify(LamestWebserver.NotificationService.Notification)">
      <summary>
            Notifies all connected clients.
            </summary>
      <param name="notification">the notification to send</param>
    </member>
    <member name="P:LamestWebserver.NotificationService.INotificationHandler.URL">
      <summary>
            The URL of the ResponseService
            </summary>
    </member>
    <member name="T:LamestWebserver.NotificationService.Notification">
      <summary>
            A Notification for Communicating message based via WebSockets
            </summary>
    </member>
    <member name="F:LamestWebserver.NotificationService.Notification.NotificationType">
      <summary>
            The type of the current notification
            </summary>
    </member>
    <member name="F:LamestWebserver.NotificationService.Notification.NoReply">
      <summary>
            shall the client / server not reply to this notification?
            </summary>
    </member>
    <member name="M:LamestWebserver.NotificationService.Notification.#ctor(LamestWebserver.NotificationService.NotificationType)">
      <summary>
            Constructs a new Notification of the given type
            </summary>
      <param name="type">
      </param>
    </member>
    <member name="M:LamestWebserver.NotificationService.Notification.ToString">
      <summary>
            Returns the current notification as string (json)
            </summary>
      <returns>the current notification as string (json)</returns>
    </member>
    <member name="M:LamestWebserver.NotificationService.Notification.ToString(System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
      <summary>
            Returns the current notification as string (json)
            </summary>
      <param name="args">the arguments listed in the message</param>
      <returns>the current notification as string (json)</returns>
    </member>
    <member name="M:LamestWebserver.NotificationService.Notification.GetNotification">
      <summary>
            Retrieves the current notification
            </summary>
      <returns>Returns the notification as string</returns>
    </member>
    <member name="M:LamestWebserver.NotificationService.Notification.ExecuteScript(System.String)">
      <summary>
            Creates a notification to execute a javascript piece of code in the client
            </summary>
      <param name="script">the script to execute</param>
      <returns>the specified notification</returns>
    </member>
    <member name="M:LamestWebserver.NotificationService.Notification.ExecuteScript(LamestWebserver.JScriptBuilder.IJSPiece)">
      <summary>
            Creates a notification to execute a javascript piece of code in the client
            </summary>
      <param name="piece">the script to execute</param>
      <returns>the specified notification</returns>
    </member>
    <member name="M:LamestWebserver.NotificationService.Notification.ReplaceDivWithContent(System.String,LamestWebserver.JScriptBuilder.IJSValue)">
      <summary>
            Creates a notification to replace a given div element identified by an id with the specific new content
            </summary>
      <param name="divId">the id of the div element</param>
      <param name="content">the content to replace it's contents with</param>
      <returns>the specified notification</returns>
    </member>
    <member name="M:LamestWebserver.NotificationService.Notification.ReplaceDivWithContent(System.String,System.String)">
      <summary>
            Creates a notification to replace a given div element identified by an id with the specific new content
            </summary>
      <param name="divId">the id of the div element</param>
      <param name="content">the content to replace it's contents with</param>
      <returns>the specified notification</returns>
    </member>
    <member name="M:LamestWebserver.NotificationService.Notification.ReplaceBodyWithContent(LamestWebserver.JScriptBuilder.IJSValue)">
      <summary>
            Creates a notification to replace the documents body with specific new content
            </summary>
      <param name="content">the content to replace the body with</param>
      <returns>the specified notification</returns>
    </member>
    <member name="M:LamestWebserver.NotificationService.Notification.ReplaceBodyWithContent(System.String)">
      <summary>
            Creates a notification to replace the documents body with specific new content
            </summary>
      <param name="content">the content to replace the body with</param>
      <returns>the specified notification</returns>
    </member>
    <member name="M:LamestWebserver.NotificationService.Notification.AddContentToDiv(System.String,LamestWebserver.JScriptBuilder.IJSValue)">
      <summary>
            Creates a notification to add the given content to a specified div
            </summary>
      <param name="divId">the div to add content to</param>
      <param name="content">the content to add</param>
      <returns>the specified notification</returns>
    </member>
    <member name="M:LamestWebserver.NotificationService.Notification.AddContentToDiv(System.String,System.String)">
      <summary>
            Creates a notification to add the given content to a specified div
            </summary>
      <param name="divId">the div to add content to</param>
      <param name="content">the content to add</param>
      <returns>the specified notification</returns>
    </member>
    <member name="M:LamestWebserver.NotificationService.Notification.ReloadPage">
      <summary>
            Creates a notification to reload the current page
            </summary>
      <returns>the specified notification</returns>
    </member>
    <member name="M:LamestWebserver.NotificationService.Notification.Redirect(LamestWebserver.JScriptBuilder.IJSValue)">
      <summary>
            Creates a notification to redirect the client to a new page
            </summary>
      <param name="newPageUrl">the url of the new page</param>
      <returns>the specified notification</returns>
    </member>
    <member name="M:LamestWebserver.NotificationService.Notification.Redirect(System.String)">
      <summary>
            Creates a notification to redirect the client to a new page
            </summary>
      <param name="newPageUrl">the url of the new page</param>
      <returns>the specified notification</returns>
    </member>
    <member name="M:LamestWebserver.NotificationService.Notification.Invalid">
      <summary>
            Creates a notification to tell that something went wrong
            </summary>
      <returns>the specified notification</returns>
    </member>
    <member name="M:LamestWebserver.NotificationService.Notification.Invalid(System.String)">
      <summary>
            Creates a notification to tell that something went wrong
            </summary>
      <param name="text">the description of what went wrong</param>
      <returns>the specified notification</returns>
    </member>
    <member name="M:LamestWebserver.NotificationService.Notification.LogNotification(LamestWebserver.NotificationService.Notification)">
      <summary>
            Parses a Notification to string for logging purposes
            </summary>
      <param name="notification">the notification to parse</param>
      <returns>the notification as string</returns>
    </member>
    <member name="T:LamestWebserver.NotificationService.KeepAliveNotification">
      <summary>
            A Notication to Keep the Connection alive
            </summary>
    </member>
    <member name="M:LamestWebserver.NotificationService.KeepAliveNotification.GetNotification">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.NotificationService.InvalidNotification">
      <summary>
            A Notication to signalize invalid behaviour (please resend last msg)
            </summary>
    </member>
    <member name="M:LamestWebserver.NotificationService.InvalidNotification.GetNotification">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.NotificationService.InvalidNotificationInfo">
      <summary>
            A Notication to signalize invalid behaviour with a description text (please resend last msg)
            </summary>
    </member>
    <member name="M:LamestWebserver.NotificationService.InvalidNotificationInfo.GetNotification">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.NotificationService.ExecuteScriptNotification">
      <summary>
            A Notication to execute a given javascript on the client
            </summary>
    </member>
    <member name="M:LamestWebserver.NotificationService.ExecuteScriptNotification.GetNotification">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.NotificationService.NotificationType">
      <summary>
            The type of the Notification
            </summary>
    </member>
    <member name="F:LamestWebserver.NotificationService.NotificationType.Acknowledge">
      <summary>
            Signalize that the last transfer was successful
            </summary>
    </member>
    <member name="F:LamestWebserver.NotificationService.NotificationType.KeepAlive">
      <summary>
            Kepps the connection open
            </summary>
    </member>
    <member name="F:LamestWebserver.NotificationService.NotificationType.Message">
      <summary>
            Transfers a message from the client to the server
            </summary>
    </member>
    <member name="F:LamestWebserver.NotificationService.NotificationType.Invalid">
      <summary>
            Transfers the information that something went wrong in the last message
            </summary>
    </member>
    <member name="F:LamestWebserver.NotificationService.NotificationType.ExecuteScript">
      <summary>
            Executes a javascript in the client
            </summary>
    </member>
    <member name="T:LamestWebserver.NotificationService.NotificationHandler">
      <summary>
            Provides a Notification Based System for Communicating via Websockets
            </summary>
    </member>
    <member name="F:LamestWebserver.NotificationService.NotificationHandler.DefaultMaximumLastMessageTime">
      <summary>
            The default time before a keepalive message is being sent.
            </summary>
    </member>
    <member name="F:LamestWebserver.NotificationService.NotificationHandler.MaximumLastMessageTime">
      <summary>
            The maximum time before a keepalive package is being sent.
            </summary>
    </member>
    <member name="F:LamestWebserver.NotificationService.NotificationHandler.HandlerThread">
      <summary>
            The thread that handles the keepalive sending
            </summary>
    </member>
    <member name="F:LamestWebserver.NotificationService.NotificationHandler.NotifyForKeepalives">
      <summary>
            Specifies whether the OnNotification Event shall also be called for keepalive messages - or only on messages carrying information.
            </summary>
    </member>
    <member name="M:LamestWebserver.NotificationService.NotificationHandler.StopAllNotificationHandlers">
      <summary>
            Stops all currently running NotificationHandlers
            </summary>
    </member>
    <member name="M:LamestWebserver.NotificationService.NotificationHandler.#ctor(System.String,System.Boolean,System.Net.IPEndPoint,System.Boolean,System.Nullable{System.TimeSpan})">
      <summary>
            Constructs a new NotificationHandler listening for websocket requests at a specified URL
            </summary>
      <param name="URL">the URL at which the Websocket Response will be available at</param>
      <param name="notifyForKeepalives">shall the OnNotification event be fired if the Notification is just a KeepAliveMessage</param>
      <param name="externalEndpoint">at which IP-Address and port is the server at for the client?</param>
      <param name="traceMessagesClient">shall the communication be logged in the client browser console? (for debugging)</param>
      <param name="maximumLastMessageTime">the maximum time at which the server decides not to sent a keepalive package after not hearing from the client. (null means DefaultMaximumLastMessageTime)</param>
    </member>
    <member name="M:LamestWebserver.NotificationService.NotificationHandler.ServerClients">
      <summary>
            The method which handles the sending of keepalive packages to the clients whenever the maximum time is reached.
            </summary>
    </member>
    <member name="M:LamestWebserver.NotificationService.NotificationHandler.StopHandler">
      <summary>
            Stops the NotificationHandler &amp; the handler thread; unregisters the page.
            </summary>
    </member>
    <member name="M:LamestWebserver.NotificationService.NotificationHandler.Notify(LamestWebserver.NotificationService.Notification)">
      <summary>
            Notify all connected clients.
            </summary>
      <param name="notification">the notification to send</param>
    </member>
    <member name="M:LamestWebserver.NotificationService.NotificationHandler.HandleResponse(LamestWebserver.NotificationService.NotificationResponse)">
      <summary>
            Handles Messages sent from the client
            </summary>
      <param name="response">the message from the client</param>
    </member>
    <member name="M:LamestWebserver.NotificationService.NotificationHandler.SendMessage(LamestWebserver.JScriptBuilder.IJSPiece)">
      <summary>
            Retrives JavaScript code to send a Message from the client to the server.
            </summary>
      <param name="messageGetter">The Method to get the Notification Contents from</param>
      <returns>A piece of JavaScript code</returns>
    </member>
    <member name="M:LamestWebserver.NotificationService.NotificationHandler.SendMessage(System.String)">
      <summary>
            Retrives JavaScript code to send a Message from the client to the server.
            </summary>
      <param name="message">the message to send as string</param>
      <returns>A piece of JavaScript code</returns>
    </member>
    <member name="P:LamestWebserver.NotificationService.NotificationHandler.SendingFunction">
      <summary>
            The function used for sending messages to the server from the client
            </summary>
    </member>
    <member name="P:LamestWebserver.NotificationService.NotificationHandler.ID">
      <summary>
            The id of this NotificationHandler (for easier identification in the client)
            </summary>
    </member>
    <member name="P:LamestWebserver.NotificationService.NotificationHandler.ConnectedClients">
      <summary>
            The amount of currently connected clients.
            </summary>
    </member>
    <member name="P:LamestWebserver.NotificationService.NotificationHandler.ConnectionElement">
      <summary>
            The javascript code that handles the Notification based Communication to the server
            </summary>
    </member>
    <member name="E:LamestWebserver.NotificationService.NotificationHandler.OnNotification">
      <summary>
            This event is called whenever a client sends a notification
            </summary>
    </member>
    <member name="T:LamestWebserver.NotificationService.NotificationResponse">
      <summary>
            The Response to a Notification from a client
            </summary>
    </member>
    <member name="F:LamestWebserver.NotificationService.NotificationResponse.IsMessage">
      <summary>
            Does the Reponse from the client contain a message?
            </summary>
    </member>
    <member name="F:LamestWebserver.NotificationService.NotificationResponse.Message">
      <summary>
            The message sent by the client (if any)
            </summary>
    </member>
    <member name="F:LamestWebserver.NotificationService.NotificationResponse.HandlerProxy">
      <summary>
            The Hanlder for the current connection
            </summary>
    </member>
    <member name="M:LamestWebserver.NotificationService.NotificationResponse.Reply(LamestWebserver.NotificationService.Notification)">
      <summary>
            Reply directly to the client who sent this message.
            </summary>
      <param name="notification">the Notification to send to the client</param>
    </member>
    <member name="M:LamestWebserver.NotificationService.NotificationResponse.ParseNotificationResponse(System.String,LamestWebserver.NotificationService.NotificationResponse,System.String)">
      <summary>
            Parses a Notification response from string
            </summary>
      <param name="input">the response string</param>
      <param name="response">the current response</param>
      <param name="URL">the url of the request</param>
    </member>
    <member name="M:LamestWebserver.NotificationService.NotificationResponse.GetValue(System.String)">
      <summary>
            Retrieves a value from the values the client sent.
            </summary>
      <param name="key">the key of the value</param>
      <returns>the value</returns>
    </member>
    <member name="M:LamestWebserver.NotificationService.NotificationResponse.LogNotification(LamestWebserver.NotificationService.NotificationResponse)">
      <summary>
            Parses the given notificationResponse to string to be used for logging purposes
            </summary>
      <param name="response">the notificationResponse</param>
      <returns>the notificationResponse as string</returns>
    </member>
    <member name="P:LamestWebserver.NotificationService.NotificationResponse.SessionData">
      <summary>
            The current SessionData
            </summary>
    </member>
    <member name="T:LamestWebserver.JScriptBuilder.JSElement">
      <summary>
            A JavaScript powered HTML-Element
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSElement.DescriptionTags">
      <summary>
            Additional Attributes added to the Element
            </summary>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSElement.#ctor">
      <summary>
            Constructs a new JSElement and sets it's ID to a HashValue
            </summary>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSElement.CreateNew">
      <summary>
            Inserts this Element into the document body.
            </summary>
      <returns>A piece of JavaScript code</returns>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSElement.CreateNew(System.String)">
      <summary>
            Inserts this Element into an Element with the specified ID.
            </summary>
      <param name="intoID">the ID of the Element</param>
      <returns>A piece of JavaScript code</returns>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSElement.GetJsCode(LamestWebserver.SessionData,LamestWebserver.JScriptBuilder.CallingContext)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSElement.GetDefaultAttributes">
      <summary>
            Retrieves the default attributes for a HTML element
            </summary>
      <returns>the attributes as string</returns>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSElement.GetContent(LamestWebserver.SessionData,LamestWebserver.JScriptBuilder.CallingContext)">
      <summary>
            Retrieves the HTML-Text of this Element
            </summary>
      <param name="sessionData">the current sessionData</param>
      <param name="context">the current CallingContext</param>
      <returns>
      </returns>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSElement.GetContent(LamestWebserver.SessionData)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSElement.GetByID(System.String)">
      <summary>
            Retrieves
            </summary>
      <param name="id">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:LamestWebserver.JScriptBuilder.JSElement.Body">
      <summary>
            Retrieves the Body of the currentDocument
            </summary>
    </member>
    <member name="T:LamestWebserver.JScriptBuilder.JSPlainText">
      <summary>
            Just a wrapper to put the text given in the constructor into the final document
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSPlainText.Contents">
      <summary>
            The text add to the final output
            </summary>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSPlainText.#ctor(System.String)">
      <summary>
            Creates a pseudo element containing the given contents
            </summary>
      <param name="Contents">the contents to add to the final output</param>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSPlainText.GetContent(LamestWebserver.SessionData,LamestWebserver.JScriptBuilder.CallingContext)">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.JScriptBuilder.JSMsgBox">
      <summary>
            A simple MessageBox
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSMsgBox.GlobalID">
      <summary>
            The Id of the MessageBox Background
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSMsgBox.GlobalInnerID">
      <summary>
            The Id of the MessageBox Foreground
            </summary>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSMsgBox.#ctor(System.Boolean,LamestWebserver.JScriptBuilder.JSElement[])">
      <summary>
            Constructs a new MessageBox
            </summary>
      <param name="hasExitButton">Should there be an Exit-Button?</param>
      <param name="elements">The contained elements</param>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSMsgBox.#ctor(LamestWebserver.JScriptBuilder.JSElement[])">
      <summary>
            Constructs a new MessageBox
            </summary>
      <param name="elements">The contained elements</param>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSMsgBox.GetContent(LamestWebserver.SessionData,LamestWebserver.JScriptBuilder.CallingContext)">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.JScriptBuilder.JSButton">
      <summary>
            A HTML Button Element
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSButton.buttonType">
      <summary>
            The type of the button
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSButton.buttonText">
      <summary>
            The text displayed on the button
            </summary>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSButton.#ctor(System.String,LamestWebserver.UI.HButton.EButtonType)">
      <summary>
            Constructs a new JSButton element
            </summary>
      <param name="buttonText">the text displayed on the button</param>
      <param name="buttonType">the type of the button</param>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSButton.GetContent(LamestWebserver.SessionData,LamestWebserver.JScriptBuilder.CallingContext)">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.JScriptBuilder.JSText">
      <summary>
            A HTML Text Element
            </summary>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSText.#ctor(System.String)">
      <summary>
            Constructs a new JSText element with the given content
            </summary>
      <param name="content">the content of the Text-Element</param>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSText.GetContent(LamestWebserver.SessionData,LamestWebserver.JScriptBuilder.CallingContext)">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.JScriptBuilder.JSInput">
      <summary>
            A HTML Input Element
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInput.inputType">
      <summary>
            The inputType of this Element
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInput.Value">
      <summary>
            The Value of this Element
            </summary>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSInput.#ctor(LamestWebserver.UI.HInput.EInputType,System.String,System.String)">
      <summary>
            Constructs a new JSInput Element
            </summary>
      <param name="type">the type of the element</param>
      <param name="name">the name of the element</param>
      <param name="value">the value of the element</param>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSInput.GetContent(LamestWebserver.SessionData,LamestWebserver.JScriptBuilder.CallingContext)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSInput.SendNameValueAsync(System.String)">
      <summary>
            Sends this elements name and value to a remote server.
            </summary>
      <param name="URL">the event to reach</param>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSInput.GetInnerValue">
      <summary>
            Retrieves a JSValue containing the "value" property of this input element.
            </summary>
      <returns>The value of this element.</returns>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSInput.SetInnerHTMLWithNameValueAsync(LamestWebserver.JScriptBuilder.IJSValue,System.String,LamestWebserver.JScriptBuilder.IJSPiece[])">
      <summary>
            Sends this elements name and value to a remote server and sets the response as InnerHtml of a HTML element.
            </summary>
      <param name="element">the element which innerHTML you want to override</param>
      <param name="URL">the event to reach</param>
      <param name="executeOnComplete">the code to execute when the task has been completed</param>
    </member>
    <member name="T:LamestWebserver.JScriptBuilder.JSTextArea">
      <summary>
            A HTML Text-Area Element
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSTextArea.cols">
      <summary>
            The Columns displayed
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSTextArea.rows">
      <summary>
            The Rows displayed
            </summary>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSTextArea.#ctor(System.String,System.String,System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
      <summary>
            Constructs a new JSTextArea
            </summary>
      <param name="name">the name</param>
      <param name="value">the default value</param>
      <param name="cols">the columns displayed</param>
      <param name="rows">the rows displayed</param>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSTextArea.GetContent(LamestWebserver.SessionData,LamestWebserver.JScriptBuilder.CallingContext)">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.JScriptBuilder.JSDropDownMenu">
      <summary>
            A HTML Drop-Down-Menu Element
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSDropDownMenu.size">
      <summary>
            The amount of entries displayed if not expanded
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSDropDownMenu.multipleSelectable">
      <summary>
            does the dropdownmenu allow multiple selections?
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSDropDownMenu.disabled">
      <summary>
            is the dropdownmenu disabled for the user?
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSDropDownMenu.selectedIndexes">
      <summary>
            the selectedIndexes
            </summary>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSDropDownMenu.#ctor(System.String,System.Int32,System.Boolean,System.Tuple{System.String,System.String}[])">
      <summary>
            Constructs a new DropDownMenu element
            </summary>
      <param name="name">the name of the element (for forms)</param>
      <param name="size">The amount of entries displayed if not expanded</param>
      <param name="multipleSelectable">does the dropdownmenu allow multiple selections?</param>
      <param name="TextValuePairsToDisplay">All possibly selectable items as a tuple (Text displayed for the user, Value presented to form)</param>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSDropDownMenu.#ctor(System.String,System.Tuple{System.String,System.String}[])">
      <summary>
            Constructs a new DropDownMenu element
            </summary>
      <param name="name">the name of the element (for forms)</param>
      <param name="TextValuePairsToDisplay">All possibly selectable items as a tuple (Text displayed for the user, Value presented to form)</param>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSDropDownMenu.SelectByValue(System.String)">
      <summary>
            Selects an item based on the value given to it.
            Unselects everything else if !multipleSelectable.
            DOES NOT THROW AN EXCEPTION IF NO MATCHING INDEX HAS BEEN FOUND!
            </summary>
      <param name="value">the value to look for</param>
      <returns>this element for inline use.</returns>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSDropDownMenu.SelectByText(System.String)">
      <summary>
            Selects an item based on the text given to it.
            Unselects everything else if !multipleSelectable.
            DOES NOT THROW AN EXCEPTION IF NO MATCHING INDEX HAS BEEN FOUND!
            </summary>
      <param name="text">the text to look for</param>
      <returns>this element for inline use.</returns>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSDropDownMenu.GetContent(LamestWebserver.SessionData,LamestWebserver.JScriptBuilder.CallingContext)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSDropDownMenu.SendNameValueAsync(System.String)">
      <summary>
            Sends this elements name and value to a remote server.
            </summary>
      <param name="URL">the event to reach</param>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSDropDownMenu.SetInnerHTMLWithNameValueAsync(LamestWebserver.JScriptBuilder.IJSValue,System.String,LamestWebserver.JScriptBuilder.IJSPiece[])">
      <summary>
            Sends this elements name and value to a remote server and sets the response as InnerHtml of a HTML element.
            </summary>
      <param name="element">the element which innerHTML you want to override</param>
      <param name="URL">the event to reach</param>
      <param name="executeOnComplete">code to execute when the action is done</param>
    </member>
    <member name="T:LamestWebserver.JScriptBuilder.JSInteractableElement">
      <summary>
            See: http://www.w3schools.com/jsref/dom_obj_event.asp
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onclick">
      <summary>
            The event occurs when the user clicks on an element
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.oncontextmenu">
      <summary>
            The event occurs when the user right-clicks on an element to open a context menu
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.ondblclick">
      <summary>
            The event occurs when the user double-clicks on an element
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onmousedown">
      <summary>
            The event occurs when the user presses a mouse button over an element
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onmouseenter">
      <summary>
            The event occurs when the pointer is moved onto an element
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onmouseleave">
      <summary>
            The event occurs when the pointer is moved out of an element
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onmousemove">
      <summary>
            The event occurs when the pointer is moving while it is over an element
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onmouseover">
      <summary>
            The event occurs when the pointer is moved onto an element, or onto one of its children
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onmouseout">
      <summary>
            The event occurs when a user moves the mouse pointer out of an element, or out of one of its children
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onmouseup">
      <summary>
            The event occurs when a user releases a mouse button over an element
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onkeydown">
      <summary>
            The event occurs when the user is pressing a key
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onkeypress">
      <summary>
            The event occurs when the user presses a key
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onkeyup">
      <summary>
            The event occurs when the user releases a key
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onabort">
      <summary>
            The event occurs when the loading of a resource has been aborted
            The event occurs when the loading of a media is aborted
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onbeforeunload">
      <summary>
            The event occurs before the document is about to be unloaded
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onerror">
      <summary>
            The event occurs when an error occurs while loading an external file
            The event occurs when an error occurred during the loading of a media file
            The event occurs when an error occurs with the event source
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onhashchange">
      <summary>
            The event occurs when there has been changes to the anchor part of a URL
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onload">
      <summary>
            The event occurs when an object has loaded
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onpageshow">
      <summary>
            The event occurs when the user navigates to a webpage
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onpagehide">
      <summary>
            The event occurs when the user navigates away from a webpage
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onresize">
      <summary>
            The event occurs when the document view is resized
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onscroll">
      <summary>
            The event occurs when an element's scrollbar is being scrolled
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onunload">
      <summary>
            The event occurs once a page has unloaded (for body)
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onblur">
      <summary>
            The event occurs when an element loses focus
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onchange">
      <summary>
            The event occurs when the content of a form element, the selection, or the checked state have changed (for input, keygen, select, and textarea)
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onfocus">
      <summary>
            The event occurs when an element gets focus
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onfocusin">
      <summary>
            The event occurs when an element is about to get focus
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onfocusout">
      <summary>
            The event occurs when an element is about to lose focus
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.oninput">
      <summary>
            The event occurs when an element gets user input
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.oninvalid">
      <summary>
            The event occurs when an element is invalid
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onreset">
      <summary>
            The event occurs when a form is reset
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onsearch">
      <summary>
            The event occurs when the user writes something in a search field (for input="search")
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onselect">
      <summary>
            The event occurs after the user selects some text (for input and textarea)
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onsubmit">
      <summary>
            The event occurs when a form is submitted
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.ondrag">
      <summary>
            The event occurs when an element is being dragged
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.ondragend">
      <summary>
            The event occurs when the user has finished dragging an element
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.ondragenter">
      <summary>
            The event occurs when the dragged element enters the drop target
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.ondragleave">
      <summary>
            The event occurs when the dragged element leaves the drop target
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.ondragover">
      <summary>
            The event occurs when the dragged element is over the drop target
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.ondragstart">
      <summary>
            The event occurs when the user starts to drag an element
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.ondrop">
      <summary>
            The event occurs when the dragged element is dropped on the drop target
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.oncopy">
      <summary>
            The event occurs when the user copies the content of an element
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.oncut">
      <summary>
            The event occurs when the user cuts the content of an element
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onpaste">
      <summary>
            The event occurs when the user pastes some content in an element
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onafterprint">
      <summary>
            The event occurs when a page has started printing, or if the print dialogue box has been closed
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onbeforeprint">
      <summary>
            The event occurs when a page is about to be printed
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.oncanplay">
      <summary>
            The event occurs when the browser can start playing the media (when it has buffered enough to begin)
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.oncanplaythrough">
      <summary>
            The event occurs when the browser can play through the media without stopping for buffering
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.ondurationchange">
      <summary>
            The event occurs when the duration of the media is changed
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onemptied">
      <summary>
            The event occurs when something bad happens and the media file is suddenly unavailable (like unexpectedly disconnects)
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onended">
      <summary>
            The event occurs when the media has reach the end (useful for messages like "thanks for listening")
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onloadeddata">
      <summary>
            The event occurs when media data is loaded
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onloadedmetadata">
      <summary>
            The event occurs when meta data (like dimensions and duration) are loaded
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onloadstart">
      <summary>
            The event occurs when the browser starts looking for the specified media
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onpause">
      <summary>
            The event occurs when the media is paused either by the user or programmatically
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onplay">
      <summary>
            The event occurs when the media has been started or is no longer paused
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onplaying">
      <summary>
            The event occurs when the media is playing after having been paused or stopped for buffering
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onprogress">
      <summary>
            The event occurs when the browser is in the process of getting the media data (downloading the media)
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onratechange">
      <summary>
            The event occurs when the playing speed of the media is changed
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onseeked">
      <summary>
            The event occurs when the user is finished moving/skipping to a new position in the media
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onseeking">
      <summary>
            The event occurs when the user starts moving/skipping to a new position in the media
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onstalled">
      <summary>
            The event occurs when the browser is trying to get media data, but data is not available
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onsuspend">
      <summary>
            The event occurs when the browser is intentionally not getting media data
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.ontimeupdate">
      <summary>
            The event occurs when the playing position has changed (like when the user fast forwards to a different point in the media)
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onvolumechange">
      <summary>
            The event occurs when the volume of the media has changed (includes setting the volume to "mute")
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onwaiting">
      <summary>
            The event occurs when the media has paused but is expected to resume (like when the media pauses to buffer more data)
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.animationend">
      <summary>
            The event occurs when a CSS animation has completed
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.animationiteration">
      <summary>
            The event occurs when a CSS animation is repeated
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.animationstart">
      <summary>
            The event occurs when a CSS animation has started
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.transitionend">
      <summary>
            The event occurs when a CSS transition has completed
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onmessage">
      <summary>
            The event occurs when a message is received through the event source
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onopen">
      <summary>
            The event occurs when a connection with the event source is opened
            The event occurs when a message is received through or from an object (WebSocket, Web Worker, Event Source or a child frame or a parent window)
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onmousewheel">
      <summary>
            Deprecated. Use the onwheel event instead
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.ononline">
      <summary>
            The event occurs when the browser starts to work online
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onoffline">
      <summary>
            The event occurs when the browser starts to work offline
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onpopstate">
      <summary>
            The event occurs when the window's history changes
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onshow">
      <summary>
            The event occurs when a menu element is shown as a context menu
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onstorage">
      <summary>
            The event occurs when a Web Storage area is updated
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.ontoggle">
      <summary>
            The event occurs when the user opens or closes the details element
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.onwheel">
      <summary>
            The event occurs when the mouse wheel rolls up or down over an element
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.ontouchcancel">
      <summary>
            The event occurs when the touch is interrupted
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.ontouchend">
      <summary>
            The event occurs when a finger is removed from a touch screen
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.ontouchmove">
      <summary>
            The event occurs when a finger is dragged across the screen
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSInteractableElement.ontouchstart">
      <summary>
            The event occurs when a finger is placed on a touch screen
            </summary>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSInteractableElement.GetContent(LamestWebserver.SessionData,LamestWebserver.JScriptBuilder.CallingContext)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSInteractableElement.GetEventAttributes(LamestWebserver.SessionData,LamestWebserver.JScriptBuilder.CallingContext)">
      <summary>
            gets all event attributes for the given object
            </summary>
      <param name="sessionData">the sessionData</param>
      <param name="context">the current Calling Context</param>
      <returns>the event attributes as string</returns>
    </member>
    <member name="T:LamestWebserver.JScriptBuilder.JSAnimation">
      <summary>
            Contains basic functionality for Animating Elements
            </summary>
    </member>
    <member name="T:LamestWebserver.JScriptBuilder.JSAnimation.JSAnimationType">
      <summary>
            Various types of animation types
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSAnimation.JSAnimationType.Linear">
      <summary>
            linear function - constant speed
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSAnimation.JSAnimationType.Differencial">
      <summary>
            Differencial function - decreasing speed
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSAnimation.JSAnimationType.Quadreatic">
      <summary>
            Quadratic function - increasing speed
            </summary>
    </member>
    <member name="T:LamestWebserver.JScriptBuilder.JSAnimation.JSAxis">
      <summary>
            Axis at which the animation is applied
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSAnimation.JSAxis.X">
      <summary>
            X Axis
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSAnimation.JSAxis.Y">
      <summary>
            Y Axis
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSAnimation.JSAxis.Both">
      <summary>
            Both Axis
            </summary>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSAnimation.ResizeElementToFit(LamestWebserver.JScriptBuilder.IJSValue,System.Int32,LamestWebserver.JScriptBuilder.IJSPiece[])">
      <summary>
            Resizes an element until it fits the contents inside.
            </summary>
      <param name="element">the element</param>
      <param name="speedFactor">the speed factor of the animation</param>
      <param name="executeOnComplete">the code to execute when the animation finished</param>
      <returns>the animation as functioncall</returns>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSAnimation.DecreaseElementToZero(LamestWebserver.JScriptBuilder.IJSValue,System.Int32,LamestWebserver.JScriptBuilder.IJSPiece[])">
      <summary>
            Resizes an element until it's size in the given axis is zero
            </summary>
      <param name="element">the element</param>
      <param name="speedFactor">the speed factor of the animation</param>
      <param name="executeOnComplete">the code to execute when the animation finished</param>
      <returns>the animation as functioncall</returns>
    </member>
    <member name="T:LamestWebserver.JScriptBuilder.JScript">
      <summary>
            A batch of javascript code pieces
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JScript.pieces">
      <summary>
            The contained javascript code pieces
            </summary>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JScript.#ctor">
      <summary>
            Constructs an empty JScript
            </summary>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JScript.#ctor(LamestWebserver.JScriptBuilder.IJSPiece[])">
      <summary>
            Constructs a JScript containing the given code pieces
            </summary>
      <param name="pieces">the contained code pieces</param>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JScript.#ctor(System.Collections.Generic.List{LamestWebserver.JScriptBuilder.IJSPiece})">
      <summary>
            Constructs a JScript containing the given code pieces
            </summary>
      <param name="pieces">the contained code pieces</param>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JScript.AppendCode(LamestWebserver.JScriptBuilder.IJSPiece)">
      <summary>
            Appends a given piece of code to the Script
            </summary>
      <param name="piece">the piece of code to add</param>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JScript.AppendCodePieces(LamestWebserver.JScriptBuilder.IJSPiece[])">
      <summary>
            Appends a given piece of code to the Script
            </summary>
      <param name="piecesToAdd">the pieces of code to add</param>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JScript.GetJsCode(LamestWebserver.SessionData,LamestWebserver.JScriptBuilder.CallingContext)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JScript.ToString">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.JScriptBuilder.JSMaster">
      <summary>
            Contains Features for JavaScript parsing
            </summary>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSMaster.JSEncode(System.String)">
      <summary>
            Encodes the given string to a JavaScript inner String
            </summary>
      <param name="input">the given string</param>
      <returns>the encoded string</returns>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSMaster.Base64Encode(System.String)">
      <summary>
            Returns a piece of JavaScript code to decode this string as Base64 back to normal text
            </summary>
      <param name="input">the given input</param>
      <returns>A piece of JavaScript code</returns>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSMaster.EvalBase64(System.String)">
      <summary>
            Returns a piece of JavaScript code decoding and executing the given string as base64
            </summary>
      <param name="input">the given code to encode</param>
      <returns>A piece of JavaScript code</returns>
    </member>
    <member name="T:LamestWebserver.JScriptBuilder.CallingContext">
      <summary>
            The context in which this piece of code will be executed.
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.CallingContext.Default">
      <summary>
            The Default Calling Context: End command with Semicolon
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.CallingContext.Inner">
      <summary>
            Inside a Call - Don't end command with Semicolon 
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.CallingContext.NoSemicolon">
      <summary>
            Don't end command with a Semicolon
            </summary>
    </member>
    <member name="T:LamestWebserver.JScriptBuilder.IJSPiece">
      <summary>
            Some kind of JavaScript code
            </summary>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.IJSPiece.GetJsCode(LamestWebserver.SessionData,LamestWebserver.JScriptBuilder.CallingContext)">
      <summary>
            Retrieves the JavaScript code for this Element
            </summary>
      <param name="sessionData">the current sessionData</param>
      <param name="context">the current context. Default: CallingContext.Default</param>
      <returns>the JavaScript code as string</returns>
    </member>
    <member name="T:LamestWebserver.JScriptBuilder.JSFunction">
      <summary>
            A JavaScript function definition
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSFunction.pieces">
      <summary>
            The pieces of code to execute
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSFunction.parameters">
      <summary>
            the parameters to feed to this function
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSFunction._content">
      <summary>
            The name of this Function
            </summary>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSFunction.#ctor(System.String,System.Collections.Generic.List{LamestWebserver.JScriptBuilder.IJSValue})">
      <summary>
            Constructs a new JSFunction
            </summary>
      <param name="name">the name of the function</param>
      <param name="parameters">the parameters of the Function Definition</param>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSFunction.#ctor(System.Collections.Generic.List{LamestWebserver.JScriptBuilder.IJSValue})">
      <summary>
            Constructs a new JSFunction
            </summary>
      <param name="parameters">the parameters of the Function Definition</param>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSFunction.#ctor(LamestWebserver.JScriptBuilder.IJSValue[])">
      <summary>
            Constructs a new JSFunction
            </summary>
      <param name="parameters">the parameters of the Function Definition</param>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSFunction.#ctor(System.String)">
      <summary>
            Constructs a new JSFunction
            </summary>
      <param name="name">the name of the function</param>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSFunction.#ctor">
      <summary>
            Constructs a new empty JSFunction
            </summary>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSFunction.AppendCode(LamestWebserver.JScriptBuilder.IJSPiece)">
      <summary>
            Adds a given piece of JavaScript code to this function.
            </summary>
      <param name="piece">the piece to add</param>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSFunction.AppendCodePieces(LamestWebserver.JScriptBuilder.IJSPiece[])">
      <summary>
            Adds a bunch of given pieces of JavaScript code to this function.
            </summary>
      <param name="piecesToAdd">the pieces to add</param>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSFunction.Set(LamestWebserver.JScriptBuilder.IJSValue)">
      <summary>
            You can't set a function.
            </summary>
      <param name="value">the value to set this value to</param>
      <returns>throws an Exception, because you cannot set a Function</returns>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSFunction.GetJsCode(LamestWebserver.SessionData,LamestWebserver.JScriptBuilder.CallingContext)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSFunction.callFunction(LamestWebserver.JScriptBuilder.IJSValue[])">
      <summary>
            Calls the given Function
            </summary>
      <param name="values">the parameters to input in to this call</param>
      <returns>A piece of JavaScript code</returns>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSFunction.DefineAndCall">
      <summary>
            Defines and Calls this Function at the same time.
            </summary>
      <returns>A piece of JavaScript code</returns>
    </member>
    <member name="P:LamestWebserver.JScriptBuilder.JSFunction.Content">
      <summary>
            The name of this Function
            </summary>
    </member>
    <member name="P:LamestWebserver.JScriptBuilder.JSFunction.FunctionPointer">
      <summary>
            The name of this Function as JSValue
            </summary>
    </member>
    <member name="P:LamestWebserver.JScriptBuilder.JSFunction.Item(LamestWebserver.JScriptBuilder.IJSValue[])">
      <summary>
            Calls the Function with the given parameters
            </summary>
      <param name="values">the values to call the function with</param>
      <returns>A piece of JavaScript code</returns>
    </member>
    <member name="T:LamestWebserver.JScriptBuilder.JSDirectFunctionCall">
      <summary>
            A JSDirectFunctionCall defines and calls a function at the same time.
            </summary>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSDirectFunctionCall.#ctor(LamestWebserver.JScriptBuilder.JSFunction)">
      <summary>
            Constructs a new JSDirectFunctionCall from a given Function
            </summary>
      <param name="function">the function to define and execute</param>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSDirectFunctionCall.Set(LamestWebserver.JScriptBuilder.IJSValue)">
      <summary>
            Sets the result of this FunctionCall to a Value
            </summary>
      <param name="value">the value to set to</param>
      <returns>A piece of JavaScript code</returns>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSDirectFunctionCall.GetJsCode(LamestWebserver.SessionData,LamestWebserver.JScriptBuilder.CallingContext)">
      <inheritdoc />
    </member>
    <member name="P:LamestWebserver.JScriptBuilder.JSDirectFunctionCall.Content">
      <summary>
            The name of the given function.
            </summary>
    </member>
    <member name="T:LamestWebserver.JScriptBuilder.JSInstantFunction">
      <summary>
            A JSInstant functino is a quick way to generate an anonymus Function executing some code.
            </summary>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSInstantFunction.#ctor(LamestWebserver.JScriptBuilder.IJSPiece[])">
      <summary>
            Constructs a new Function containing the given code
            </summary>
      <param name="pieces">the code to execute on execution</param>
    </member>
    <member name="T:LamestWebserver.JScriptBuilder.IJSValue">
      <summary>
            A Value in JavaScript code
            </summary>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.IJSValue.Set(LamestWebserver.JScriptBuilder.IJSValue)">
      <summary>
            A way to quickly set this Value.
            </summary>
      <param name="value">the value to set this element to</param>
      <returns>A piece of JavaScript code</returns>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.IJSValue.IsEqualTo(LamestWebserver.JScriptBuilder.IJSValue)">
      <summary>
            A way to quickly compare two values in JavaScript on Equality
            </summary>
      <param name="value">the value to compare to</param>
      <returns>A piece of JavaScript code</returns>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.IJSValue.IsNotEqualTo(LamestWebserver.JScriptBuilder.IJSValue)">
      <summary>
            A way to quickly compare two values in JavaScript on Nonequality
            </summary>
      <param name="value">the value to compare to</param>
      <returns>A piece of JavaScript code</returns>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.IJSValue.GetJsCode(LamestWebserver.SessionData,LamestWebserver.JScriptBuilder.CallingContext)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.IJSValue.op_Addition(LamestWebserver.JScriptBuilder.IJSValue,LamestWebserver.JScriptBuilder.IJSValue)">
      <summary>
            Adds two Values
            </summary>
      <param name="a">value a</param>
      <param name="b">value b</param>
      <returns>A piece of JavaScript code</returns>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.IJSValue.op_Subtraction(LamestWebserver.JScriptBuilder.IJSValue,LamestWebserver.JScriptBuilder.IJSValue)">
      <summary>
            Subtracts two Values
            </summary>
      <param name="a">value a</param>
      <param name="b">value b</param>
      <returns>A piece of JavaScript code</returns>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.IJSValue.op_Multiply(LamestWebserver.JScriptBuilder.IJSValue,LamestWebserver.JScriptBuilder.IJSValue)">
      <summary>
            Multiplies two Values
            </summary>
      <param name="a">value a</param>
      <param name="b">value b</param>
      <returns>A piece of JavaScript code</returns>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.IJSValue.op_Division(LamestWebserver.JScriptBuilder.IJSValue,LamestWebserver.JScriptBuilder.IJSValue)">
      <summary>
            Divides two Values
            </summary>
      <param name="a">value a</param>
      <param name="b">value b</param>
      <returns>A piece of JavaScript code</returns>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.IJSValue.op_LessThan(LamestWebserver.JScriptBuilder.IJSValue,LamestWebserver.JScriptBuilder.IJSValue)">
      <summary>
            Compares two Values
            </summary>
      <param name="a">value a</param>
      <param name="b">value b</param>
      <returns>A piece of JavaScript code</returns>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.IJSValue.op_GreaterThan(LamestWebserver.JScriptBuilder.IJSValue,LamestWebserver.JScriptBuilder.IJSValue)">
      <summary>
            Compares two Values
            </summary>
      <param name="a">value a</param>
      <param name="b">value b</param>
      <returns>A piece of JavaScript code</returns>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.IJSValue.op_LessThanOrEqual(LamestWebserver.JScriptBuilder.IJSValue,LamestWebserver.JScriptBuilder.IJSValue)">
      <summary>
            Compares two Values
            </summary>
      <param name="a">value a</param>
      <param name="b">value b</param>
      <returns>A piece of JavaScript code</returns>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.IJSValue.op_GreaterThanOrEqual(LamestWebserver.JScriptBuilder.IJSValue,LamestWebserver.JScriptBuilder.IJSValue)">
      <summary>
            Compares two Values
            </summary>
      <param name="a">value a</param>
      <param name="b">value b</param>
      <returns>A piece of JavaScript code</returns>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.IJSValue.op_Addition(System.String,LamestWebserver.JScriptBuilder.IJSValue)">
      <summary>
            Adds this Value to a StringValue
            </summary>
      <param name="a">value a</param>
      <param name="b">value b</param>
      <returns>A piece of JavaScript code</returns>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.IJSValue.op_Addition(LamestWebserver.JScriptBuilder.IJSValue,System.String)">
      <summary>
            Adds a StringVaue to this Value
            </summary>
      <param name="a">value a</param>
      <param name="b">value b</param>
      <returns>A piece of JavaScript code</returns>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.IJSValue.op_Implicit(LamestWebserver.UI.HElement)~LamestWebserver.JScriptBuilder.IJSValue">
      <summary>
            Casts an HElement to a JSValue
            </summary>
      <param name="element">the HElement</param>
    </member>
    <member name="P:LamestWebserver.JScriptBuilder.IJSValue.Content">
      <summary>
            The name of the Value
            </summary>
    </member>
    <member name="T:LamestWebserver.JScriptBuilder.JSOperator">
      <summary>
            Performs operations on IJSValues
            </summary>
    </member>
    <member name="T:LamestWebserver.JScriptBuilder.JSOperator.JSOperatorType">
      <summary>
            The Types of Operators supported in JSOperator
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSOperator.JSOperatorType.Add">
      <summary>
            Addition
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSOperator.JSOperatorType.Subtract">
      <summary>
            Subtraction
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSOperator.JSOperatorType.Multiply">
      <summary>
            Multiplication
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSOperator.JSOperatorType.Divide">
      <summary>
            Division
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSOperator.JSOperatorType.Set">
      <summary>
            Setting to a Value
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSOperator.JSOperatorType.Equals">
      <summary>
            Equality-Comparison
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSOperator.JSOperatorType.Greater">
      <summary>
            Greater than
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSOperator.JSOperatorType.Less">
      <summary>
            Less than
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSOperator.JSOperatorType.GreaterOrEqual">
      <summary>
            Greater or Equal than
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSOperator.JSOperatorType.LessOrEqual">
      <summary>
            Less or Equal than
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSOperator.JSOperatorType.NotEquals">
      <summary>
            Not Equal to Value
            </summary>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSOperator.#ctor(LamestWebserver.JScriptBuilder.JSOperator.JSOperatorType,LamestWebserver.JScriptBuilder.IJSValue,LamestWebserver.JScriptBuilder.IJSValue)">
      <summary>
            Constructs a new Operation
            </summary>
      <param name="operatorType">the operator</param>
      <param name="a">first parameter</param>
      <param name="b">second parameter</param>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSOperator.Set(LamestWebserver.JScriptBuilder.IJSValue)">
      <summary>
            Sets the resulting value of this operation to a specified value.
            Please make sure, that you really want to do this.
            </summary>
      <param name="value">the value to set to</param>
      <returns>A piece of JavaScript code</returns>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSOperator.GetJsCode(LamestWebserver.SessionData,LamestWebserver.JScriptBuilder.CallingContext)">
      <inheritdoc />
    </member>
    <member name="P:LamestWebserver.JScriptBuilder.JSOperator.Content">
      <summary>
            Returns the value of this Operation
            </summary>
    </member>
    <member name="T:LamestWebserver.JScriptBuilder.JSStringValue">
      <summary>
            A String literal Value in JavaScript
            </summary>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSStringValue.#ctor(System.String)">
      <summary>
            Constructs a new JSStringValue of a given string
            </summary>
      <param name="value">the string to set this value to</param>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSStringValue.GetJsCode(LamestWebserver.SessionData,LamestWebserver.JScriptBuilder.CallingContext)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSStringValue.op_Implicit(System.String)~LamestWebserver.JScriptBuilder.JSStringValue">
      <summary>
            Casts a string to a JSStringValue
            </summary>
      <param name="value">the string being casted</param>
      <returns>the string as JSStringValue</returns>
    </member>
    <member name="P:LamestWebserver.JScriptBuilder.JSStringValue.Content">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.JScriptBuilder.JSRawStringValue">
      <summary>
            A String literal Value in JavaScript without any processing to the string (other than '"' to '"').
            </summary>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSRawStringValue.#ctor(System.String)">
      <summary>
            Constructs a new JSRawStringValue of a given string
            </summary>
      <param name="value">the string to set this value to</param>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSRawStringValue.GetJsCode(LamestWebserver.SessionData,LamestWebserver.JScriptBuilder.CallingContext)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSRawStringValue.op_Implicit(System.String)~LamestWebserver.JScriptBuilder.JSRawStringValue">
      <summary>
            Casts a string to a JSRawStringValue
            </summary>
      <param name="value">the string being casted</param>
      <returns>the string as JSRawStringValue</returns>
    </member>
    <member name="P:LamestWebserver.JScriptBuilder.JSRawStringValue.Content">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.JScriptBuilder.JSUnmaskedStringValue">
      <summary>
            Represents an already masked string value. A JSUnmaskedStringValue will not be encoded when processing.
            </summary>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSUnmaskedStringValue.#ctor(System.String)">
      <summary>
            Constructs a new JSUnmaskedStringValue.
            </summary>
      <param name="value">
      </param>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSUnmaskedStringValue.GetJsCode(LamestWebserver.SessionData,LamestWebserver.JScriptBuilder.CallingContext)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSUnmaskedStringValue.op_Implicit(System.String)~LamestWebserver.JScriptBuilder.JSUnmaskedStringValue">
      <summary>
            Casts a string to a JSUnmaskedStringValue
            </summary>
      <param name="value">the string being casted</param>
      <returns>the string as JSUnmaskedStringValue</returns>
    </member>
    <member name="T:LamestWebserver.JScriptBuilder.JSValue">
      <summary>
            A JavaScript value
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSValue._content">
      <summary>
            The content of the Value
            </summary>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSValue.#ctor(System.Object)">
      <summary>
            Constructs a new JSValue from an Object. ToString will be Called.
            </summary>
      <param name="content">the object to read from</param>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSValue.#ctor(System.String)">
      <summary>
            Constructs a new JSValue from a string. If you want a string literal, use JSStringValue instead.
            </summary>
      <param name="content">the content of this value</param>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSValue.#ctor(System.Int32)">
      <summary>
            Constructs a new JSValue from an integer
            </summary>
      <param name="content">the content of this value</param>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSValue.#ctor(System.Boolean)">
      <summary>
            Constructs a new JSValue from a boolean value
            </summary>
      <param name="content">the content of this value</param>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSValue.#ctor(System.Double)">
      <summary>
            Constructs a new JSValue from a double
            </summary>
      <param name="content">the content of this value</param>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSValue.GetJsCode(LamestWebserver.SessionData,LamestWebserver.JScriptBuilder.CallingContext)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSValue.Set(LamestWebserver.JScriptBuilder.IJSValue)">
      <inheritdoc />
    </member>
    <member name="P:LamestWebserver.JScriptBuilder.JSValue.Content">
      <summary>
            Retrieves the Value
            </summary>
    </member>
    <member name="P:LamestWebserver.JScriptBuilder.JSValue.CurrentBrowserURL">
      <summary>
            Returns the current browser URL (window.location)
            </summary>
    </member>
    <member name="T:LamestWebserver.JScriptBuilder.JSVariable">
      <summary>
            A JavaScript variable
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSVariable._content">
      <summary>
            The name of this Variable
            </summary>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSVariable.#ctor(System.String)">
      <summary>
            Constructs a new JSVariable
            </summary>
      <param name="name">the name of the variable</param>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSVariable.Set(LamestWebserver.JScriptBuilder.IJSValue)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSVariable.IsEqualTo(LamestWebserver.JScriptBuilder.IJSValue)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSVariable.IsNotEqualTo(LamestWebserver.JScriptBuilder.IJSValue)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSVariable.GetJsCode(LamestWebserver.SessionData,LamestWebserver.JScriptBuilder.CallingContext)">
      <inheritdoc />
    </member>
    <member name="P:LamestWebserver.JScriptBuilder.JSVariable.Content">
      <summary>
            The name of this Variable
            </summary>
    </member>
    <member name="P:LamestWebserver.JScriptBuilder.JSVariable.Name">
      <summary>
            Retrieves the name of the JSVariable as JSValue.
            </summary>
    </member>
    <member name="T:LamestWebserver.JScriptBuilder.JSFunctionCall">
      <summary>
            A JavaScript Function call
            </summary>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSFunctionCall.#ctor(System.String,LamestWebserver.JScriptBuilder.IJSValue[])">
      <summary>
            Constructs a new JavaScript functionCall
            </summary>
      <param name="methodName">the name of the Function</param>
      <param name="parameters">the parameters of the Function</param>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSFunctionCall.Set(LamestWebserver.JScriptBuilder.IJSValue)">
      <summary>
            Sets the resulting object to a value
            </summary>
      <param name="value">hte value to set to</param>
      <returns>A piece of JavaScript code</returns>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSFunctionCall.GetJsCode(LamestWebserver.SessionData,LamestWebserver.JScriptBuilder.CallingContext)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSFunctionCall.SetInterval(LamestWebserver.JScriptBuilder.JSFunction,System.Int32)">
      <summary>
            Returns and starts an interval in which a function is called
            </summary>
      <param name="function">The function to start</param>
      <param name="milliseconds">The TimeSpan in Milliseconds at which the Function will be called</param>
      <returns>A piece of JavaScript code</returns>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSFunctionCall.ClearInterval(LamestWebserver.JScriptBuilder.JSVariable)">
      <summary>
            Stops an interval.
            </summary>
      <param name="variable">The Variable the Interval has been stored in</param>
      <returns>A piece of JavaScript code</returns>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSFunctionCall.SetInnerHTMLAsync(LamestWebserver.JScriptBuilder.IJSValue,System.String,LamestWebserver.JScriptBuilder.IJSPiece[])">
      <summary>
            Sets the innerHTML of an Element to the contents of a predefinded URL
            </summary>
      <param name="value">the element to set the new content to</param>
      <param name="URL">the URL where the new contents come from</param>
      <param name="executeOnComplete">the code to execute when the task has been completed</param>
      <returns>A piece of JavaScript code</returns>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSFunctionCall.SetOuterHTMLAsync(LamestWebserver.JScriptBuilder.IJSValue,System.String,LamestWebserver.JScriptBuilder.IJSPiece[])">
      <summary>
            Sets the outerHTML of an Element to the contents of a predefinded URL
            </summary>
      <param name="value">the element to set the new content to</param>
      <param name="URL">the URL where the new contents come from</param>
      <param name="executeOnComplete">the code to execute when the task has been completed</param>
      <returns>A piece of JavaScript code</returns>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSFunctionCall.EncodeURIComponent(LamestWebserver.JScriptBuilder.IJSValue)">
      <summary>
            Encodes a URI component to a formatted string.
            </summary>
      <param name="value">the value to encode</param>
      <returns>A piece of JavaScript code</returns>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSFunctionCall.NotifyAsync(System.String)">
      <summary>
            Requests a page from the predefinded URL. This can be used as Notification to the Server without any response.
            </summary>
      <param name="URL">The URL to request</param>
      <returns>A piece of JavaScript code</returns>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSFunctionCall.HideElementByID(System.String)">
      <summary>
            Hides a specified element.
            </summary>
      <param name="id">the id of the element</param>
      <returns>A piece of JavaScript code</returns>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSFunctionCall.DisplayElementByID(System.String)">
      <summary>
            Shows a specified element. (Sets it's display style to Block)
            </summary>
      <param name="id">the id of the element</param>
      <returns>A piece of JavaScript code</returns>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSFunctionCall.RemoveElementByID(System.String)">
      <summary>
            Removes a specified element from the current document.
            </summary>
      <param name="id">the id of the element</param>
      <returns>A piece of JavaScript code</returns>
    </member>
    <member name="P:LamestWebserver.JScriptBuilder.JSFunctionCall.Content">
      <summary>
            The name of the Method to call
            </summary>
    </member>
    <member name="T:LamestWebserver.JScriptBuilder.JSElementValue">
      <summary>
            A JavaScript Value of Type Element (representing a HTML Element)
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSElementValue._content">
      <summary>
            The Name of this Element or the Function retrieving it
            </summary>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSElementValue.#ctor(LamestWebserver.JScriptBuilder.IJSValue)">
      <summary>
            Constructs a new JSElementValue from a Value
            </summary>
      <param name="value">the value</param>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSElementValue.#ctor(System.String)">
      <summary>
            Constructs a new JSElementValue from a string
            </summary>
      <param name="value">the value</param>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSElementValue.GetJsCode(LamestWebserver.SessionData,LamestWebserver.JScriptBuilder.CallingContext)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSElementValue.Set(LamestWebserver.JScriptBuilder.IJSValue)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSElementValue.CustomParameter(System.String)">
      <summary>
            A custom attribute of this Element
            </summary>
    </member>
    <member name="P:LamestWebserver.JScriptBuilder.JSElementValue.Content">
      <summary>
            The Name of this Element or the Function retrieving it
            </summary>
    </member>
    <member name="P:LamestWebserver.JScriptBuilder.JSElementValue.InnerHTML">
      <summary>
            The 'innerHTML' attribute of this Element
            </summary>
    </member>
    <member name="P:LamestWebserver.JScriptBuilder.JSElementValue.InnerText">
      <summary>
            The 'innerText' attribute of this Element
            </summary>
    </member>
    <member name="P:LamestWebserver.JScriptBuilder.JSElementValue.Value">
      <summary>
            The 'value' attribute of this Element
            </summary>
    </member>
    <member name="P:LamestWebserver.JScriptBuilder.JSElementValue.Name">
      <summary>
            The 'name' attribute of this Element
            </summary>
    </member>
    <member name="P:LamestWebserver.JScriptBuilder.JSElementValue.ID">
      <summary>
            The 'id' attribute of this Element
            </summary>
    </member>
    <member name="P:LamestWebserver.JScriptBuilder.JSElementValue.Checked">
      <summary>
            The 'checked' attribute of this Element
            </summary>
    </member>
    <member name="P:LamestWebserver.JScriptBuilder.JSElementValue.ClassName">
      <summary>
            The 'className' attribute of this Element
            </summary>
    </member>
    <member name="P:LamestWebserver.JScriptBuilder.JSElementValue.OuterHTML">
      <summary>
            The 'outerHTML' attribute of this Element
            </summary>
    </member>
    <member name="P:LamestWebserver.JScriptBuilder.JSElementValue.OuterText">
      <summary>
            The 'outerText' attribute of this Element
            </summary>
    </member>
    <member name="P:LamestWebserver.JScriptBuilder.JSElementValue.FirstSelected">
      <summary>
            The 'selectedOptions[0].value' attribute of this Element
            </summary>
    </member>
    <member name="P:LamestWebserver.JScriptBuilder.JSElementValue.Show">
      <summary>
            Displays (display = 'block') this Element
            </summary>
    </member>
    <member name="P:LamestWebserver.JScriptBuilder.JSElementValue.Hide">
      <summary>
            Hides (display = 'none') this Element
            </summary>
    </member>
    <member name="P:LamestWebserver.JScriptBuilder.JSElementValue.Delete">
      <summary>
            Removes this Element from the page
            </summary>
    </member>
    <member name="P:LamestWebserver.JScriptBuilder.JSElementValue.Item(System.String)">
      <summary>
            A custom attribute of this Element
            </summary>
    </member>
    <member name="T:LamestWebserver.JScriptBuilder.JSIf">
      <summary>
            A JavaScript If-Statement
            </summary>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSIf.#ctor(LamestWebserver.JScriptBuilder.IJSValue,LamestWebserver.JScriptBuilder.IJSPiece[])">
      <summary>
            Constructs an If-Statement from a boolean Expression and the executed Code if true
            </summary>
      <param name="booleanExpression">the boolean Expression that has to be true to execute the code</param>
      <param name="code">the code that is executed if the boolean Expression is true</param>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSIf.GetJsCode(LamestWebserver.SessionData,LamestWebserver.JScriptBuilder.CallingContext)">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.JScriptBuilder.JSSwitch">
      <summary>
            A JavaScript Switch(-Case) Statement
            </summary>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSSwitch.#ctor(LamestWebserver.JScriptBuilder.JSValue)">
      <summary>
            Creates a new JSSwitch Object
            </summary>
      <param name="switchValue">the value to check cases for</param>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSSwitch.#ctor(LamestWebserver.JScriptBuilder.JSValue,LamestWebserver.JScriptBuilder.IJSPiece)">
      <summary>
            Creates a new JSSwitch Object
            </summary>
      <param name="switchValue">the value to check cases for</param>
      <param name="defaultCase">how to perform in the default case</param>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSSwitch.#ctor(LamestWebserver.JScriptBuilder.JSValue,LamestWebserver.JScriptBuilder.IJSPiece,System.Tuple{LamestWebserver.JScriptBuilder.IJSValue,LamestWebserver.JScriptBuilder.IJSPiece}[])">
      <summary>
            Creates a new JSSwitch Object
            </summary>
      <param name="switchValue">the value to check cases for</param>
      <param name="defaultCase">how to perform in the default case</param>
      <param name="cases">how to perform for certain values</param>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSSwitch.#ctor(LamestWebserver.JScriptBuilder.JSValue,System.Tuple{LamestWebserver.JScriptBuilder.IJSValue,LamestWebserver.JScriptBuilder.IJSPiece}[])">
      <summary>
            Creates a new JSSwitch Object
            </summary>
      <param name="switchValue">the value to check cases for</param>
      <param name="cases">how to perform for certain values</param>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSSwitch.AddCase(LamestWebserver.JScriptBuilder.IJSValue,LamestWebserver.JScriptBuilder.IJSPiece)">
      <summary>
            Adds a case to the switch-case block.
            </summary>
      <param name="value">the value of the case</param>
      <param name="code">the code to execute in this case</param>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSSwitch.GetJsCode(LamestWebserver.SessionData,LamestWebserver.JScriptBuilder.CallingContext)">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.JScriptBuilder.JSElseIf">
      <summary>
            A JavaScript Else-If-Statement
            </summary>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSElseIf.#ctor(LamestWebserver.JScriptBuilder.IJSValue,LamestWebserver.JScriptBuilder.IJSPiece[])">
      <summary>
            Constructs an Else-If-Statement from a boolean Expression and the executed Code if true
            </summary>
      <param name="booleanExpression">the boolean Expression that has to be true to execute the code</param>
      <param name="code">the code that is executed if the boolean Expression is true</param>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSElseIf.GetJsCode(LamestWebserver.SessionData,LamestWebserver.JScriptBuilder.CallingContext)">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.JScriptBuilder.JSElse">
      <summary>
            A JavaScript Else-Statement
            </summary>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSElse.#ctor(LamestWebserver.JScriptBuilder.IJSPiece[])">
      <summary>
            Constructs an Else-Statement from  the executed Code if true
            </summary>
      <param name="code">the code that is executed</param>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSElse.GetJsCode(LamestWebserver.SessionData,LamestWebserver.JScriptBuilder.CallingContext)">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.JScriptBuilder.JSInlineIf">
      <summary>
            A JavaScript inline If-Statement
            </summary>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSInlineIf.#ctor(LamestWebserver.JScriptBuilder.IJSValue,LamestWebserver.JScriptBuilder.IJSValue,LamestWebserver.JScriptBuilder.IJSValue)">
      <summary>
            Constructs an Inline-If-Statement from a boolean Expression and the Values if true and if false
            </summary>
      <param name="booleanExpression">the boolean Expression</param>
      <param name="ifTrue">the value if true</param>
      <param name="ifFalse">the value if false</param>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSInlineIf.GetJsCode(LamestWebserver.SessionData,LamestWebserver.JScriptBuilder.CallingContext)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSInlineIf.Set(LamestWebserver.JScriptBuilder.IJSValue)">
      <inheritdoc />
    </member>
    <member name="P:LamestWebserver.JScriptBuilder.JSInlineIf.Content">
      <summary>
            Retrieves the whole Inline-If-Statement
            </summary>
    </member>
    <member name="T:LamestWebserver.JScriptBuilder.JSWhileLoop">
      <summary>
            A JavaScript While-Loop
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSWhileLoop.Pieces">
      <summary>
            The code in this Loop
            </summary>
    </member>
    <member name="F:LamestWebserver.JScriptBuilder.JSWhileLoop.BooleanExpression">
      <summary>
            The boolean expression for this Loop
            </summary>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSWhileLoop.#ctor(LamestWebserver.JScriptBuilder.IJSValue,LamestWebserver.JScriptBuilder.IJSPiece[])">
      <summary>
            Constructs a new JSWhileLoop
            </summary>
      <param name="booleanExpression">the boolean Expression that has to be true</param>
      <param name="code">the code to execute while the expression is true</param>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSWhileLoop.GetJsCode(LamestWebserver.SessionData,LamestWebserver.JScriptBuilder.CallingContext)">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.JScriptBuilder.JSDoWhileLoop">
      <summary>
            A JavaScript Do-While-Loop
            </summary>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSDoWhileLoop.#ctor(LamestWebserver.JScriptBuilder.IJSValue,LamestWebserver.JScriptBuilder.IJSPiece[])">
      <summary>
            Constructs a new Do-While-Loop
            </summary>
      <param name="booleanExpression">the expression that has to be true to repeat the loop</param>
      <param name="code">the code to execute in the loop</param>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSDoWhileLoop.GetJsCode(LamestWebserver.SessionData,LamestWebserver.JScriptBuilder.CallingContext)">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.JScriptBuilder.JSForLoop">
      <summary>
            A JavaScript For-Loop
            </summary>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSForLoop.#ctor(LamestWebserver.JScriptBuilder.IJSValue,LamestWebserver.JScriptBuilder.IJSPiece[])">
      <summary>
            Constructs a For-Loop iterating from Zero to the specified endValue
            </summary>
      <param name="endValue">the End-Value</param>
      <param name="code">the code to execute</param>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSForLoop.#ctor(LamestWebserver.JScriptBuilder.JSVariable,LamestWebserver.JScriptBuilder.IJSValue,LamestWebserver.JScriptBuilder.IJSPiece[])">
      <summary>
            Constructs a For-Loop iterating a Variable from Zero to the specified endValue
            </summary>
      <param name="variable">the Variable to iterate</param>
      <param name="endValue">the End-Value</param>
      <param name="code">the code to execute</param>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSForLoop.#ctor(LamestWebserver.JScriptBuilder.JSVariable,LamestWebserver.JScriptBuilder.IJSValue,LamestWebserver.JScriptBuilder.IJSValue,LamestWebserver.JScriptBuilder.IJSPiece[])">
      <summary>
            Constructs a For-Loop iterating a Variable from the specified startValue to the specified endValue
            </summary>
      <param name="variable">the Variable to iterate</param>
      <param name="startValue">the Start-Value</param>
      <param name="endValue">the End-Value</param>
      <param name="code">the code to execute</param>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSForLoop.#ctor(LamestWebserver.JScriptBuilder.JSVariable,LamestWebserver.JScriptBuilder.IJSValue,LamestWebserver.JScriptBuilder.IJSValue,LamestWebserver.JScriptBuilder.JSOperator.JSOperatorType,LamestWebserver.JScriptBuilder.IJSPiece,LamestWebserver.JScriptBuilder.IJSPiece[])">
      <summary>
            Constructs a For-Loop iterating a Variable from the specified startValue as long as the variable is within a certain relation with the endValue executing the given operation each step.
            </summary>
      <param name="variable">the Variable to iterate</param>
      <param name="startValue">the Start-Value</param>
      <param name="endValue">the End-Value</param>
      <param name="_operator">the relation the endValue stands in with the variable</param>
      <param name="stepOperation">the operation to execute each iteration</param>
      <param name="code">the code to execute</param>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSForLoop.#ctor(LamestWebserver.JScriptBuilder.JSVariable,LamestWebserver.JScriptBuilder.IJSValue,LamestWebserver.JScriptBuilder.IJSValue,LamestWebserver.JScriptBuilder.IJSPiece,LamestWebserver.JScriptBuilder.IJSPiece[])">
      <summary>
            Constructs a For-Loop iterating a Variable with a value as long as a booleanExpression is true by modifying something each iteration in the specified stepOperation and executing the given piece of code.
            </summary>
      <param name="variable">the variable</param>
      <param name="value">the start-value of the variable</param>
      <param name="booleanExpression">the boolean expression</param>
      <param name="stepOperation">the operation to execute each step</param>
      <param name="code">the code to execute inside the loop</param>
    </member>
    <member name="M:LamestWebserver.JScriptBuilder.JSForLoop.GetJsCode(LamestWebserver.SessionData,LamestWebserver.JScriptBuilder.CallingContext)">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.Compression.GZipCompression">
      <summary>
            Includes Methods for GZip Compressing and Decompressing.
            </summary>
    </member>
    <member name="M:LamestWebserver.Compression.GZipCompression.CompressString(System.String,System.IO.Compression.CompressionLevel)">
      <summary>
            Compresses a string by UTF8-Encoding it and Compressing the bytes
            </summary>
      <param name="data">the string to compress</param>
      <param name="compressionLevel">the level of compression</param>
      <returns>the compressed data as byte[]</returns>
    </member>
    <member name="M:LamestWebserver.Compression.GZipCompression.Compress(System.Byte[],System.IO.Compression.CompressionLevel)">
      <summary>
            Compresses a byte[]
            </summary>
      <param name="data">the byte[] to compress</param>
      <param name="compressionLevel">the level of compression</param>
      <returns>the compressed data as byte[]</returns>
    </member>
    <member name="M:LamestWebserver.Compression.GZipCompression.DecompressString(System.Byte[])">
      <summary>
            Decompressed a byte array and encodes the results in UTF-8
            </summary>
      <param name="data">the bytes to decompress</param>
      <returns>the resulting string</returns>
    </member>
    <member name="M:LamestWebserver.Compression.GZipCompression.Decompress(System.Byte[])">
      <summary>
            Decompressed a byte array
            </summary>
      <param name="data">the bytes to decompress</param>
      <returns>the resulting byte[]</returns>
    </member>
    <member name="T:LamestWebserver.Serialization.SerializableKeyValuePair`2">
      <summary>
            A serializable alternative to KeyValuePair.
            </summary>
      <typeparam name="TKey">the Type of the Key</typeparam>
      <typeparam name="TValue">the Type of the Value</typeparam>
    </member>
    <member name="M:LamestWebserver.Serialization.SerializableKeyValuePair`2.#ctor(`0,`1)">
      <summary>
            Constructs a new SerializableKeyValuePair
            </summary>
      <param name="key">the Key</param>
      <param name="value">the Value</param>
    </member>
    <member name="M:LamestWebserver.Serialization.SerializableKeyValuePair`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Deserialization constructor.
            </summary>
    </member>
    <member name="M:LamestWebserver.Serialization.SerializableKeyValuePair`2.op_Implicit(System.Collections.Generic.KeyValuePair{`0,`1})~LamestWebserver.Serialization.SerializableKeyValuePair{`0,`1}">
      <summary>
            Casts a KeyValuePair to a SerializableKeyValuePair
            </summary>
      <param name="input">the KeyValuePair</param>
      <returns>the Entry</returns>
    </member>
    <member name="M:LamestWebserver.Serialization.SerializableKeyValuePair`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Serialization.SerializableKeyValuePair`2.GetSchema">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Serialization.SerializableKeyValuePair`2.ReadXml(System.Xml.XmlReader)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Serialization.SerializableKeyValuePair`2.WriteXml(System.Xml.XmlWriter)">
      <inheritdoc />
    </member>
    <member name="P:LamestWebserver.Serialization.SerializableKeyValuePair`2.Key">
      <summary>
            The Key
            </summary>
    </member>
    <member name="P:LamestWebserver.Serialization.SerializableKeyValuePair`2.Value">
      <summary>
            The Value
            </summary>
    </member>
    <member name="T:LamestWebserver.Serialization.Serializer">
      <summary>
            A class that contains various Serialization methods
            </summary>
    </member>
    <member name="M:LamestWebserver.Serialization.Serializer.ReadXmlData``1(System.String)">
      <summary>
            Retrieves XML-Serialized data from a file.
            </summary>
      <typeparam name="T">The Type of the data to deserialize</typeparam>
      <param name="filename">The name of the file</param>
      <returns>The deserialized object</returns>
    </member>
    <member name="M:LamestWebserver.Serialization.Serializer.ReadXmlDataInMemory``1(System.String)">
      <summary>
            Retrieves XML-Serialized data from a string.
            </summary>
      <typeparam name="T">The Type of the data to deserialize</typeparam>
      <param name="xml">The serialized object</param>
      <returns>The deserialized object</returns>
    </member>
    <member name="M:LamestWebserver.Serialization.Serializer.ReadXmlData(System.String,System.Type)">
      <summary>
            Retrieves XML-Serialized data from a file.
            </summary>
      <param name="filename">The name of the file</param>
      <param name="type">The Type of the data to deserialize</param>
      <returns>The deserialized object</returns>
    </member>
    <member name="M:LamestWebserver.Serialization.Serializer.ReadXmlDataInMemory(System.String,System.Type)">
      <summary>
            Retrieves XML-Serialized data from a string.
            </summary>
      <param name="xml">The serialized object</param>
      <param name="type">The Type of the data to deserialize</param>
      <returns>The deserialized object</returns>
    </member>
    <member name="M:LamestWebserver.Serialization.Serializer.WriteXmlData``1(``0,System.String)">
      <summary>
            Writes an Object to an XML-File.
            </summary>
      <typeparam name="T">The Type of the Object</typeparam>
      <param name="data">The Object</param>
      <param name="filename">The name of the file to write</param>
    </member>
    <member name="M:LamestWebserver.Serialization.Serializer.WriteXmlDataInMemory``1(``0)">
      <summary>
            Serializes an Object to an XML-string.
            </summary>
      <typeparam name="T">The Type of the Object</typeparam>
      <param name="data">The Object</param>
    </member>
    <member name="M:LamestWebserver.Serialization.Serializer.ReadJsonData``1(System.String)">
      <summary>
            Retrieves a JSON-Serialized object from a file.
            </summary>
      <typeparam name="T">The Type of the data to deserialize</typeparam>
      <param name="filename">The name of the file</param>
      <returns>The deserialized object</returns>
    </member>
    <member name="M:LamestWebserver.Serialization.Serializer.ReadJsonDataInMemory``1(System.String)">
      <summary>
            Retrieves JSON-Serialized data from a json string.
            </summary>
      <typeparam name="T">The Type of the data to deserialize</typeparam>
      <param name="json">The serialized Object</param>
      <returns>The deserialized object</returns>
    </member>
    <member name="M:LamestWebserver.Serialization.Serializer.ReadJsonData(System.String,System.Type)">
      <summary>
            Retrieves a JSON-Serialized object from a file.
            </summary>
      <param name="filename">The name of the file</param>
      <param name="type">The Type of the data to deserialize</param>
      <returns>The deserialized object</returns>
    </member>
    <member name="M:LamestWebserver.Serialization.Serializer.ReadJsonDataInMemory(System.String,System.Type)">
      <summary>
            Retrieves JSON-Serialized data from a json string.
            </summary>
      <param name="json">The serialized Object</param>
      <param name="type">The Type of the data to deserialize</param>
      <returns>The deserialized object</returns>
    </member>
    <member name="M:LamestWebserver.Serialization.Serializer.WriteJsonData``1(``0,System.String,System.Boolean)">
      <summary>
            Writes an Object to a JSON-File.
            </summary>
      <typeparam name="T">The Type of the Object</typeparam>
      <param name="data">The Object</param>
      <param name="filename">The name of the file to write</param>
      <param name="humanReadable">Shall the file contain linefeeds</param>
    </member>
    <member name="M:LamestWebserver.Serialization.Serializer.WriteJsonDataInMemory``1(``0,System.Boolean)">
      <summary>
            Writes an Object to a json string.
            </summary>
      <typeparam name="T">The Type of the Object</typeparam>
      <param name="data">The Object</param>
      <param name="humanReadable">Shall the file contain linefeeds</param>
    </member>
    <member name="M:LamestWebserver.Serialization.Serializer.WriteJsonData``1(``0,System.String)">
      <summary>
            Writes an Object to a JSON-File.
            </summary>
      <typeparam name="T">The Type of the Object</typeparam>
      <param name="data">The Object</param>
      <param name="filename">The name of the file to write</param>
    </member>
    <member name="M:LamestWebserver.Serialization.Serializer.WriteJsonDataInMemory``1(``0)">
      <summary>
            Writes an Object to a json string.
            </summary>
      <typeparam name="T">The Type of the Object</typeparam>
      <param name="data">The Object</param>
    </member>
    <member name="M:LamestWebserver.Serialization.Serializer.ReadBinaryData``1(System.String)">
      <summary>
            Retrieves Binary-Serialized data from a file.
            </summary>
      <typeparam name="T">The Type of the data to deserialize</typeparam>
      <param name="filename">The name of the file</param>
      <returns>The deserialized object</returns>
    </member>
    <member name="M:LamestWebserver.Serialization.Serializer.ReadBinaryDataInMemory``1(System.Byte[])">
      <summary>
            Retrieves Binary-Serialized data from a byte[].
            </summary>
      <typeparam name="T">The Type of the data to deserialize</typeparam>
      <param name="data">The serizalized object</param>
      <returns>The deserialized object</returns>
    </member>
    <member name="M:LamestWebserver.Serialization.Serializer.ReadBinaryData``1(System.String,System.Type)">
      <summary>
            Retrieves Binary-Serialized data from a file.
            </summary>
      <param name="filename">The name of the file</param>
      <param name="type">The Type of the data to deserialize</param>
      <returns>The deserialized object</returns>
    </member>
    <member name="M:LamestWebserver.Serialization.Serializer.ReadBinaryDataInMemory(System.Byte[],System.Type)">
      <summary>
            Retrieves Binary-Serialized data from a byte[].
            </summary>
      <param name="data">The serizalized object</param>
      <param name="type">The Type of the data to deserialize</param>
      <returns>The deserialized object</returns>
    </member>
    <member name="M:LamestWebserver.Serialization.Serializer.WriteBinaryData``1(``0,System.String)">
      <summary>
            Writes an Object to a Binary-File.
            </summary>
      <typeparam name="T">The Type of the Object</typeparam>
      <param name="data">The Object</param>
      <param name="filename">The name of the file to write</param>
    </member>
    <member name="M:LamestWebserver.Serialization.Serializer.WriteBinaryDataInMemory``1(``0)">
      <summary>
            Serializes an Object to a byte[].
            </summary>
      <typeparam name="T">The Type of the Object</typeparam>
      <param name="data">The Object</param>
    </member>
    <member name="T:LamestWebserver.Serialization.XmlSerializationTools">
      <summary>
            A class that contains a lot of XmlSerialization helpers
            </summary>
    </member>
    <member name="M:LamestWebserver.Serialization.XmlSerializationTools.GetXmlSerializer(System.Type)">
      <summary>
            Caches XMLSerializers to prevent MemoryLeaks.
            
            Source: http://codereview.stackexchange.com/questions/24861/caching-xmlserializer-in-appdomain &amp; https://msdn.microsoft.com/en-us/library/system.xml.serialization.xmlserializer(v=vs.110).aspx
            </summary>
      <param name="type">type parameter of the Serializer</param>
      <returns>An XML-Serializer created with the given type argument</returns>
    </member>
    <member name="M:LamestWebserver.Serialization.XmlSerializationTools.GetElementsNamed(System.Xml.XmlReader,System.String)">
      <summary>
            Source: http://stackoverflow.com/questions/2441673/reading-xml-with-xmlreader-in-c-sharp
            </summary>
      <param name="reader">the XMLReader</param>
      <param name="elementName">the name of the Element</param>
      <returns>All matching elements</returns>
    </member>
    <member name="M:LamestWebserver.Serialization.XmlSerializationTools.GetElementNamed(System.Xml.XmlReader,System.String)">
      <summary>
            Source: http://stackoverflow.com/questions/2441673/reading-xml-with-xmlreader-in-c-sharp
            </summary>
      <param name="reader">the XMLReader</param>
      <param name="elementName">the name of the Element</param>
      <returns>The first matching element</returns>
    </member>
    <member name="M:LamestWebserver.Serialization.XmlSerializationTools.WriteElement``1(System.Xml.XmlWriter,System.String,``0)">
      <summary>
            Writes an object to the xmlWriter
            </summary>
      <typeparam name="T">The type of the element</typeparam>
      <param name="writer">the current writer</param>
      <param name="name">the name of the object</param>
      <param name="value">the value of the object</param>
    </member>
    <member name="M:LamestWebserver.Serialization.XmlSerializationTools.ReadElement``1(System.Xml.XmlReader,System.String)">
      <summary>
            searches and reads an object from a xmlReader
            </summary>
      <typeparam name="T">The type of the element</typeparam>
      <param name="reader">the current reader</param>
      <param name="name">the name of the object</param>
    </member>
    <member name="M:LamestWebserver.Serialization.XmlSerializationTools.ReadElement(System.Xml.XmlReader,System.Type,System.String)">
      <summary>
            searches and reads an object from a xmlReader
            </summary>
      <param name="reader">the current reader</param>
      <param name="T">The type of the element</param>
      <param name="name">the name of the object</param>
    </member>
    <member name="M:LamestWebserver.Serialization.XmlSerializationTools.ReadLowerElement``1(System.Xml.XmlReader)">
      <summary>
            reads an object from a xmlReader
            </summary>
      <typeparam name="T">The type of the element</typeparam>
      <param name="reader">the current reader</param>
    </member>
    <member name="M:LamestWebserver.Serialization.XmlSerializationTools.ReadLowerElement(System.Xml.XmlReader,System.Type)">
      <summary>
            reads an object from a xmlReader
            </summary>
      <param name="reader">the current reader</param>
      <param name="T">The type of the element</param>
    </member>
    <member name="M:LamestWebserver.Serialization.XmlSerializationTools.ReadToEndElement(System.Xml.XmlReader,System.String)">
      <summary>
            Reads an XmlReader to a specified EndElement
            </summary>
      <param name="reader">the XmlReader</param>
      <param name="endElement">the name of the EndElement tag</param>
    </member>
    <member name="T:LamestWebserver.RequestHandlers.RequestHandler">
      <summary>
            A RequestHandler contains tools to resolve HTTP-Requests to responses.
            </summary>
    </member>
    <member name="F:LamestWebserver.RequestHandlers.RequestHandler.CurrentRequestHandler">
      <summary>
            The RequestHandler used across all default Webserver Instances.
            </summary>
    </member>
    <member name="F:LamestWebserver.RequestHandlers.RequestHandler.RequestHandlers">
      <summary>
            The RequestHandlers to look through primarily.
            </summary>
    </member>
    <member name="F:LamestWebserver.RequestHandlers.RequestHandler.SecondaryRequestHandlers">
      <summary>
            The RequestHandlers to look through seconarily (e.g. ErrorRequestHandlers).
            </summary>
    </member>
    <member name="F:LamestWebserver.RequestHandlers.RequestHandler.RequestWriteLock">
      <summary>
            A WriteLock to safely add and remove response handlers.
            </summary>
    </member>
    <member name="F:LamestWebserver.RequestHandlers.RequestHandler.DebugResponseNode">
      <summary>
            The Root DebugResponseNode.
            </summary>
    </member>
    <member name="M:LamestWebserver.RequestHandlers.RequestHandler.#ctor(System.String)">
      <summary>
            Constructs a new RequestHandler.
            </summary>
      <param name="debugResponseNodeName">The DebugView name for this RequestHandler.</param>
    </member>
    <member name="M:LamestWebserver.RequestHandlers.RequestHandler.AddDebugResponseNode(LamestWebserver.RequestHandlers.DebugView.DebugResponseNode)">
      <summary>
            Adds a DebugResponseNode as Subnode to the Root DebugResponseNode.
            </summary>
      <param name="node">The node to add as subnode.</param>
    </member>
    <member name="M:LamestWebserver.RequestHandlers.RequestHandler.RemoveDebugResponseNode(LamestWebserver.RequestHandlers.DebugView.DebugResponseNode)">
      <summary>
            Removes a DebugResponseNode from the Subnodes of the Root DebugResponseNode.
            </summary>
      <param name="node">The node to remove.</param>
    </member>
    <member name="M:LamestWebserver.RequestHandlers.RequestHandler.ClearDebugResponseNodes">
      <summary>
            Clears the subnodes of the Root DebugResponseNode.
            </summary>
    </member>
    <member name="M:LamestWebserver.RequestHandlers.RequestHandler.GetDebugResponseNode">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.RequestHandlers.RequestHandler.GetResponse(LamestWebserver.HttpRequest)">
      <summary>
            Retrieves a response (or null) from a given http packet by looking through all primary and secondary request handlers as long as none has a propper response to it.
            </summary>
      <param name="requestPacket">the http-packet to reply to</param>
      <returns>the response http packet or null</returns>
    </member>
    <member name="M:LamestWebserver.RequestHandlers.RequestHandler.AddRequestHandler(LamestWebserver.RequestHandlers.IRequestHandler)">
      <summary>
            Adds a new request handler.
            </summary>
      <param name="handler">the handler to add</param>
    </member>
    <member name="M:LamestWebserver.RequestHandlers.RequestHandler.InsertRequestHandler(LamestWebserver.RequestHandlers.IRequestHandler,System.Int32)">
      <summary>
            Adds a new request handler at the specified position (or 0).
            </summary>
      <param name="handler">the handler to add</param>
      <param name="index">the position where to add the request handler.</param>
    </member>
    <member name="M:LamestWebserver.RequestHandlers.RequestHandler.RemoveRequestHandler(LamestWebserver.RequestHandlers.IRequestHandler)">
      <summary>
            Removes a specific requestHandler.
            </summary>
      <param name="handler">the handler to remove.</param>
    </member>
    <member name="M:LamestWebserver.RequestHandlers.RequestHandler.RemoveRequestHandlers(System.Type)">
      <summary>
            Removes all request handlers with a certain type.
            </summary>
      <param name="handlertype">the type of the handler.</param>
    </member>
    <member name="M:LamestWebserver.RequestHandlers.RequestHandler.InsertSecondaryRequestHandler(LamestWebserver.RequestHandlers.IRequestHandler,System.Int32)">
      <summary>
            Inserts a secondary request handler at a specified position (or 0).
            </summary>
      <param name="handler">the handler to insert</param>
      <param name="index">the index where to insert the handler</param>
    </member>
    <member name="M:LamestWebserver.RequestHandlers.RequestHandler.RemoveSecondaryRequestHandler(LamestWebserver.RequestHandlers.IRequestHandler)">
      <summary>
            Removes a handler from the secondary request handlers
            </summary>
      <param name="handler">the handler to remove</param>
    </member>
    <member name="M:LamestWebserver.RequestHandlers.RequestHandler.RemoveSecondaryRequestHandlers(System.Type)">
      <summary>
            Removes all request handlers of a specific type from the secondary request handlers.
            </summary>
      <param name="handlertype">the type of the handlers to remove</param>
    </member>
    <member name="T:LamestWebserver.RequestHandlers.IRequestHandler">
      <summary>
            An Interface for HTTP-Request handlers.
            </summary>
    </member>
    <member name="M:LamestWebserver.RequestHandlers.IRequestHandler.GetResponse(LamestWebserver.HttpRequest,System.Diagnostics.Stopwatch)">
      <summary>
            Retrieves a response from a http-request.
            </summary>
      <param name="requestPacket">the request packet</param>
      <param name="currentStopwatch">a reference to a started response time stopwatch.</param>
      <returns>the response packet</returns>
    </member>
    <member name="T:LamestWebserver.RequestHandlers.FileRequestHandler">
      <summary>
            The Request Handler that delivers files from local storage.
            </summary>
    </member>
    <member name="F:LamestWebserver.RequestHandlers.FileRequestHandler.Folder">
      <summary>
            The folder in local storage, where the files are located.
            </summary>
    </member>
    <member name="M:LamestWebserver.RequestHandlers.FileRequestHandler.#ctor(System.String)">
      <summary>
            Constructs a new FileRequestHandler.
            </summary>
      <param name="folder">the folder where to look for the the requested files.</param>
    </member>
    <member name="M:LamestWebserver.RequestHandlers.FileRequestHandler.GetResponse(LamestWebserver.HttpRequest,System.Diagnostics.Stopwatch)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.RequestHandlers.FileRequestHandler.ReadFile(System.String,System.Boolean)">
      <summary>
            Reads a file from local storage.
            </summary>
      <param name="filename">the name of the file</param>
      <param name="isBinary">shall the file be read as binary file?</param>
      <returns>a byte[] contatining the file contents</returns>
    </member>
    <member name="M:LamestWebserver.RequestHandlers.FileRequestHandler.ReadFile(System.String)">
      <summary>
            Reads a file from local storage.
            </summary>
      <param name="filename">the name of the file</param>
      <returns>a byte[] contatining the file contents</returns>
    </member>
    <member name="M:LamestWebserver.RequestHandlers.FileRequestHandler.FileIsBinary(System.String,System.String)">
      <summary>
            Checks if a given file should be binary.
            </summary>
      <param name="fileName">the name of the file</param>
      <param name="extention">the extention of the file</param>
      <returns>
      </returns>
    </member>
    <member name="M:LamestWebserver.RequestHandlers.FileRequestHandler.GetExtention(System.String)">
      <summary>
            Eetrieves the extention of a file.
            </summary>
      <param name="fileName">the file name</param>
      <returns>the extention</returns>
    </member>
    <member name="M:LamestWebserver.RequestHandlers.FileRequestHandler.GetMimeType(System.String)">
      <summary>
            Returns the mime-type of a given file.
            </summary>
      <param name="extention">the extention of the file</param>
      <returns>the mime-type as string</returns>
    </member>
    <member name="M:LamestWebserver.RequestHandlers.FileRequestHandler.Equals(LamestWebserver.RequestHandlers.IRequestHandler)">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.RequestHandlers.CachedFileRequestHandler">
      <summary>
            A RequestHanlder that delivers Files from local storage - which will be cached on use.
            </summary>
    </member>
    <member name="F:LamestWebserver.RequestHandlers.CachedFileRequestHandler.CacheHashMapSize">
      <summary>
            The size of the cache hash map. this does not limit the amount of cached items - it's just there to preference size or performance.
            </summary>
    </member>
    <member name="F:LamestWebserver.RequestHandlers.CachedFileRequestHandler.DebugResponseNode">
      <summary>
            The DebugResponseNode for this CachedFileRequestHandler.
            </summary>
    </member>
    <member name="M:LamestWebserver.RequestHandlers.CachedFileRequestHandler.#ctor(System.String)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.RequestHandlers.CachedFileRequestHandler.GetResponse(LamestWebserver.HttpRequest,System.Diagnostics.Stopwatch)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.RequestHandlers.CachedFileRequestHandler.GetFromCache(System.String,LamestWebserver.RequestHandlers.PreloadedFile@)">
      <summary>
            Gets a file from the cache.
            </summary>
      <param name="name">the name of the file.</param>
      <param name="file">the PreloadedFile object of this file</param>
      <returns>true if found - false if not found.</returns>
    </member>
    <member name="M:LamestWebserver.RequestHandlers.CachedFileRequestHandler.GetDebugResponseNode">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.RequestHandlers.PackedFileRequestHandler">
      <summary>
            Reads or writes an entire dictionary from / to a file which can be loaded at startup so that the file size is compressed and not anyone can easily look at the files inside.
            </summary>
    </member>
    <member name="M:LamestWebserver.RequestHandlers.PackedFileRequestHandler.#ctor(System.String,System.Boolean,System.Nullable{System.Int32})">
      <summary>
            Creates a new PackedFileRequestHandler from a directory. Use SaveToPackedFile-Method to save it.
            </summary>
      <param name="directoryPath">the path of the directory to read</param>
      <param name="includeSubdirectories">shall subdirectories be included</param>
      <param name="HashMapSize">the size of the hashmap containing the files. this does not limit the number of contained files - only to preference performance or size.</param>
    </member>
    <member name="M:LamestWebserver.RequestHandlers.PackedFileRequestHandler.#ctor(System.String)">
      <summary>
            Creates a new PackedFileRequestHandler from a packed file.
            </summary>
      <param name="filename">the name of the file to load</param>
    </member>
    <member name="M:LamestWebserver.RequestHandlers.PackedFileRequestHandler.SaveToPackedFile(System.String)">
      <summary>
            Saves the storage to a packed file.
            </summary>
      <param name="filename">the name of the packed file.</param>
    </member>
    <member name="M:LamestWebserver.RequestHandlers.PackedFileRequestHandler.GetResponse(LamestWebserver.HttpRequest,System.Diagnostics.Stopwatch)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.RequestHandlers.PackedFileRequestHandler.Equals(LamestWebserver.RequestHandlers.IRequestHandler)">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.RequestHandlers.PreloadedFile">
      <summary>
            A Cacheable preloaded file.
            </summary>
    </member>
    <member name="F:LamestWebserver.RequestHandlers.PreloadedFile.Filename">
      <summary>
            The name of the file.
            </summary>
    </member>
    <member name="F:LamestWebserver.RequestHandlers.PreloadedFile.Contents">
      <summary>
            The contents of the file.
            </summary>
    </member>
    <member name="F:LamestWebserver.RequestHandlers.PreloadedFile.Size">
      <summary>
            The size of the file.
            </summary>
    </member>
    <member name="F:LamestWebserver.RequestHandlers.PreloadedFile.LastModified">
      <summary>
            The last-modified date of the file.
            </summary>
    </member>
    <member name="F:LamestWebserver.RequestHandlers.PreloadedFile.IsBinary">
      <summary>
            is the file just binary data?
            </summary>
    </member>
    <member name="F:LamestWebserver.RequestHandlers.PreloadedFile.LoadCount">
      <summary>
            The amount of times the file has been requested.
            </summary>
    </member>
    <member name="M:LamestWebserver.RequestHandlers.PreloadedFile.#ctor">
      <summary>
            Empty Deserialization constructor
            </summary>
    </member>
    <member name="M:LamestWebserver.RequestHandlers.PreloadedFile.#ctor(System.String,System.Byte[],System.DateTime,System.Boolean)">
      <summary>
            Constructs a new Preloaded file.
            </summary>
      <param name="filename">The name of the file.</param>
      <param name="contents">The contents of the file.</param>
      <param name="lastModified">The last-modified date of the file.</param>
      <param name="isBinary">is the file just binary data?</param>
    </member>
    <member name="M:LamestWebserver.RequestHandlers.PreloadedFile.Clone">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.RequestHandlers.PreloadedFile.Equals(LamestWebserver.RequestHandlers.PreloadedFile)">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.RequestHandlers.ErrorRequestHandler">
      <summary>
            Displays error messages for every request that passed through.
            </summary>
    </member>
    <member name="F:LamestWebserver.RequestHandlers.ErrorRequestHandler.StoreErrorMessages">
      <summary>
            Shall this RequestHandler store DebugView information?
            </summary>
    </member>
    <member name="F:LamestWebserver.RequestHandlers.ErrorRequestHandler.DebugResponseNode">
      <summary>
            The DebugResponseNode for this ErrorRequestHandler.
            </summary>
    </member>
    <member name="M:LamestWebserver.RequestHandlers.ErrorRequestHandler.#ctor">
      <summary>
            Creates a new ErrorRequestHandler.
            </summary>
    </member>
    <member name="M:LamestWebserver.RequestHandlers.ErrorRequestHandler.GetResponse(LamestWebserver.HttpRequest,System.Diagnostics.Stopwatch)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.RequestHandlers.ErrorRequestHandler.Equals(LamestWebserver.RequestHandlers.IRequestHandler)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.RequestHandlers.ErrorRequestHandler.GetDebugResponseNode">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.RequestHandlers.AbstractMutexRetriableResponse`1">
      <summary>
            Provides functionality for Retriable Responses (MutexRetryException triggered retrying)
            </summary>
      <typeparam name="T">the type of method to call</typeparam>
    </member>
    <member name="F:LamestWebserver.RequestHandlers.AbstractMutexRetriableResponse`1.Retries">
      <summary>
            The maximum amount of retries if deadlocks prevented the execution.
            </summary>
    </member>
    <member name="M:LamestWebserver.RequestHandlers.AbstractMutexRetriableResponse`1.GetResponse(LamestWebserver.HttpRequest,System.Diagnostics.Stopwatch)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.RequestHandlers.AbstractMutexRetriableResponse`1.GetRetriableResponse(`0,LamestWebserver.HttpRequest,LamestWebserver.HttpSessionData)">
      <summary>
            Responds to the request packet by calling the requestFunction with the sessionData and the requested packet.
            The retriable part of the response delivery.
            </summary>
      <param name="requestFunction">the function to call</param>
      <param name="requestPacket">the http-request</param>
      <param name="sessionData">the current sessionData</param>
      <returns>the http response-packet</returns>
    </member>
    <member name="M:LamestWebserver.RequestHandlers.AbstractMutexRetriableResponse`1.FinishResponse(`0,System.Exception,System.Diagnostics.Stopwatch,LamestWebserver.HttpRequest,LamestWebserver.HttpResponse)">
      <summary>
            Provides information about the last response and is called whenever a response finished.
            </summary>
      <param name="requestFunction">The called request function.</param>
      <param name="exception">The thrown exception.</param>
      <param name="stopwatch">The current stopwatch.</param>
      <param name="requestPacket">The original Request Packet.</param>
      <param name="httpResponse">The response Packet.</param>
    </member>
    <member name="M:LamestWebserver.RequestHandlers.AbstractMutexRetriableResponse`1.GetResponseFunction(LamestWebserver.HttpRequest)">
      <summary>
            Gets the response function which can be called multiple times in GetRetriableResponse.
            </summary>
      <param name="requestPacket">the http-request</param>
      <returns>the method to call.</returns>
    </member>
    <member name="M:LamestWebserver.RequestHandlers.AbstractMutexRetriableResponse`1.Equals(LamestWebserver.RequestHandlers.IRequestHandler)">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.RequestHandlers.PageResponseRequestHandler">
      <summary>
            A response handler for PageResponses
            </summary>
    </member>
    <member name="F:LamestWebserver.RequestHandlers.PageResponseRequestHandler.StoreDebugInformation">
      <summary>
            Shall this RequestHandler store DebugView information?
            </summary>
    </member>
    <member name="F:LamestWebserver.RequestHandlers.PageResponseRequestHandler.DebugResponseNode">
      <summary>
            The DebugResponseNode for this PageResponseRequestHandler.
            </summary>
    </member>
    <member name="F:LamestWebserver.RequestHandlers.PageResponseRequestHandler.ReaderWriterLock">
      <summary>
            A ReaderWriterLock for accessing pages synchronously.
            </summary>
    </member>
    <member name="F:LamestWebserver.RequestHandlers.PageResponseRequestHandler.PageResponses">
      <summary>
            The currently listed PageResponses.
            </summary>
    </member>
    <member name="M:LamestWebserver.RequestHandlers.PageResponseRequestHandler.#ctor">
      <summary>
            Constructs a new PageResponseRequestHandler and registers this RequestHandler as listening for new PageResponses.
            </summary>
    </member>
    <member name="M:LamestWebserver.RequestHandlers.PageResponseRequestHandler.GetRetriableResponse(LamestWebserver.Master.GetContents,LamestWebserver.HttpRequest,LamestWebserver.HttpSessionData)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.RequestHandlers.PageResponseRequestHandler.GetResponseFunction(LamestWebserver.HttpRequest)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.RequestHandlers.PageResponseRequestHandler.GetDebugResponseNode">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.RequestHandlers.PageResponseRequestHandler.FinishResponse(LamestWebserver.Master.GetContents,System.Exception,System.Diagnostics.Stopwatch,LamestWebserver.HttpRequest,LamestWebserver.HttpResponse)">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.RequestHandlers.OneTimePageResponseRequestHandler">
      <summary>
            A response handler for OneTime-PageResponses
            </summary>
    </member>
    <member name="F:LamestWebserver.RequestHandlers.OneTimePageResponseRequestHandler.ReaderWriterLock">
      <summary>
            A ReaderWriterLock for accessing pages synchronously.
            </summary>
    </member>
    <member name="F:LamestWebserver.RequestHandlers.OneTimePageResponseRequestHandler.OneTimeResponses">
      <summary>
            The currently listed OneTime-PageResponses.
            </summary>
    </member>
    <member name="M:LamestWebserver.RequestHandlers.OneTimePageResponseRequestHandler.#ctor">
      <summary>
            Constructs a new OneTimePageResponseRequestHandler and registers this RequestHandler as listening for new OneTime-PageResponses.
            </summary>
    </member>
    <member name="M:LamestWebserver.RequestHandlers.OneTimePageResponseRequestHandler.GetRetriableResponse(LamestWebserver.Master.GetContents,LamestWebserver.HttpRequest,LamestWebserver.HttpSessionData)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.RequestHandlers.OneTimePageResponseRequestHandler.GetResponseFunction(LamestWebserver.HttpRequest)">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.RequestHandlers.WebSocketRequestHandler">
      <summary>
            A response handler for WebSocketResponses
            </summary>
    </member>
    <member name="F:LamestWebserver.RequestHandlers.WebSocketRequestHandler.ReaderWriterLock">
      <summary>
            A ReaderWriterLock for accessing pages synchronously.
            </summary>
    </member>
    <member name="F:LamestWebserver.RequestHandlers.WebSocketRequestHandler.WebSocketResponses">
      <summary>
            The currently listed WebSocketResponses.
            </summary>
    </member>
    <member name="M:LamestWebserver.RequestHandlers.WebSocketRequestHandler.#ctor">
      <summary>
            Constructs a new WebSocketRequestHandler and registers this RequestHandler as listening for new WebSocketResponses.
            </summary>
    </member>
    <member name="M:LamestWebserver.RequestHandlers.WebSocketRequestHandler.GetResponse(LamestWebserver.HttpRequest,System.Diagnostics.Stopwatch)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.RequestHandlers.WebSocketRequestHandler.Equals(LamestWebserver.RequestHandlers.IRequestHandler)">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.RequestHandlers.DirectoryResponseRequestHandler">
      <summary>
            A response handler for DirectoryResponses
            </summary>
    </member>
    <member name="F:LamestWebserver.RequestHandlers.DirectoryResponseRequestHandler.StoreDebugInformation">
      <summary>
            Shall this RequestHandler store DebugView information?
            </summary>
    </member>
    <member name="F:LamestWebserver.RequestHandlers.DirectoryResponseRequestHandler.ReaderWriterLock">
      <summary>
            A ReaderWriterLock for accessing pages synchronously.
            </summary>
    </member>
    <member name="F:LamestWebserver.RequestHandlers.DirectoryResponseRequestHandler.DirectoryResponses">
      <summary>
            The currently listed DirectoryResponses.
            </summary>
    </member>
    <member name="F:LamestWebserver.RequestHandlers.DirectoryResponseRequestHandler.DebugResponseNode">
      <summary>
            The DebugResponseNode for this PageResponseRequestHandler.
            </summary>
    </member>
    <member name="M:LamestWebserver.RequestHandlers.DirectoryResponseRequestHandler.#ctor">
      <summary>
            Constructs a new DirectoryResponseRequestHandler and registers this RequestHandler as listening for new DirectoryResponses.
            </summary>
    </member>
    <member name="M:LamestWebserver.RequestHandlers.DirectoryResponseRequestHandler.GetRetriableResponse(LamestWebserver.Master.GetDirectoryContents,LamestWebserver.HttpRequest,LamestWebserver.HttpSessionData)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.RequestHandlers.DirectoryResponseRequestHandler.GetResponseFunction(LamestWebserver.HttpRequest)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.RequestHandlers.DirectoryResponseRequestHandler.GetDebugResponseNode">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.RequestHandlers.DirectoryResponseRequestHandler.FinishResponse(LamestWebserver.Master.GetDirectoryContents,System.Exception,System.Diagnostics.Stopwatch,LamestWebserver.HttpRequest,LamestWebserver.HttpResponse)">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.RequestHandlers.DataResponseRequestHandler">
      <summary>
            A response handler for DataResponses
            </summary>
    </member>
    <member name="F:LamestWebserver.RequestHandlers.DataResponseRequestHandler.StoreDebugInformation">
      <summary>
            Shall this RequestHandler store DebugView information?
            </summary>
    </member>
    <member name="F:LamestWebserver.RequestHandlers.DataResponseRequestHandler.DebugResponseNode">
      <summary>
            The DebugResponseNode for this DataResponseRequestHandler.
            </summary>
    </member>
    <member name="F:LamestWebserver.RequestHandlers.DataResponseRequestHandler.ReaderWriterLock">
      <summary>
            A ReaderWriterLock for accessing pages synchronously.
            </summary>
    </member>
    <member name="F:LamestWebserver.RequestHandlers.DataResponseRequestHandler.DataResponses">
      <summary>
            The currently listed DataResponses.
            </summary>
    </member>
    <member name="M:LamestWebserver.RequestHandlers.DataResponseRequestHandler.#ctor">
      <summary>
            Constructs a new DataResponseRequestHandler and registers this RequestHandler as listening for new DataResponses.
            </summary>
    </member>
    <member name="M:LamestWebserver.RequestHandlers.DataResponseRequestHandler.GetRetriableResponse(LamestWebserver.Master.GetDataContents,LamestWebserver.HttpRequest,LamestWebserver.HttpSessionData)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.RequestHandlers.DataResponseRequestHandler.GetResponseFunction(LamestWebserver.HttpRequest)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.RequestHandlers.DataResponseRequestHandler.GetDebugResponseNode">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.RequestHandlers.DataResponseRequestHandler.FinishResponse(LamestWebserver.Master.GetDataContents,System.Exception,System.Diagnostics.Stopwatch,LamestWebserver.HttpRequest,LamestWebserver.HttpResponse)">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.RequestHandlers.DebugView.IDebugRespondable">
      <summary>
            An Object that a DebugResponseNode can be retrieved from.
            </summary>
    </member>
    <member name="M:LamestWebserver.RequestHandlers.DebugView.IDebugRespondable.GetDebugResponseNode">
      <summary>
            Retrieves the DebugResponseNode for this object.
            </summary>
      <returns>Retrieves the DebugResponseNode for this object.</returns>
    </member>
    <member name="T:LamestWebserver.RequestHandlers.DebugView.DebugResponse">
      <summary>
            A request handler for the LamestWebserver DebugView.
            </summary>
    </member>
    <member name="F:LamestWebserver.RequestHandlers.DebugView.DebugResponse.DebugResponseInstance">
      <summary>
            The Singleton holding the main DebugResponse instance.
            </summary>
    </member>
    <member name="F:LamestWebserver.RequestHandlers.DebugView.DebugResponse.DebugViewRequestHandler">
      <summary>
            The Singleton holding the RequestHandler for the DebugResponse. This instance can simply be attatched to a Webserver in order to view the DebugView.
            </summary>
    </member>
    <member name="F:LamestWebserver.RequestHandlers.DebugView.DebugResponse.StyleSheet">
      <summary>
            The css stylesheet for the DebugView.
            </summary>
    </member>
    <member name="M:LamestWebserver.RequestHandlers.DebugView.DebugResponse.GetResponse(LamestWebserver.HttpRequest,System.Diagnostics.Stopwatch)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.RequestHandlers.DebugView.DebugResponse.UnpackUrlActions(LamestWebserver.HttpRequest)">
      <summary>
            Unpacks the URL of the Request into a WalkableQueue.
            </summary>
      <param name="request">The HttpRequest to take the URL from.</param>
      <returns>A Walkable Queue containing the URL.</returns>
    </member>
    <member name="M:LamestWebserver.RequestHandlers.DebugView.DebugResponse.AddNode(LamestWebserver.RequestHandlers.DebugView.DebugResponseNode)">
      <summary>
            Adds a node to the static DebugNode.
            </summary>
      <param name="node">The node to add.</param>
    </member>
    <member name="M:LamestWebserver.RequestHandlers.DebugView.DebugResponse.RemoveNode(LamestWebserver.RequestHandlers.DebugView.DebugResponseNode)">
      <summary>
            Removes a node from the static DebugNode.
            </summary>
      <param name="node">The node to remove.</param>
    </member>
    <member name="M:LamestWebserver.RequestHandlers.DebugView.DebugResponse.ClearNodes">
      <summary>
            Clears the static DebugNode.
            </summary>
    </member>
    <member name="M:LamestWebserver.RequestHandlers.DebugView.DebugResponse.Equals(LamestWebserver.RequestHandlers.IRequestHandler)">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.RequestHandlers.DebugView.DebugResponseNode">
      <summary>
            A Node of Contents for the DebugView.
            </summary>
    </member>
    <member name="F:LamestWebserver.RequestHandlers.DebugView.DebugResponseNode.Name">
      <summary>
            The Name of this DebugResponseNode.
            </summary>
    </member>
    <member name="M:LamestWebserver.RequestHandlers.DebugView.DebugResponseNode.SetParentURL(LamestWebserver.RequestHandlers.DebugView.DebugContainerResponseNode)">
      <summary>
            Sets the the current node as Child of a given DebugContainerResponseNode.
            </summary>
      <param name="node">The parent node for this node.</param>
    </member>
    <member name="M:LamestWebserver.RequestHandlers.DebugView.DebugResponseNode.SetRootNode">
      <summary>
            Sets the current node as RootNode.
            </summary>
    </member>
    <member name="M:LamestWebserver.RequestHandlers.DebugView.DebugResponseNode.GetContents(LamestWebserver.SessionData,System.String,LamestWebserver.Collections.WalkableQueue{System.Tuple{LamestWebserver.Core.ID,System.String}})">
      <summary>
            Retrieves the contents of the DebugView node as HElement.
            </summary>
      <param name="sessionData">The current SessionData.</param>
      <param name="requestedAction">The requested Action for this particular node (if any).</param>
      <param name="walkableQueue">The current WalkableQueue containing all Subnodes of the requested URL.</param>
      <returns>
      </returns>
    </member>
    <member name="M:LamestWebserver.RequestHandlers.DebugView.DebugResponseNode.GetLink(System.String,LamestWebserver.Core.ID,LamestWebserver.Collections.WalkableQueue{System.Tuple{LamestWebserver.Core.ID,System.String}},System.String)">
      <summary>
            Creates a link to another DebugNode.
            </summary>
      <param name="text">The text of the link.</param>
      <param name="subUrl">The subUrl to link to.</param>
      <param name="walkableQueue">The current walkableQueue.</param>
      <param name="requestedAction">The requested Action for the linked DebugNode.</param>
      <returns>The link as HLink.</returns>
    </member>
    <member name="M:LamestWebserver.RequestHandlers.DebugView.DebugResponseNode.GetLink(System.String,LamestWebserver.Collections.URL{LamestWebserver.Core.ID},System.String)">
      <summary>
            Creates a link to another DebugNode.
            </summary>
      <param name="text">The text of the link.</param>
      <param name="url">The URL of the DebugNode to link to.</param>
      <param name="requestedAction">The requested Action for the linked DebugNode.</param>
      <returns>The link as HLink.</returns>
    </member>
    <member name="M:LamestWebserver.RequestHandlers.DebugView.DebugResponseNode.GetLink(System.String,LamestWebserver.Core.ID,LamestWebserver.Collections.WalkableQueue{System.Tuple{LamestWebserver.Core.ID,System.String}},System.Int32,System.String)">
      <summary>
            Creates a link to another DebugNode.
            </summary>
      <param name="text">The text of the link.</param>
      <param name="subUrl">The subUrl to link to.</param>
      <param name="walkableQueue">The current walkableQueue.</param>
      <param name="position">The maximum Position to get from in the walkable queue.</param>
      <param name="requestedAction">The requested Action for the linked DebugNode.</param>
      <returns>The link as HLink.</returns>
    </member>
    <member name="M:LamestWebserver.RequestHandlers.DebugView.DebugResponseNode.GetLink(LamestWebserver.RequestHandlers.DebugView.DebugResponseNode)">
      <summary>
            Creates a link to another DebugNode.
            </summary>
      <param name="node">The Node to link to.</param>
      <returns>The link as HLink.</returns>
    </member>
    <member name="M:LamestWebserver.RequestHandlers.DebugView.DebugResponseNode.GetLink(LamestWebserver.RequestHandlers.DebugView.IDebugRespondable)">
      <summary>
            Creates a link to another DebugNode.
            </summary>
      <param name="respondable">The IDebugRespondable that contains the Node to link to.</param>
      <returns>The link as HLink.</returns>
    </member>
    <member name="P:LamestWebserver.RequestHandlers.DebugView.DebugResponseNode.ID">
      <summary>
            The ID of this DebugResponseNode.
            </summary>
    </member>
    <member name="P:LamestWebserver.RequestHandlers.DebugView.DebugResponseNode.URL">
      <summary>
            The URL of this DebugResponseNode.
            </summary>
    </member>
    <member name="T:LamestWebserver.RequestHandlers.DebugView.DebugContainerResponseNode">
      <summary>
            A kind of DebugResponseNode that can contain subnodes.
            </summary>
    </member>
    <member name="F:LamestWebserver.RequestHandlers.DebugView.DebugContainerResponseNode.GetElements">
      <summary>
            This Func is Called whenever the contents of this particular node are requested.
            </summary>
    </member>
    <member name="M:LamestWebserver.RequestHandlers.DebugView.DebugContainerResponseNode.#ctor(System.String,System.String,System.Func{LamestWebserver.SessionData,LamestWebserver.UI.HElement},LamestWebserver.RequestHandlers.DebugView.DebugContainerResponseNode,System.Boolean)">
      <summary>
            Creates a new DebugContainerResponseNode.
            </summary>
      <param name="name">The name of this DebugResponseNode.</param>
      <param name="description">The description for this DebugResponseNode.</param>
      <param name="getElementFunc">The function to execute whenever the contents of this DebugResponseNode are requested.</param>
      <param name="parentNode">The parent node of this node.</param>
      <param name="AddToParent">Shall this node be added to it's parent already?</param>
    </member>
    <member name="M:LamestWebserver.RequestHandlers.DebugView.DebugContainerResponseNode.ConstructRootNode(System.String,System.String,System.Func{LamestWebserver.SessionData,LamestWebserver.UI.HElement})">
      <summary>
            Constructs a new root-DebugResponse-node.
            </summary>
      <param name="name">The name of the Node.</param>
      <param name="description">The description for the node.</param>
      <param name="getElementFunc">The function to call whenever the contents of the node will be requested.</param>
      <returns>A root-DebugResponse-node.</returns>
    </member>
    <member name="M:LamestWebserver.RequestHandlers.DebugView.DebugContainerResponseNode.AddNode(LamestWebserver.RequestHandlers.DebugView.DebugResponseNode)">
      <summary>
            Adds a specified node as sub-node of this node.
            </summary>
      <param name="node">The node to add as subnode.</param>
    </member>
    <member name="M:LamestWebserver.RequestHandlers.DebugView.DebugContainerResponseNode.RemoveNode(LamestWebserver.RequestHandlers.DebugView.DebugResponseNode)">
      <summary>
            Removes a specified node from the sub-nodes of this node.
            </summary>
      <param name="node">The node to remove from the subnodes.</param>
    </member>
    <member name="M:LamestWebserver.RequestHandlers.DebugView.DebugContainerResponseNode.ClearNodes">
      <summary>
            Clears the Subnodes of this node.
            </summary>
    </member>
    <member name="M:LamestWebserver.RequestHandlers.DebugView.DebugContainerResponseNode.GetContents(LamestWebserver.SessionData,System.String,LamestWebserver.Collections.WalkableQueue{System.Tuple{LamestWebserver.Core.ID,System.String}})">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.RequestHandlers.DebugView.StaticDebugContainerResponseNode">
      <summary>
            A DebugResponseNode that retrieves a static response.
            </summary>
    </member>
    <member name="F:LamestWebserver.RequestHandlers.DebugView.StaticDebugContainerResponseNode.Elements">
      <summary>
            The elements to return on request of the contents of this node.
            </summary>
    </member>
    <member name="M:LamestWebserver.RequestHandlers.DebugView.StaticDebugContainerResponseNode.#ctor(System.String,System.String,LamestWebserver.UI.HElement[])">
      <summary>
            Constructs a new StaticDebugContainerResponseNode.
            </summary>
      <param name="name">The name of this node.</param>
      <param name="description">The description of this node.</param>
      <param name="elements">The elements contained in this node.</param>
    </member>
    <member name="T:LamestWebserver.RequestHandlers.DebugView.IDebugUpdateableResponse`1">
      <summary>
            An interface to display that a class is able to Update it's DebugResponse with a variety of parameters.
            </summary>
    </member>
    <member name="M:LamestWebserver.RequestHandlers.DebugView.IDebugUpdateableResponse`1.UpdateDebugResponseData(`0)">
      <summary>
            Updates the DebugView information of this DebugResponse.
            </summary>
      <param name="data">The data to update with.</param>
    </member>
    <member name="T:LamestWebserver.RequestHandlers.DebugView.IDebugUpdateableResponse`2">
      <summary>
            An interface to display that a class is able to Update it's DebugResponse with a variety of parameters.
            </summary>
    </member>
    <member name="M:LamestWebserver.RequestHandlers.DebugView.IDebugUpdateableResponse`2.UpdateDebugResponseData(`0,`1)">
      <summary>
            Updates the DebugView information of this DebugResponse.
            </summary>
      <param name="data1">The data parameter 1 to update with.</param>
      <param name="data2">The data parameter 2 to update with.</param>
    </member>
    <member name="T:LamestWebserver.RequestHandlers.DebugView.IDebugUpdateableResponse`3">
      <summary>
            An interface to display that a class is able to Update it's DebugResponse with a variety of parameters.
            </summary>
    </member>
    <member name="M:LamestWebserver.RequestHandlers.DebugView.IDebugUpdateableResponse`3.UpdateDebugResponseData(`0,`1,`2)">
      <summary>
            Updates the DebugView information of this DebugResponse.
            </summary>
      <param name="data1">The data parameter 1 to update with.</param>
      <param name="data2">The data parameter 2 to update with.</param>
      <param name="data3">The data parameter 3 to update with.</param>
    </member>
    <member name="T:LamestWebserver.RequestHandlers.DebugView.IDebugUpdateableResponse`4">
      <summary>
            An interface to display that a class is able to Update it's DebugResponse with a variety of parameters.
            </summary>
    </member>
    <member name="M:LamestWebserver.RequestHandlers.DebugView.IDebugUpdateableResponse`4.UpdateDebugResponseData(`0,`1,`2,`3)">
      <summary>
            Updates the DebugView information of this DebugResponse.
            </summary>
      <param name="data1">The data parameter 1 to update with.</param>
      <param name="data2">The data parameter 2 to update with.</param>
      <param name="data3">The data parameter 3 to update with.</param>
      <param name="data4">The data parameter 4 to update with.</param>
    </member>
    <member name="T:LamestWebserver.RequestHandlers.DebugView.IDebugUpdateableResponse`5">
      <summary>
            An interface to display that a class is able to Update it's DebugResponse with a variety of parameters.
            </summary>
    </member>
    <member name="M:LamestWebserver.RequestHandlers.DebugView.IDebugUpdateableResponse`5.UpdateDebugResponseData(`0,`1,`2,`3,`4)">
      <summary>
            Updates the DebugView information of this DebugResponse.
            </summary>
      <param name="data1">The data parameter 1 to update with.</param>
      <param name="data2">The data parameter 2 to update with.</param>
      <param name="data3">The data parameter 3 to update with.</param>
      <param name="data4">The data parameter 4 to update with.</param>
      <param name="data5">The data parameter 5 to update with.</param>
    </member>
    <member name="T:LamestWebserver.RequestHandlers.DebugView.IDebugUpdateableResponse`6">
      <summary>
            An interface to display that a class is able to Update it's DebugResponse with a variety of parameters.
            </summary>
    </member>
    <member name="M:LamestWebserver.RequestHandlers.DebugView.IDebugUpdateableResponse`6.UpdateDebugResponseData(`0,`1,`2,`3,`4,`5)">
      <summary>
            Updates the DebugView information of this DebugResponse.
            </summary>
      <param name="data1">The data parameter 1 to update with.</param>
      <param name="data2">The data parameter 2 to update with.</param>
      <param name="data3">The data parameter 3 to update with.</param>
      <param name="data4">The data parameter 4 to update with.</param>
      <param name="data5">The data parameter 5 to update with.</param>
      <param name="data6">The data parameter 6 to update with.</param>
    </member>
    <member name="T:LamestWebserver.RequestHandlers.DebugView.IDebugUpdateableResponse`7">
      <summary>
            An interface to display that a class is able to Update it's DebugResponse with a variety of parameters.
            </summary>
    </member>
    <member name="M:LamestWebserver.RequestHandlers.DebugView.IDebugUpdateableResponse`7.UpdateDebugResponseData(`0,`1,`2,`3,`4,`5,`6)">
      <summary>
            Updates the DebugView information of this DebugResponse.
            </summary>
      <param name="data1">The data parameter 1 to update with.</param>
      <param name="data2">The data parameter 2 to update with.</param>
      <param name="data3">The data parameter 3 to update with.</param>
      <param name="data4">The data parameter 4 to update with.</param>
      <param name="data5">The data parameter 5 to update with.</param>
      <param name="data6">The data parameter 6 to update with.</param>
      <param name="data7">The data parameter 7 to update with.</param>
    </member>
    <member name="T:LamestWebserver.RequestHandlers.DebugView.IDebugUpdateableResponse`8">
      <summary>
            An interface to display that a class is able to Update it's DebugResponse with a variety of parameters.
            </summary>
    </member>
    <member name="M:LamestWebserver.RequestHandlers.DebugView.IDebugUpdateableResponse`8.UpdateDebugResponseData(`0,`1,`2,`3,`4,`5,`6,`7)">
      <summary>
            Updates the DebugView information of this DebugResponse.
            </summary>
      <param name="data1">The data parameter 1 to update with.</param>
      <param name="data2">The data parameter 2 to update with.</param>
      <param name="data3">The data parameter 3 to update with.</param>
      <param name="data4">The data parameter 4 to update with.</param>
      <param name="data5">The data parameter 5 to update with.</param>
      <param name="data6">The data parameter 6 to update with.</param>
      <param name="data7">The data parameter 7 to update with.</param>
      <param name="data8">The data parameter 8 to update with.</param>
    </member>
    <member name="T:LamestWebserver.RequestHandlers.DebugView.IDebugUpdateableResponse`9">
      <summary>
            An interface to display that a class is able to Update it's DebugResponse with a variety of parameters.
            </summary>
    </member>
    <member name="M:LamestWebserver.RequestHandlers.DebugView.IDebugUpdateableResponse`9.UpdateDebugResponseData(`0,`1,`2,`3,`4,`5,`6,`7,`8)">
      <summary>
            Updates the DebugView information of this DebugResponse.
            </summary>
      <param name="data1">The data parameter 1 to update with.</param>
      <param name="data2">The data parameter 2 to update with.</param>
      <param name="data3">The data parameter 3 to update with.</param>
      <param name="data4">The data parameter 4 to update with.</param>
      <param name="data5">The data parameter 5 to update with.</param>
      <param name="data6">The data parameter 6 to update with.</param>
      <param name="data7">The data parameter 7 to update with.</param>
      <param name="data8">The data parameter 8 to update with.</param>
      <param name="data9">The data parameter 9 to update with.</param>
    </member>
    <member name="T:LamestWebserver.Attributes.ExecuteOnLoad">
      <summary>
            Mark a public static Method to be executed on load by the LamestWebserver Host Service
            </summary>
    </member>
    <member name="F:LamestWebserver.Attributes.ExecuteOnLoad.Args">
      <summary>
            The arguments to start the method with
            </summary>
    </member>
    <member name="M:LamestWebserver.Attributes.ExecuteOnLoad.#ctor(System.Object[])">
      <summary>
            Mark a public static Method to be executed on load by the LamestWebserver Host Service
            </summary>
      <param name="args">The arguments to start the method with</param>
    </member>
    <member name="T:LamestWebserver.Attributes.IgnoreDiscovery">
      <summary>
            Mark this class to not be added automatically when discovering pages.
            </summary>
    </member>
    <member name="T:LamestWebserver.Attributes.ExecuteOnUnload">
      <summary>
            Mark a public static Method to be executed on unload by the LamestWebserver Host Service
            </summary>
    </member>
    <member name="F:LamestWebserver.Attributes.ExecuteOnUnload.Args">
      <summary>
            The arguments to start the method with
            </summary>
    </member>
    <member name="M:LamestWebserver.Attributes.ExecuteOnUnload.#ctor(System.Object[])">
      <summary>
            Mark a public static Method to be executed on unload by the LamestWebserver Host Service
            </summary>
      <param name="args">The arguments to start the method with</param>
    </member>
    <member name="T:LamestWebserver.Core.ClampedValue`1">
      <summary>
            A container type for IComparable&lt;T&gt; that always clamps the value at the given maximum and minimum value.
            </summary>
      <typeparam name="T">The Type of the clamped value. Must inherit from IComparable&lt;T&gt;.</typeparam>
    </member>
    <member name="M:LamestWebserver.Core.ClampedValue`1.#ctor(`0,`0,`0)">
      <summary>
            Initializes a ClampedValue object.
            </summary>
      <param name="value">The value.</param>
      <param name="minimum">The minimum Value.</param>
      <param name="maximum">The maximum Value.</param>
    </member>
    <member name="M:LamestWebserver.Core.ClampedValue`1.#ctor(`0,`0)">
      <summary>
            Initializes a ClampedValue object without a value.
            </summary>
      <param name="minimum">The minimum Value.</param>
      <param name="maximum">The maximum Value.</param>
    </member>
    <member name="M:LamestWebserver.Core.ClampedValue`1.#ctor">
      <summary>
            Deserialzation Constructor or non-initializing Constructor.
            </summary>
    </member>
    <member name="M:LamestWebserver.Core.ClampedValue`1.op_Implicit(LamestWebserver.Core.ClampedValue{`0})~`0">
      <summary>
            Retrieves the Value from a ClampedValue&lt;T&gt;.
            </summary>
      <param name="clampedValue">The ClampedValue to retrieve from.</param>
    </member>
    <member name="M:LamestWebserver.Core.ClampedValue`1.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Core.ClampedValue`1.ToString">
      <inheritdoc />
    </member>
    <member name="P:LamestWebserver.Core.ClampedValue`1.Minimum">
      <summary>
            The minimum Value.
            </summary>
    </member>
    <member name="P:LamestWebserver.Core.ClampedValue`1.Maximum">
      <summary>
            The maximum Value.
            </summary>
    </member>
    <member name="P:LamestWebserver.Core.ClampedValue`1.Value">
      <summary>
            The clamped Value.
            </summary>
    </member>
    <member name="T:LamestWebserver.Core.ExtentionMethods">
      <summary>
            Contains General Purpose Extention Methods.
            </summary>
    </member>
    <member name="M:LamestWebserver.Core.ExtentionMethods.DecodeHtml(System.String)">
      <summary>
            Decodes the characters of a HTML string.
            </summary>
      <param name="text">the string to decode</param>
      <returns>the decoded string</returns>
    </member>
    <member name="M:LamestWebserver.Core.ExtentionMethods.DecodeUrl(System.String)">
      <summary>
            Decodes the characters of a Url string.
            </summary>
      <param name="text">the string to decode</param>
      <returns>the decoded string</returns>
    </member>
    <member name="M:LamestWebserver.Core.ExtentionMethods.EncodeUrl(System.String)">
      <summary>
            HTTP URL encodes a given input
            </summary>
      <param name="text">the input</param>
      <returns>the input encoded as HTTP URL</returns>
    </member>
    <member name="M:LamestWebserver.Core.ExtentionMethods.EncodeHtml(System.String)">
      <summary>
            HTML encodes a given input
            </summary>
      <param name="text">the input</param>
      <returns>the input encoded as HTML</returns>
    </member>
    <member name="M:LamestWebserver.Core.ExtentionMethods.ToSeparatedValueString(System.Collections.Generic.IEnumerable{System.Object},System.String)">
      <summary>
            Appends all contained values separated by a given string.
            </summary>
      <param name="obj">The IEnumerable to extract the values from.</param>
      <param name="separator">The string to separate with.</param>
      <returns>The appended values separated by the separator string.</returns>
    </member>
    <member name="M:LamestWebserver.Core.ExtentionMethods.GetIndex``1(System.Collections.Generic.List{``0},``0)">
      <summary>
            Gets the index of an Element from a List.
            </summary>
      <typeparam name="T">The Type of the List-Elements</typeparam>
      <param name="list">The List</param>
      <param name="value">The Value</param>
      <returns>Index or null if not contained or value is null</returns>
    </member>
    <member name="M:LamestWebserver.Core.ExtentionMethods.GetIndex``1(``0[],``0)">
      <summary>
            Gets the index of an Element from an Array.
            </summary>
      <typeparam name="T">The Type of the Array-Elements</typeparam>
      <param name="list">The Array</param>
      <param name="value">The Value</param>
      <returns>Index or null if not contained or value is null</returns>
    </member>
    <member name="M:LamestWebserver.Core.ExtentionMethods.ToHexString(System.Byte[])">
      <summary>
            Converts a byte[] to a hex string.
            </summary>
      <param name="bytes">The byte[].</param>
      <returns>the byte[] as hex string</returns>
    </member>
    <member name="M:LamestWebserver.Core.ExtentionMethods.ToHexString(System.UInt64)">
      <summary>
            Converts a number to a hex string.
            </summary>
      <param name="value">The number.</param>
      <returns>The number as hex string.</returns>
    </member>
    <member name="M:LamestWebserver.Core.ExtentionMethods.ToHexString(System.UInt32)">
      <summary>
            Converts a number to a hex string.
            </summary>
      <param name="value">The number.</param>
      <returns>The number as hex string.</returns>
    </member>
    <member name="M:LamestWebserver.Core.ExtentionMethods.ToHexString(System.UInt16)">
      <summary>
            Converts a number to a hex string.
            </summary>
      <param name="value">The number.</param>
      <returns>The number as hex string.</returns>
    </member>
    <member name="M:LamestWebserver.Core.ExtentionMethods.ToHexString(System.Byte)">
      <summary>
            Converts a number to a hex string.
            </summary>
      <param name="value">The number.</param>
      <returns>The number as hex string.</returns>
    </member>
    <member name="M:LamestWebserver.Core.ExtentionMethods.ToHexString(System.Int64)">
      <summary>
            Converts a number to a hex string.
            </summary>
      <param name="value">The number.</param>
      <returns>The number as hex string.</returns>
    </member>
    <member name="M:LamestWebserver.Core.ExtentionMethods.ToHexString(System.Int32)">
      <summary>
            Converts a number to a hex string.
            </summary>
      <param name="value">The number.</param>
      <returns>The number as hex string.</returns>
    </member>
    <member name="M:LamestWebserver.Core.ExtentionMethods.ToHexString(System.Int16)">
      <summary>
            Converts a number to a hex string.
            </summary>
      <param name="value">The number.</param>
      <returns>The number as hex string.</returns>
    </member>
    <member name="M:LamestWebserver.Core.ExtentionMethods.ToHexString(System.SByte)">
      <summary>
            Converts a number to a hex string.
            </summary>
      <param name="value">The number.</param>
      <returns>The number as hex string.</returns>
    </member>
    <member name="M:LamestWebserver.Core.ExtentionMethods.ToBitString(System.UInt64)">
      <summary>
            Retrieves the bits of a given integer.
            </summary>
      <param name="value">The integer.</param>
      <returns>The Bits as '1' and '0'.</returns>
    </member>
    <member name="M:LamestWebserver.Core.ExtentionMethods.ToBitString(System.UInt32)">
      <summary>
            Retrieves the bits of a given integer.
            </summary>
      <param name="value">The integer.</param>
      <returns>The Bits as '1' and '0'.</returns>
    </member>
    <member name="M:LamestWebserver.Core.ExtentionMethods.ToBitString(System.UInt16)">
      <summary>
            Retrieves the bits of a given integer.
            </summary>
      <param name="value">The integer.</param>
      <returns>The Bits as '1' and '0'.</returns>
    </member>
    <member name="M:LamestWebserver.Core.ExtentionMethods.ToBitString(System.Byte)">
      <summary>
            Retrieves the bits of a given integer.
            </summary>
      <param name="value">The integer.</param>
      <returns>The Bits as '1' and '0'.</returns>
    </member>
    <member name="M:LamestWebserver.Core.ExtentionMethods.ToBitString(System.Int64)">
      <summary>
            Retrieves the bits of a given integer.
            </summary>
      <param name="value">The integer.</param>
      <returns>The Bits as '1' and '0'.</returns>
    </member>
    <member name="M:LamestWebserver.Core.ExtentionMethods.ToBitString(System.Int32)">
      <summary>
            Retrieves the bits of a given integer.
            </summary>
      <param name="value">The integer.</param>
      <returns>The Bits as '1' and '0'.</returns>
    </member>
    <member name="M:LamestWebserver.Core.ExtentionMethods.ToBitString(System.Int16)">
      <summary>
            Retrieves the bits of a given integer.
            </summary>
      <param name="value">The integer.</param>
      <returns>The Bits as '1' and '0'.</returns>
    </member>
    <member name="M:LamestWebserver.Core.ExtentionMethods.ToBitString(System.SByte)">
      <summary>
            Retrieves the bits of a given integer.
            </summary>
      <param name="value">The integer.</param>
      <returns>The Bits as '1' and '0'.</returns>
    </member>
    <member name="M:LamestWebserver.Core.ExtentionMethods.ToEnumerable``1(System.Tuple{``0})">
      <summary>
            Casts a Tuple to an IEnumerable.
            </summary>
      <param name="tuple">The tuple to cast to IEnumerable.</param>
      <returns>The elements in order as IEnumerable (object[]).</returns>
    </member>
    <member name="M:LamestWebserver.Core.ExtentionMethods.ToEnumerable``2(System.Tuple{``0,``1})">
      <summary>
            Casts a Tuple to an IEnumerable.
            </summary>
      <param name="tuple">The tuple to cast to IEnumerable.</param>
      <returns>The elements in order as IEnumerable (object[]).</returns>
    </member>
    <member name="M:LamestWebserver.Core.ExtentionMethods.ToEnumerable``3(System.Tuple{``0,``1,``2})">
      <summary>
            Casts a Tuple to an IEnumerable.
            </summary>
      <param name="tuple">The tuple to cast to IEnumerable.</param>
      <returns>The elements in order as IEnumerable (object[]).</returns>
    </member>
    <member name="M:LamestWebserver.Core.ExtentionMethods.ToEnumerable``4(System.Tuple{``0,``1,``2,``3})">
      <summary>
            Casts a Tuple to an IEnumerable.
            </summary>
      <param name="tuple">The tuple to cast to IEnumerable.</param>
      <returns>The elements in order as IEnumerable (object[]).</returns>
    </member>
    <member name="M:LamestWebserver.Core.ExtentionMethods.ToEnumerable``5(System.Tuple{``0,``1,``2,``3,``4})">
      <summary>
            Casts a Tuple to an IEnumerable.
            </summary>
      <param name="tuple">The tuple to cast to IEnumerable.</param>
      <returns>The elements in order as IEnumerable (object[]).</returns>
    </member>
    <member name="M:LamestWebserver.Core.ExtentionMethods.ToEnumerable``6(System.Tuple{``0,``1,``2,``3,``4,``5})">
      <summary>
            Casts a Tuple to an IEnumerable.
            </summary>
      <param name="tuple">The tuple to cast to IEnumerable.</param>
      <returns>The elements in order as IEnumerable (object[]).</returns>
    </member>
    <member name="M:LamestWebserver.Core.ExtentionMethods.ToEnumerable``7(System.Tuple{``0,``1,``2,``3,``4,``5,``6})">
      <summary>
            Casts a Tuple to an IEnumerable.
            </summary>
      <param name="tuple">The tuple to cast to IEnumerable.</param>
      <returns>The elements in order as IEnumerable (object[]).</returns>
    </member>
    <member name="M:LamestWebserver.Core.ExtentionMethods.ToEnumerable``8(System.Tuple{``0,``1,``2,``3,``4,``5,``6,``7})">
      <summary>
            Casts a Tuple to an IEnumerable.
            </summary>
      <param name="tuple">The tuple to cast to IEnumerable.</param>
      <returns>The elements in order as IEnumerable (object[]).</returns>
    </member>
    <member name="M:LamestWebserver.Core.ExtentionMethods.ToEnumerable``1(System.ValueTuple{``0})">
      <summary>
            Casts a ValueTuple to an IEnumerable.
            </summary>
      <param name="tuple">The valueTuple to cast to IEnumerable.</param>
      <returns>The elements in order as IEnumerable (object[]).</returns>
    </member>
    <member name="M:LamestWebserver.Core.ExtentionMethods.ToEnumerable``2(System.ValueTuple{``0,``1})">
      <summary>
            Casts a ValueTuple to an IEnumerable.
            </summary>
      <param name="tuple">The valueTuple to cast to IEnumerable.</param>
      <returns>The elements in order as IEnumerable (object[]).</returns>
    </member>
    <member name="M:LamestWebserver.Core.ExtentionMethods.ToEnumerable``3(System.ValueTuple{``0,``1,``2})">
      <summary>
            Casts a ValueTuple to an IEnumerable.
            </summary>
      <param name="tuple">The valueTuple to cast to IEnumerable.</param>
      <returns>The elements in order as IEnumerable (object[]).</returns>
    </member>
    <member name="M:LamestWebserver.Core.ExtentionMethods.ToEnumerable``4(System.ValueTuple{``0,``1,``2,``3})">
      <summary>
            Casts a ValueTuple to an IEnumerable.
            </summary>
      <param name="tuple">The valueTuple to cast to IEnumerable.</param>
      <returns>The elements in order as IEnumerable (object[]).</returns>
    </member>
    <member name="M:LamestWebserver.Core.ExtentionMethods.ToEnumerable``5(System.ValueTuple{``0,``1,``2,``3,``4})">
      <summary>
            Casts a ValueTuple to an IEnumerable.
            </summary>
      <param name="tuple">The valueTuple to cast to IEnumerable.</param>
      <returns>The elements in order as IEnumerable (object[]).</returns>
    </member>
    <member name="M:LamestWebserver.Core.ExtentionMethods.ToEnumerable``6(System.ValueTuple{``0,``1,``2,``3,``4,``5})">
      <summary>
            Casts a ValueTuple to an IEnumerable.
            </summary>
      <param name="tuple">The valueTuple to cast to IEnumerable.</param>
      <returns>The elements in order as IEnumerable (object[]).</returns>
    </member>
    <member name="M:LamestWebserver.Core.ExtentionMethods.ToEnumerable``7(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6})">
      <summary>
            Casts a ValueTuple to an IEnumerable.
            </summary>
      <param name="tuple">The valueTuple to cast to IEnumerable.</param>
      <returns>The elements in order as IEnumerable (object[]).</returns>
    </member>
    <member name="M:LamestWebserver.Core.ExtentionMethods.ToEnumerable``8(System.ValueTuple{``0,``1,``2,``3,``4,``5,``6,``7})">
      <summary>
            Casts a ValueTuple to an IEnumerable.
            </summary>
      <param name="tuple">The valueTuple to cast to IEnumerable.</param>
      <returns>The elements in order as IEnumerable (object[]).</returns>
    </member>
    <member name="M:LamestWebserver.Core.ExtentionMethods.StartsWith``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Checks whether a list starts with a certain sequence.
            </summary>
      <typeparam name="T">The type of the elements of the list.</typeparam>
      <param name="list">The list to check.</param>
      <param name="startsWith">The sequence the list has to start with.</param>
      <returns>Returns true if the list starts with the given sequence. False if not.</returns>
    </member>
    <member name="M:LamestWebserver.Core.ExtentionMethods.ContainsEqualSequence``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}},System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Checks whether a list of lists contains a given list, that is equal to the provided sequence.
            </summary>
      <typeparam name="T">Type contained in the lists inside the list.</typeparam>
      <param name="listOfLists">This list of lists.</param>
      <param name="sequence">The sequence to look for.</param>
      <returns>True if contained, False if not contained.</returns>
    </member>
    <member name="M:LamestWebserver.Core.ExtentionMethods.Contains``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>
            A generic Contains function for IEnumerables.
            </summary>
      <typeparam name="T">The type of the elements to compare.</typeparam>
      <param name="list">The list to search through.</param>
      <param name="containedList">The potentially contained list.</param>
      <returns>Returns true if contained, false if not contained.</returns>
    </member>
    <member name="M:LamestWebserver.Core.ExtentionMethods.SubsequenceContains``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}},System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Checks whether a list of lists contains a given list, that contains the provided sequence.
            </summary>
      <typeparam name="T">Subsequence type.</typeparam>
      <param name="listOfLists">This list of lists.</param>
      <param name="sequence">The sequence to look for.</param>
      <returns>True if contained, False if not contained.</returns>
    </member>
    <member name="M:LamestWebserver.Core.ExtentionMethods.SubsequenceContainsString(System.Collections.Generic.IEnumerable{System.String},System.String)">
      <summary>
            Checks whether a list of strings contains an entry, that contains the provided string.
            </summary>
      <param name="listOfStrings">This list of strings.</param>
      <param name="search">The string to look for.</param>
      <returns>True if contained, False if not contained.</returns>
    </member>
    <member name="M:LamestWebserver.Core.ExtentionMethods.SafeToString(System.Exception)">
      <summary>
            Gets an Exception Description (ToString) without risking running into exceptions on the way.
            </summary>
      <param name="e">the current Exception</param>
      <returns>The exception ToString, message or type depending on what is available.</returns>
    </member>
    <member name="M:LamestWebserver.Core.ExtentionMethods.SafeMessage(System.Exception)">
      <summary>
            Gets an Exception Message without risking running into exceptions on the way.
            </summary>
      <param name="e">the current Exception</param>
      <returns>The exception message or type depending on what is available.</returns>
    </member>
    <member name="M:LamestWebserver.Core.ExtentionMethods.GetRelativeLink(System.String,System.String)">
      <summary>
            Returns the full URL of a Relative URL and Original URL.
            </summary>
      <param name="relativeUrl">this relative URL.</param>
      <param name="url">The current original page URL.</param>
      <returns>Returns the full URL of the relative Page.</returns>
    </member>
    <member name="T:LamestWebserver.Core.Hash">
      <summary>
            Provides functionality to generate random hashes and IDs.
            </summary>
    </member>
    <member name="M:LamestWebserver.Core.Hash.GetHash">
      <summary>
            Generates and retrieves a 128 bit AES hash as Hex-String.
            </summary>
      <returns>The hash.</returns>
    </member>
    <member name="M:LamestWebserver.Core.Hash.GetHashBytes">
      <summary>
            Generates and retrieves a 128 bit AES hash.
            </summary>
      <returns>The hash.</returns>
    </member>
    <member name="M:LamestWebserver.Core.Hash.GetComplexHash(System.String)">
      <summary>
            Generates a SHA3 512 bit Hash of the given input as Hex-String
            </summary>
      <param name="input">the text to hash</param>
      <returns>the hash as base64 string</returns>
    </member>
    <member name="M:LamestWebserver.Core.Hash.GetComplexHash(System.Byte[])">
      <summary>
            Generates a SHA3 512 bit Hash of the given input
            </summary>
      <param name="input">the byte[] to hash</param>
      <returns>the hash as byte[]</returns>
    </member>
    <member name="M:LamestWebserver.Core.Hash.GetComplexHash">
      <summary>
            Generates a SHA3 512bit hash of random data.
            </summary>
      <returns>the hash as base64 string</returns>
    </member>
    <member name="M:LamestWebserver.Core.Hash.GetComplexHashBytes">
      <summary>
            Generates a SHA3 512bit hash of random data.
            </summary>
      <returns>the hash as byte[]</returns>
    </member>
    <member name="T:LamestWebserver.Core.ID">
      <summary>
            Provides functionailty for identifying objects.
            </summary>
    </member>
    <member name="F:LamestWebserver.Core.ID._id">
      <summary>
            The internal ID.
            </summary>
    </member>
    <member name="F:LamestWebserver.Core.ID._string_id">
      <summary>
            The precalculated ID as string.
            </summary>
    </member>
    <member name="M:LamestWebserver.Core.ID.#ctor">
      <summary>
            Constructs a new ID with random value.
            </summary>
    </member>
    <member name="M:LamestWebserver.Core.ID.#ctor(System.String)">
      <summary>
            Constructs a new ID with the given value.
            </summary>
      <param name="id">the internal ID to use.</param>
    </member>
    <member name="M:LamestWebserver.Core.ID.#ctor(System.Byte[])">
      <summary>
            Constructs a new ID with the given value.
            </summary>
      <param name="id">the internal ID to use.</param>
    </member>
    <member name="M:LamestWebserver.Core.ID.#ctor(System.UInt64[])">
      <summary>
            Constructs a new ID with the given value.
            </summary>
      <param name="id">the internal ID to use.</param>
    </member>
    <member name="M:LamestWebserver.Core.ID.RegenerateHash">
      <summary>
            Regenerates the internal value to a random new value.
            </summary>
    </member>
    <member name="M:LamestWebserver.Core.ID.GetByteArray">
      <summary>
            Retrieves the internal Value as byte[].
            </summary>
      <returns>Returns the internal Value as byte[].</returns>
    </member>
    <member name="M:LamestWebserver.Core.ID.GetUlongArray">
      <summary>
            Retrieves the internal Value as ulong[].
            </summary>
      <returns>Returns the internal Value as ulong[].</returns>
    </member>
    <member name="M:LamestWebserver.Core.ID.ConvertFromString(System.String)">
      <summary>
            Converts a given ID from string to ulong[].
            </summary>
      <param name="id">the ID as string.</param>
      <returns>the ID as ulong[].</returns>
    </member>
    <member name="M:LamestWebserver.Core.ID.ConvertFromByteArray(System.Byte[])">
      <summary>
            Converts a given ID from byte[] to ulong[].
            </summary>
      <param name="id">the ID as byte[].</param>
      <returns>the ID as ulong[].</returns>
    </member>
    <member name="M:LamestWebserver.Core.ID.ConvertFromUlongArray(System.UInt64[])">
      <summary>
            Converts a given ID from ulong[] to string.
            </summary>
      <param name="id">the ID as ulong[].</param>
      <returns>the ID as string.</returns>
    </member>
    <member name="M:LamestWebserver.Core.ID.ToHexString">
      <summary>
            Returns the inner Value as Hexadecimal String.
            <para />
            .ToString() might return Base64 strings - this method will always return in hexadecimal format because it is not virtual.
            </summary>
      <returns>The inner Value as Hexadecimal String.</returns>
    </member>
    <member name="M:LamestWebserver.Core.ID.CompareTo(LamestWebserver.Core.ID)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Core.ID.Equals(LamestWebserver.Core.ID)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Core.ID.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Core.ID.GetHashCode">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Core.ID.ToString">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Core.ID.CompareTo(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Core.ID.op_LessThan(LamestWebserver.Core.ID,LamestWebserver.Core.ID)">
      <summary>
            Compares two IDs.
            </summary>
      <param name="a">the first ID.</param>
      <param name="b">the second ID.</param>
      <returns>true if the comparison retrieves true.</returns>
    </member>
    <member name="M:LamestWebserver.Core.ID.op_GreaterThan(LamestWebserver.Core.ID,LamestWebserver.Core.ID)">
      <summary>
            Compares two IDs.
            </summary>
      <param name="a">the first ID.</param>
      <param name="b">the second ID.</param>
      <returns>true if the comparison retrieves true.</returns>
    </member>
    <member name="M:LamestWebserver.Core.ID.op_Equality(LamestWebserver.Core.ID,LamestWebserver.Core.ID)">
      <summary>
            Compares two IDs.
            </summary>
      <param name="a">the first ID.</param>
      <param name="b">the second ID.</param>
      <returns>true if the comparison retrieves true.</returns>
    </member>
    <member name="M:LamestWebserver.Core.ID.op_Inequality(LamestWebserver.Core.ID,LamestWebserver.Core.ID)">
      <summary>
            Compares two IDs.
            </summary>
      <param name="a">the first ID.</param>
      <param name="b">the second ID.</param>
      <returns>true if the comparison retrieves true.</returns>
    </member>
    <member name="P:LamestWebserver.Core.ID.Value">
      <summary>
            The inner Value of the ID as string.
            </summary>
    </member>
    <member name="T:LamestWebserver.Core.LongID">
      <summary>
            A derivate of ID using a longer SHA3 hash by default.
            </summary>
    </member>
    <member name="M:LamestWebserver.Core.LongID.#ctor">
      <summary>
            Initializes a new LongID with a random SHA3 hash.
            </summary>
    </member>
    <member name="M:LamestWebserver.Core.LongID.#ctor(System.String)">
      <summary>
      </summary>
      <param name="id">
      </param>
    </member>
    <member name="M:LamestWebserver.Core.LongID.#ctor(System.Byte[])">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Core.LongID.#ctor(System.UInt64[])">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Core.LongID.RegenerateHash">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Core.LongID.ConvertFromString(System.String)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Core.LongID.ConvertFromUlongArray(System.UInt64[])">
      <inheritdoc />
    </member>
    <member name="P:LamestWebserver.Core.LongID.Value">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.Core.Logger">
      <summary>
            A simple Logger for LamestWebserver.
            </summary>
    </member>
    <member name="T:LamestWebserver.Core.Logger.ELoggingLevel">
      <summary>
            Represents the different LoggingLevels.
            </summary>
    </member>
    <member name="F:LamestWebserver.Core.Logger.ELoggingLevel.CrashAndBurn">
      <summary>
            Quits the Application writing a CrashDump.
            </summary>
    </member>
    <member name="F:LamestWebserver.Core.Logger.ELoggingLevel.Except">
      <summary>
            Throws an Exception.
            </summary>
    </member>
    <member name="F:LamestWebserver.Core.Logger.ELoggingLevel.DebugExcept">
      <summary>
            Throws an Exception if Logger.LoggerDebugMode is true.
            </summary>
    </member>
    <member name="F:LamestWebserver.Core.Logger.ELoggingLevel.Error">
      <summary>
            A major Error.
            </summary>
    </member>
    <member name="F:LamestWebserver.Core.Logger.ELoggingLevel.Warning">
      <summary>
            A warning message.
            </summary>
    </member>
    <member name="F:LamestWebserver.Core.Logger.ELoggingLevel.Information">
      <summary>
            General Information.
            </summary>
    </member>
    <member name="F:LamestWebserver.Core.Logger.ELoggingLevel.Trace">
      <summary>
            Debugging Information.
            </summary>
    </member>
    <member name="T:LamestWebserver.Core.Logger.EOutputSource">
      <summary>
            Flags for output Sources
            </summary>
    </member>
    <member name="F:LamestWebserver.Core.Logger.EOutputSource.None">
      <summary>
            No Logging output at all.
            </summary>
    </member>
    <member name="F:LamestWebserver.Core.Logger.EOutputSource.Console">
      <summary>
            Write To Console.
            </summary>
    </member>
    <member name="F:LamestWebserver.Core.Logger.EOutputSource.File">
      <summary>
            Write into File.
            </summary>
    </member>
    <member name="F:LamestWebserver.Core.Logger.CurrentLogger">
      <summary>
            The Main Logger for LamestWebserver.
            </summary>
    </member>
    <member name="F:LamestWebserver.Core.Logger.LoggerDebugMode">
      <summary>
            Is LamestWebserverRunning in Debug Mode.
            </summary>
    </member>
    <member name="F:LamestWebserver.Core.Logger.DefaultMinimumLoggingLevel">
      <summary>
            The default minimum logging level. (should probably be ELoggingLevel.Warning by default)
            </summary>
    </member>
    <member name="F:LamestWebserver.Core.Logger.MinimumLoggingLevel">
      <summary>
            The minimum logging level for this logger.
            </summary>
    </member>
    <member name="F:LamestWebserver.Core.Logger._currentOutputSource">
      <summary>
            Currently used output source
            </summary>
    </member>
    <member name="F:LamestWebserver.Core.Logger._multiStreamWriter">
      <summary>
            Stream Writer to handle the writing from multiple streams
            </summary>
    </member>
    <member name="F:LamestWebserver.Core.Logger._currentFilePath">
      <summary>
            The currently used File Path that the logger writes to.
            </summary>
    </member>
    <member name="M:LamestWebserver.Core.Logger.LogTrace(System.String,System.Diagnostics.Stopwatch)">
      <summary>
            Logging a message on logging level 'Trace'.
            </summary>
      <param name="msg">The message to log.</param>
      <param name="stopwatch">A stopwatch carrying the elapsed time.</param>
    </member>
    <member name="M:LamestWebserver.Core.Logger.Trace(System.String,System.Diagnostics.Stopwatch)">
      <summary>
            Logging a message on logging level 'Trace'.
            </summary>
      <param name="msg">The message to log.</param>
      <param name="stopwatch">A stopwatch carrying the elapsed time.</param>
    </member>
    <member name="M:LamestWebserver.Core.Logger.LogInformation(System.String,System.Diagnostics.Stopwatch)">
      <summary>
            Logging a message on logging level 'Information'.
            </summary>
      <param name="msg">The message to log.</param>
      <param name="stopwatch">A stopwatch carrying the elapsed time.</param>
    </member>
    <member name="M:LamestWebserver.Core.Logger.Information(System.String,System.Diagnostics.Stopwatch)">
      <summary>
            Logging a message on logging level 'Information'.
            </summary>
      <param name="msg">The message to log.</param>
      <param name="stopwatch">A stopwatch carrying the elapsed time.</param>
    </member>
    <member name="M:LamestWebserver.Core.Logger.LogWarning(System.String,System.Diagnostics.Stopwatch)">
      <summary>
            Logging a message on logging level 'Warning'.
            </summary>
      <param name="msg">The message to log.</param>
      <param name="stopwatch">A stopwatch carrying the elapsed time.</param>
    </member>
    <member name="M:LamestWebserver.Core.Logger.Warning(System.String,System.Diagnostics.Stopwatch)">
      <summary>
            Logging a message on logging level 'Warning'.
            </summary>
      <param name="msg">The message to log.</param>
      <param name="stopwatch">A stopwatch carrying the elapsed time.</param>
    </member>
    <member name="M:LamestWebserver.Core.Logger.LogError(System.String,System.Diagnostics.Stopwatch)">
      <summary>
            Logging a message on logging level 'Error'.
            </summary>
      <param name="msg">The message to log.</param>
      <param name="stopwatch">A stopwatch carrying the elapsed time.</param>
    </member>
    <member name="M:LamestWebserver.Core.Logger.Error(System.String,System.Diagnostics.Stopwatch)">
      <summary>
            Logging a message on logging level 'Error'.
            </summary>
      <param name="msg">The message to log.</param>
      <param name="stopwatch">A stopwatch carrying the elapsed time.</param>
    </member>
    <member name="M:LamestWebserver.Core.Logger.LogDebugExcept(System.Exception,System.Diagnostics.Stopwatch)">
      <summary>
            Logging a message on logging level 'DebugExcept'. The Exception will be thrown if Logger.LoggerDebugMode is true.
            </summary>
      <param name="exception">The exception, of which the message will be logged.</param>
      <param name="stopwatch">A stopwatch carrying the elapsed time.</param>
    </member>
    <member name="M:LamestWebserver.Core.Logger.DebugExcept(System.Exception,System.Diagnostics.Stopwatch)">
      <summary>
            Logging a message on logging level 'DebugExcept'. The Exception will be thrown if Logger.LoggerDebugMode is true.
            </summary>
      <param name="exception">The exception, of which the message will be logged.</param>
      <param name="stopwatch">A stopwatch carrying the elapsed time.</param>
    </member>
    <member name="M:LamestWebserver.Core.Logger.LogDebugExcept(System.String,System.Exception,System.Diagnostics.Stopwatch)">
      <summary>
            Logging a message on logging level 'DebugExcept'. The Exception will be thrown if Logger.LoggerDebugMode is true.
            </summary>
      <param name="message">The message to log.</param>
      <param name="exception">The exception to throw.</param>
      <param name="stopwatch">A stopwatch carrying the elapsed time.</param>
    </member>
    <member name="M:LamestWebserver.Core.Logger.DebugExcept(System.String,System.Exception,System.Diagnostics.Stopwatch)">
      <summary>
            Logging a message on logging level 'DebugExcept'. The Exception will be thrown if Logger.LoggerDebugMode is true.
            </summary>
      <param name="message">The message to log.</param>
      <param name="exception">The exception to throw.</param>
      <param name="stopwatch">A stopwatch carrying the elapsed time.</param>
    </member>
    <member name="M:LamestWebserver.Core.Logger.LogDebugExcept(System.String,System.Diagnostics.Stopwatch)">
      <summary>
            Logging a message on logging level 'DebugExcept'. An Exception will be thrown if Logger.LoggerDebugMode is true.
            </summary>
      <param name="msg">The message to log.</param>
      <param name="stopwatch">A stopwatch carrying the elapsed time.</param>
    </member>
    <member name="M:LamestWebserver.Core.Logger.DebugExcept(System.String,System.Diagnostics.Stopwatch)">
      <summary>
            Logging a message on logging level 'DebugExcept'. The Exception will be thrown if Logger.LoggerDebugMode is true.
            </summary>
      <param name="msg">The message to log.</param>
      <param name="stopwatch">A stopwatch carrying the elapsed time.</param>
    </member>
    <member name="M:LamestWebserver.Core.Logger.LogExcept(System.Exception,System.Diagnostics.Stopwatch)">
      <summary>
            Logging a message on logging level 'Except'. The Exception will be thrown.
            </summary>
      <param name="exception">The exception, of which the message will be logged.</param>
      <param name="stopwatch">A stopwatch carrying the elapsed time.</param>
    </member>
    <member name="M:LamestWebserver.Core.Logger.Except(System.Exception,System.Diagnostics.Stopwatch)">
      <summary>
            Logging a message on logging level 'Except'. The Exception will be thrown.
            </summary>
      <param name="exception">The exception, of which the message will be logged.</param>
      <param name="stopwatch">A stopwatch carrying the elapsed time.</param>
    </member>
    <member name="M:LamestWebserver.Core.Logger.LogExcept(System.String,System.Exception,System.Diagnostics.Stopwatch)">
      <summary>
            Logging a message on logging level 'Except'. The Exception will be thrown.
            </summary>
      <param name="message">The message to log.</param>
      <param name="exception">The exception to throw.</param>
      <param name="stopwatch">A stopwatch carrying the elapsed time.</param>
    </member>
    <member name="M:LamestWebserver.Core.Logger.Except(System.String,System.Exception,System.Diagnostics.Stopwatch)">
      <summary>
            Logging a message on logging level 'Except'. The Exception will be thrown.
            </summary>
      <param name="message">The message to log.</param>
      <param name="exception">The exception to throw.</param>
      <param name="stopwatch">A stopwatch carrying the elapsed time.</param>
    </member>
    <member name="M:LamestWebserver.Core.Logger.LogExcept(System.String,System.Diagnostics.Stopwatch)">
      <summary>
            Logging a message on logging level 'Except'.  An exception will be thrown.
            </summary>
      <param name="msg">The message to log.</param>
      <param name="stopwatch">A stopwatch carrying the elapsed time.</param>
    </member>
    <member name="M:LamestWebserver.Core.Logger.Except(System.String,System.Diagnostics.Stopwatch)">
      <summary>
            Logging a message on logging level 'Except'. The Exception will be thrown.
            </summary>
      <param name="msg">The message to log.</param>
      <param name="stopwatch">A stopwatch carrying the elapsed time.</param>
    </member>
    <member name="M:LamestWebserver.Core.Logger.LogCrashAndBurn(System.String,System.Diagnostics.Stopwatch)">
      <summary>
            Logging a message on logging level 'CrashAndBurn'. The logger will be closed, a dump file will be written and the application will be exited with error code -1.
            </summary>
      <param name="msg">The message to log.</param>
      <param name="stopwatch">A stopwatch carrying the elapsed time.</param>
    </member>
    <member name="M:LamestWebserver.Core.Logger.CrashAndBurn(System.String,System.Diagnostics.Stopwatch)">
      <summary>
            Logging a message on logging level 'CrashAndBurn'. The logger will be closed, a dump file will be written and the application will be exited with error code -1.
            </summary>
      <param name="msg">The message to log.</param>
      <param name="stopwatch">A stopwatch carrying the elapsed time.</param>
    </member>
    <member name="M:LamestWebserver.Core.Logger.AddCustomStream(System.IO.Stream)">
      <summary>
            Add some Custom Streams.
            Call RestartStream to let the changes take action.
            </summary>
      <param name="stream">
      </param>
    </member>
    <member name="M:LamestWebserver.Core.Logger.RemoveCustomStream(System.IO.Stream)">
      <summary>
            Remove some Custom Streams.
            Call RestartStream to let the changes take action.
            </summary>
      <param name="stream">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:LamestWebserver.Core.Logger.ClearCustomStreams">
      <summary>
            Clear all Custom Streams.
            Call RestartStream to let the changes take action.
            </summary>
    </member>
    <member name="M:LamestWebserver.Core.Logger.Close">
      <summary>
            Closes and Flushes the Logger stream.
            If you want to restart the stream manually use 'Restart'.
            </summary>
    </member>
    <member name="M:LamestWebserver.Core.Logger.Open">
      <summary>
            Opens and initializes the steam to write to.
            If you want to restart the stream manually use 'Restart'.
            </summary>
    </member>
    <member name="M:LamestWebserver.Core.Logger.Flush">
      <summary>
            Flushes all available Streams.
            </summary>
    </member>
    <member name="M:LamestWebserver.Core.Logger.RestartStream">
      <summary>
            Atomic operation to close and open the Logger save by a mutex.
            </summary>
    </member>
    <member name="M:LamestWebserver.Core.Logger.GetDebugResponseNode">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Core.Logger.#ctor">
      <summary>
            Creates a new Logger instance.
            </summary>
    </member>
    <member name="M:LamestWebserver.Core.Logger.Finalize">
      <summary>
            Destructor for the logger closes the stream.
            </summary>
    </member>
    <member name="P:LamestWebserver.Core.Logger.OutputSourceFlags">
      <summary>
            The Flags representing the Output Source(s) to write to.
            </summary>
    </member>
    <member name="P:LamestWebserver.Core.Logger.OutputSource">
      <summary>
            The Output Source(s) the main Logger instance writes to.
            </summary>
    </member>
    <member name="P:LamestWebserver.Core.Logger.FilePath">
      <summary>
            Path for the File the logger writes to (if OutputSourceFlags contains EOutputSource.File)
            </summary>
    </member>
    <member name="P:LamestWebserver.Core.Logger.IsOpen">
      <summary>
            If manually closed or opened check this value
            </summary>
    </member>
    <member name="T:LamestWebserver.Core.Math">
      <summary>
            Contains essential mathematic extention methods.
            </summary>
    </member>
    <member name="M:LamestWebserver.Core.Math.Clamp``1(``0,``0,``0)">
      <summary>
            Clamps a variable or an object between min and max.
            </summary>
      <typeparam name="T">The type of the object.</typeparam>
      <param name="val">The value to clamp.</param>
      <param name="min">The minimum value.</param>
      <param name="max">The maximum value.</param>
      <returns>The clamped value.</returns>
    </member>
    <member name="T:LamestWebserver.Core.MiniDump">
      <summary>
            Contains functionality to write Windows Mini DumpFiles from the current process.
            
            Source: https://blogs.msdn.microsoft.com/dondu/2010/10/24/writing-minidumps-in-c/ , http://blog.kalmbach-software.de/2008/12/13/writing-minidumps-in-c/
            </summary>
    </member>
    <member name="T:LamestWebserver.Core.MiniDump.Option">
      <summary>
            Options for MiniDumps.
            From dbghelp.h
            </summary>
    </member>
    <member name="T:LamestWebserver.Core.MiniDump.ExceptionInfo">
      <summary>
            Exception Information for MiniDumps.
            </summary>
    </member>
    <member name="T:LamestWebserver.Core.MiniDump.MiniDumpExceptionInformation">
      <summary>
            MiniDump File Exception Information.
            <code>
            typedef struct _MINIDUMP_EXCEPTION_INFORMATION {
                DWORD ThreadId;
                PEXCEPTION_POINTERS ExceptionPointers;
                BOOL ClientPointers;
            } MINIDUMP_EXCEPTION_INFORMATION, *PMINIDUMP_EXCEPTION_INFORMATION;</code></summary>
    </member>
    <member name="M:LamestWebserver.Core.MiniDump.MiniDumpWriteDump(System.IntPtr,System.UInt32,System.Runtime.InteropServices.SafeHandle,System.UInt32,LamestWebserver.Core.MiniDump.MiniDumpExceptionInformation@,System.IntPtr,System.IntPtr)">
      <summary>
            Overload requiring MiniDumpExceptionInformation
            <code>
            BOOL
            WINAPI
            MiniDumpWriteDump(
                __in HANDLE hProcess,
                __in DWORD ProcessId,
                __in HANDLE hFile,
                __in MINIDUMP_TYPE DumpType,
                __in_opt PMINIDUMP_EXCEPTION_INFORMATION ExceptionParam,
                __in_opt PMINIDUMP_USER_STREAM_INFORMATION UserStreamParam,
                __in_opt PMINIDUMP_CALLBACK_INFORMATION CallbackParam
                );
            </code></summary>
    </member>
    <member name="M:LamestWebserver.Core.MiniDump.MiniDumpWriteDump(System.IntPtr,System.UInt32,System.Runtime.InteropServices.SafeHandle,System.UInt32,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>
            Overload supporting MiniDumpExceptionInformation == NULL
            </summary>
    </member>
    <member name="M:LamestWebserver.Core.MiniDump.GetCurrentThreadId">
      <summary>
            Retrieves the current ThreadID.
            </summary>
      <returns>Returns the current ThreadID.</returns>
    </member>
    <member name="M:LamestWebserver.Core.MiniDump.Write(System.Runtime.InteropServices.SafeHandle,LamestWebserver.Core.MiniDump.Option,LamestWebserver.Core.MiniDump.ExceptionInfo)">
      <summary>
            Writes current state to MiniDump.
            </summary>
      <param name="fileHandle">The file handle of the dump file to write.</param>
      <param name="dumpType">MiniDump type.</param>
      <param name="exceptionInfo">Exception info options.</param>
      <returns>returns true if successfull.</returns>
    </member>
    <member name="M:LamestWebserver.Core.MiniDump.Write(System.Runtime.InteropServices.SafeHandle,LamestWebserver.Core.MiniDump.Option)">
      <summary>
            Writes current state to MiniDump.
            </summary>
      <param name="fileHandle">The file handle of the dump file to write.</param>
      <param name="dumpType">MiniDump type.</param>
      <returns>returns true if successfull.</returns>
    </member>
    <member name="M:LamestWebserver.Core.MiniDump.Write(System.String,LamestWebserver.Core.MiniDump.Option)">
      <summary>
            Writes current state to MiniDump.
            </summary>
      <param name="filename">the name of the file to write to. (usually *.mdmp)</param>
      <param name="dumpType">MiniDump type.</param>
      <returns>returns true if successfull.</returns>
    </member>
    <member name="M:LamestWebserver.Core.MiniDump.Write(LamestWebserver.Core.MiniDump.Option)">
      <summary>
            Writes current state to MiniDump.
            </summary>
      <param name="dumpType">MiniDump type.</param>
      <returns>returns true if successfull.</returns>
    </member>
    <member name="T:LamestWebserver.Core.MultiStreamWriter">
      <summary>
            Stream Writer who can writer multiple streams.
            </summary>
    </member>
    <member name="F:LamestWebserver.Core.MultiStreamWriter.IsDisposed">
      <summary>
            Singals if the MultiStreamwriter is already disposed
            </summary>
    </member>
    <member name="M:LamestWebserver.Core.MultiStreamWriter.#ctor(System.Collections.Generic.IEnumerable{System.IO.Stream})">
      <summary>
            Creates a MultiStreamWriter.
            </summary>
      <param name="streams">
      </param>
    </member>
    <member name="M:LamestWebserver.Core.MultiStreamWriter.#ctor(System.IO.Stream[])">
      <summary>
            Creates a MultiStreamWriter.
            </summary>
      <param name="streams">
      </param>
    </member>
    <member name="M:LamestWebserver.Core.MultiStreamWriter.Write(System.String)">
      <summary>
            Write to all streams.
            </summary>
      <param name="value">
      </param>
    </member>
    <member name="M:LamestWebserver.Core.MultiStreamWriter.WriteLine(System.String)">
      <summary>
            Write a Line to all streams
            </summary>
      <param name="value">
      </param>
    </member>
    <member name="M:LamestWebserver.Core.MultiStreamWriter.Flush">
      <summary>
            Flush all streams.
            </summary>
    </member>
    <member name="M:LamestWebserver.Core.MultiStreamWriter.Close">
      <summary>
            Close all streams.
            </summary>
    </member>
    <member name="M:LamestWebserver.Core.MultiStreamWriter.Dispose">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Core.MultiStreamWriter.DisposeExcept(System.Collections.Generic.IEnumerable{System.IO.Stream})">
      <summary>
            Disposes all streams except the ones listed in the parameter.
            </summary>
      <param name="streams">The Streams not to dispose.</param>
    </member>
    <member name="M:LamestWebserver.Core.MultiStreamWriter.Finalize">
      <summary>
            De-constructor flush and closes all streams.
            </summary>
    </member>
    <member name="T:LamestWebserver.Core.NullCheckable">
      <summary>
            The abstract NullCheckable class provides functionality for checking for null like in c/c++.
            </summary>
    </member>
    <member name="M:LamestWebserver.Core.NullCheckable.op_Implicit(LamestWebserver.Core.NullCheckable)~System.Boolean">
      <summary>
            Returns false if the object is null.
            </summary>
      <param name="obj">the object</param>
    </member>
    <member name="M:LamestWebserver.Core.NullCheckable.op_LogicalNot(LamestWebserver.Core.NullCheckable)">
      <summary>
            Returns true if the object is null.
            </summary>
      <param name="obj">the object</param>
    </member>
    <member name="T:LamestWebserver.Core.Singleton`1">
      <summary>
            Provides a threadsafe, auto-initializing Singleton for a given type.
            </summary>
      <typeparam name="T">The type of the singleton.</typeparam>
    </member>
    <member name="M:LamestWebserver.Core.Singleton`1.#ctor(System.Func{`0},System.Boolean)">
      <summary>
            Creates a new Singleton.
            </summary>
      <param name="getInstanceFunction">A function to create an instance of the given type. If null will be set to default constructor of this type.</param>
      <param name="initializeDirectly">Shall the Singleton be directly initialized upfront?</param>
      <exception cref="T:System.MissingMethodException">Throws a MissingMethodException when no getInstanceFunction is given and the type does not contain a default constructor and is no ValueType.</exception>
    </member>
    <member name="M:LamestWebserver.Core.Singleton`1.op_Implicit(LamestWebserver.Core.Singleton{`0})~`0">
      <summary>
            Retrieves the Instance of the singleton.
            </summary>
      <param name="singleton">The current singleton.</param>
      <returns>Returns the Instance of the singleton.</returns>
    </member>
    <member name="M:LamestWebserver.Core.Singleton`1.GetInstance">
      <summary>
            Retrieves the Instance of the singleton.
            </summary>
      <returns>Returns the Instance of the singleton.</returns>
    </member>
    <member name="M:LamestWebserver.Core.Singleton`1.Equals(System.Object)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Core.Singleton`1.ToString">
      <inheritdoc />
    </member>
    <member name="P:LamestWebserver.Core.Singleton`1.Instance">
      <summary>
            The Instance of the Singleton. The instance is automatically initalized when you first read from it.
            </summary>
    </member>
    <member name="T:LamestWebserver.Core.ThreadedWorker">
      <summary>
            Executes enqueued tasks using a fixed amount of worker threads.
            </summary>
    </member>
    <member name="F:LamestWebserver.Core.ThreadedWorker.CurrentWorker">
      <summary>
            The ThreadedWorker used in the Server.
            </summary>
    </member>
    <member name="F:LamestWebserver.Core.ThreadedWorker.DefaultWorkerCount">
      <summary>
            The default Thread-count of a new Threaded Worker.
            </summary>
    </member>
    <member name="F:LamestWebserver.Core.ThreadedWorker.WorkerCount">
      <summary>
            The count of WorkerThreads for this ThreadedWorker.
            </summary>
    </member>
    <member name="M:LamestWebserver.Core.ThreadedWorker.#ctor">
      <summary>
            Constructs a new ThreadedWorker with the default amount of WorkerThreads
            </summary>
    </member>
    <member name="M:LamestWebserver.Core.ThreadedWorker.#ctor(System.UInt32)">
      <summary>
            Constructs a new ThreadedWorker with a specific amount of WorkerThreads
            </summary>
      <param name="workerCount">the amount of WorkerThreads</param>
    </member>
    <member name="M:LamestWebserver.Core.ThreadedWorker.EnqueueJob(System.Delegate,System.Object[])">
      <summary>
            Enqueues a new Task to the ThreadedWorker pool
            </summary>
      <param name="task">the delegate to start</param>
      <param name="parameters">the parameters to start the delegate with</param>
      <returns>The WorkerTask object for this Job.</returns>
    </member>
    <member name="M:LamestWebserver.Core.ThreadedWorker.Stop(System.Nullable{System.Int32})">
      <summary>
            Stops all WorkerTasks
            <paramref name="timeout">The timeout in milliseconds to wait before forcefully aborting threads.<para />Warning: This will most likely NOT free some memory. Please just use with reasonable timespans.</paramref></summary>
    </member>
    <member name="M:LamestWebserver.Core.ThreadedWorker.Join(System.Nullable{System.Int32})">
      <summary>
            Waits until all WorkerTasks are done
            <paramref name="timeout">The timeout in milliseconds to wait before forcefully aborting threads.<para />Warning: This will most likely NOT free some memory. Please just use with reasonable timespans.</paramref></summary>
    </member>
    <member name="M:LamestWebserver.Core.ThreadedWorker.JoinTasks(LamestWebserver.Core.WorkerTask[])">
      <summary>
            Waits until multiple Workers have finished running.
            <para />
            This Join will throw an Exception if raised inside the workers.
            </summary>
      <param name="workers">The workers to wait for.</param>
    </member>
    <member name="M:LamestWebserver.Core.ThreadedWorker.JoinTasks(System.TimeSpan,LamestWebserver.Core.WorkerTask[])">
      <summary>
            Waits until multiple Workers have finished running.
            <para />
            This Join will throw an Exception if raised inside the workers.
            </summary>
      <param name="maximumTotalWaitTime">The maximum total time to wait for the tasks to finish.</param>
      <param name="workers">The workers to wait for.</param>
    </member>
    <member name="M:LamestWebserver.Core.ThreadedWorker.JoinTasksSafe(LamestWebserver.Core.WorkerTask[])">
      <summary>
            Waits until multiple workers have finished running.
            <para />
            This Join will not throw Exceptions.
            </summary>
      <param name="workers">The workers to wait for.</param>
      <returns>Returns true if successfully joined all workers.</returns>
    </member>
    <member name="M:LamestWebserver.Core.ThreadedWorker.JoinTasksSafe(System.TimeSpan,LamestWebserver.Core.WorkerTask[])">
      <summary>
            Waits until multiple Workers have finished running.
            <para />
            This Join will not throw Exceptions.
            </summary>
      <param name="maximumTotalWaitTime">The maximum total time to wait for the tasks to finish.</param>
      <param name="workers">The workers to wait for.</param>
      <returns>Returns true if successfully joined all workers.</returns>
    </member>
    <member name="M:LamestWebserver.Core.ThreadedWorker.GetDebugResponseNode">
      <inheritdoc />
    </member>
    <member name="P:LamestWebserver.Core.ThreadedWorker.TaskCount">
      <summary>
            The amount of currently enqueued tasks
            </summary>
    </member>
    <member name="T:LamestWebserver.Core.WorkerTask">
      <summary>
            A WorkerTasks to be executed by ThreadedWorker's WorkerThreads.
            </summary>
    </member>
    <member name="T:LamestWebserver.Core.WorkerTask.ETaskState">
      <summary>
            An enum containing the possible State Types of a WorkerTask.
            </summary>
    </member>
    <member name="F:LamestWebserver.Core.WorkerTask.ETaskState.Waiting">
      <summary>
            The Task has not been worked on yet.
            </summary>
    </member>
    <member name="F:LamestWebserver.Core.WorkerTask.ETaskState.Executing">
      <summary>
            The task is currently being executed.
            </summary>
    </member>
    <member name="F:LamestWebserver.Core.WorkerTask.ETaskState.Done">
      <summary>
            The task finished successfully.
            </summary>
    </member>
    <member name="F:LamestWebserver.Core.WorkerTask.ETaskState.ExceptionThrown">
      <summary>
            The task execution raised an Exception.
            </summary>
    </member>
    <member name="F:LamestWebserver.Core.WorkerTask.Parameters">
      <summary>
            The parameters to start the delegate with
            </summary>
    </member>
    <member name="F:LamestWebserver.Core.WorkerTask.Task">
      <summary>
            The delegate to start
            </summary>
    </member>
    <member name="M:LamestWebserver.Core.WorkerTask.#ctor(System.Delegate,System.Object[])">
      <summary>
            Constructs a new WorkerTask
            </summary>
      <param name="task">the delegate to start</param>
      <param name="parameters">the parameters to execute on the delegate</param>
    </member>
    <member name="M:LamestWebserver.Core.WorkerTask.JoinSafe">
      <summary>
            Waits until the task has been executed.
            <para />
            This Join will not throw Exceptions.
            </summary>
      <returns>Returns true if task was executed successfully.</returns>
    </member>
    <member name="M:LamestWebserver.Core.WorkerTask.JoinSafe(System.Nullable{System.TimeSpan})">
      <summary>
            Waits until the task has been executed.
            <para />
            This Join will not throw Exceptions.
            </summary>
      <param name="maximumWaitTime">The maximum amount of time to wait for the task to be executed.</param>
      <returns>Returns true if task was executed successfully.</returns>
    </member>
    <member name="M:LamestWebserver.Core.WorkerTask.JoinSafe(System.Int32)">
      <summary>
            Waits until the task has been executed.
            <para />
            This Join will not throw Exceptions.
            </summary>
      <param name="milliseconds">The maximum amount of time to wait for the task to be executed in milliseconds.</param>
      <returns>Returns true if task was executed successfully.</returns>
    </member>
    <member name="M:LamestWebserver.Core.WorkerTask.JoinSafe(System.Object@,System.Nullable{System.TimeSpan})">
      <summary>
            Waits until the task has been executed.
            <para />
            This Join will not throw Exceptions.
            </summary>
      <param name="returnedValue">The returned value - if any.</param>
      <param name="maximumWaitTime">The maximum amount of time to wait for the task to be executed.</param>
      <returns>Returns true if task was executed successfully.</returns>
    </member>
    <member name="M:LamestWebserver.Core.WorkerTask.JoinSafe``1(``0@,System.Nullable{System.TimeSpan})">
      <summary>
            Waits until the task has been executed.
            <para />
            This Join will not throw Exceptions.
            </summary>
      <typeparam name="T">The Type of the returned value to be casted into.</typeparam>
      <param name="returnedValue">The returned value casted to T.</param>
      <param name="maximumWaitTime">The maximum amount of time to wait for the task to be executed.</param>
      <returns>Returns true if task was executed successfully.</returns>
    </member>
    <member name="M:LamestWebserver.Core.WorkerTask.JoinSafeOrNull``1(System.Nullable{System.TimeSpan})">
      <summary>
            Waits until the task has been executed.
            <para />
            This Join will not throw Exceptions.
            </summary>
      <typeparam name="T">The Type of the returned value to be casted into.</typeparam>
      <param name="maximumWaitTime">The maximum amount of time to wait for the task to be executed.</param>
      <returns>The returned value casted to T if successfull or null if it failed.</returns>
    </member>
    <member name="M:LamestWebserver.Core.WorkerTask.Join">
      <summary>
            Waits until the task has been executed.
            <param />
            This Join will throw an Exception if raised during execution.
            </summary>
    </member>
    <member name="M:LamestWebserver.Core.WorkerTask.Join(System.Nullable{System.TimeSpan})">
      <summary>
            Waits until the task has been executed.
            <param />
            This Join will throw an Exception if raised during execution.
            </summary>
      <param name="maximumWaitTime">The maximum amount of time to wait for the task to be executed.</param>
    </member>
    <member name="M:LamestWebserver.Core.WorkerTask.Join(System.Int32)">
      <summary>
            Waits until the task has been executed.
            <param />
            This Join will throw an Exception if raised during execution.
            </summary>
      <param name="milliseconds">The maximum amount of time to wait for the task to be executed in milliseconds.</param>
    </member>
    <member name="M:LamestWebserver.Core.WorkerTask.Join(System.Object@,System.Nullable{System.TimeSpan})">
      <summary>
            Waits until the task has been executed.
            <param />
            This Join will throw an Exception if raised during execution.
            </summary>
      <param name="returnedValue">The returned value - if any.</param>
      <param name="maximumWaitTime">The maximum amount of time to wait for the task to be executed.</param>
    </member>
    <member name="M:LamestWebserver.Core.WorkerTask.Join``1(``0@,System.Nullable{System.TimeSpan})">
      <summary>
            Waits until the task has been executed.
            <param />
            This Join will throw an Exception if raised during execution.
            </summary>
      <typeparam name="T">The Type of the returned value to be casted into.</typeparam>
      <param name="returnedValue">The returned value casted to T.</param>
      <param name="maximumWaitTime">The maximum amount of time to wait for the task to be executed.</param>
    </member>
    <member name="P:LamestWebserver.Core.WorkerTask.State">
      <summary>
            The current Execution State of this task.
            </summary>
    </member>
    <member name="P:LamestWebserver.Core.WorkerTask.ReturnedValue">
      <summary>
            The returned value from the executed task - if any.
            </summary>
    </member>
    <member name="P:LamestWebserver.Core.WorkerTask.ExceptionThrown">
      <summary>
            The thrown exception from the executed task - if any.
            </summary>
    </member>
    <member name="T:LamestWebserver.Core.UnfinishedTaskException">
      <summary>
            An exception to represent that the given task(s) could not be executed in the given timespan. 
            </summary>
    </member>
    <member name="M:LamestWebserver.Core.UnfinishedTaskException.#ctor">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Core.UnfinishedTaskException.#ctor(System.String)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Core.UnfinishedTaskException.#ctor(System.String,System.Exception)">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.Core.ElevateRightsWindows">
      <summary>
            Tools for executing the current Application with elevated rights
            
            Source: https://code.msdn.microsoft.com/windowsapps/CSUACSelfElevation-644673d3
            </summary>
    </member>
    <member name="M:LamestWebserver.Core.ElevateRightsWindows.ElevateRights">
      <summary>
            Reexecutes the current process with administrative rights and exits the current one if you don't already have these
            </summary>
    </member>
    <member name="P:LamestWebserver.Core.ElevateRightsWindows.IsRunAsAdmin">
      <summary>
            The function checks whether the current process is run as administrator.
            In other words, it dictates whether the primary access token of the 
            process belongs to user account that is a member of the local 
            Administrators group and it is elevated.
            </summary>
      <returns>
            Returns true if the primary access token of the process belongs to user 
            account that is a member of the local Administrators group and it is 
            elevated. Returns false if the token does not.
            </returns>
    </member>
    <member name="P:LamestWebserver.Core.ElevateRightsWindows.IsProcessElevated">
      <summary>
            The function gets the elevation information of the current process. It 
            dictates whether the process is elevated or not. Token elevation is only 
            available on Windows Vista and newer operating systems, thus 
            IsProcessElevated throws a C++ exception if it is called on systems prior 
            to Windows Vista. It is not appropriate to use this function to determine 
            whether a process is run as administartor.
            </summary>
      <returns>
            Returns true if the process is elevated. Returns false if it is not.
            </returns>
      <exception cref="T:System.ComponentModel.Win32Exception">
            When any native Windows API call fails, the function throws a Win32Exception 
            with the last error code.
            </exception>
      <remarks>
            TOKEN_INFORMATION_CLASS provides TokenElevationType to check the elevation 
            type (TokenElevationTypeDefault / TokenElevationTypeLimited / 
            TokenElevationTypeFull) of the process. It is different from TokenElevation 
            in that, when UAC is turned off, elevation type always returns 
            TokenElevationTypeDefault even though the process is elevated (Integrity 
            Level == High). In other words, it is not safe to say if the process is 
            elevated based on elevation type. Instead, we should use TokenElevation. 
            </remarks>
    </member>
    <member name="T:LamestWebserver.Core.TOKEN_INFORMATION_CLASS">
      <summary>
            The TOKEN_INFORMATION_CLASS enumeration type contains values that 
            specify the type of information being assigned to or retrieved from 
            an access token.
            </summary>
    </member>
    <member name="T:LamestWebserver.Core.WELL_KNOWN_SID_TYPE">
      <summary>
            The WELL_KNOWN_SID_TYPE enumeration type is a list of commonly used 
            security identifiers (SIDs). Programs can pass these values to the 
            CreateWellKnownSid function to create a SID from this list.
            </summary>
    </member>
    <member name="T:LamestWebserver.Core.SECURITY_IMPERSONATION_LEVEL">
      <summary>
            The SECURITY_IMPERSONATION_LEVEL enumeration type contains values 
            that specify security impersonation levels. Security impersonation 
            levels govern the degree to which a server process can act on behalf 
            of a client process.
            </summary>
    </member>
    <member name="T:LamestWebserver.Core.TOKEN_ELEVATION_TYPE">
      <summary>
            The TOKEN_ELEVATION_TYPE enumeration indicates the elevation type of 
            token being queried by the GetTokenInformation function or set by 
            the SetTokenInformation function.
            </summary>
    </member>
    <member name="T:LamestWebserver.Core.SID_AND_ATTRIBUTES">
      <summary>
            The structure represents a security identifier (SID) and its 
            attributes. SIDs are used to uniquely identify users or groups.
            </summary>
    </member>
    <member name="T:LamestWebserver.Core.TOKEN_ELEVATION">
      <summary>
            The structure indicates whether a token has elevated privileges.
            </summary>
    </member>
    <member name="T:LamestWebserver.Core.TOKEN_MANDATORY_LABEL">
      <summary>
            The structure specifies the mandatory integrity level for a token.
            </summary>
    </member>
    <member name="T:LamestWebserver.Core.SafeTokenHandle">
      <summary>
            Represents a wrapper class for a token handle.
            </summary>
    </member>
    <member name="F:LamestWebserver.Core.NativeMethods.BCM_SETSHIELD">
      <summary>
            Sets the elevation required state for a specified button or 
            command link to display an elevated icon. 
            </summary>
    </member>
    <member name="M:LamestWebserver.Core.NativeMethods.OpenProcessToken(System.IntPtr,System.UInt32,LamestWebserver.Core.SafeTokenHandle@)">
      <summary>
            The function opens the access token associated with a process.
            </summary>
      <param name="hProcess">
            A handle to the process whose access token is opened.
            </param>
      <param name="desiredAccess">
            Specifies an access mask that specifies the requested types of 
            access to the access token. 
            </param>
      <param name="hToken">
            Outputs a handle that identifies the newly opened access token 
            when the function returns.
            </param>
      <returns>
      </returns>
    </member>
    <member name="M:LamestWebserver.Core.NativeMethods.DuplicateToken(LamestWebserver.Core.SafeTokenHandle,LamestWebserver.Core.SECURITY_IMPERSONATION_LEVEL,LamestWebserver.Core.SafeTokenHandle@)">
      <summary>
            The function creates a new access token that duplicates one 
            already in existence.
            </summary>
      <param name="ExistingTokenHandle">
            A handle to an access token opened with TOKEN_DUPLICATE access.
            </param>
      <param name="ImpersonationLevel">
            Specifies a SECURITY_IMPERSONATION_LEVEL enumerated type that 
            supplies the impersonation level of the new token.
            </param>
      <param name="DuplicateTokenHandle">
            Outputs a handle to the duplicate token. 
            </param>
      <returns>
      </returns>
    </member>
    <member name="M:LamestWebserver.Core.NativeMethods.GetTokenInformation(LamestWebserver.Core.SafeTokenHandle,LamestWebserver.Core.TOKEN_INFORMATION_CLASS,System.IntPtr,System.Int32,System.Int32@)">
      <summary>
            The function retrieves a specified type of information about an 
            access token. The calling process must have appropriate access 
            rights to obtain the information.
            </summary>
      <param name="hToken">
            A handle to an access token from which information is retrieved.
            </param>
      <param name="tokenInfoClass">
            Specifies a value from the TOKEN_INFORMATION_CLASS enumerated 
            type to identify the type of information the function retrieves.
            </param>
      <param name="pTokenInfo">
            A pointer to a buffer the function fills with the requested 
            information.
            </param>
      <param name="tokenInfoLength">
            Specifies the size, in bytes, of the buffer pointed to by the 
            TokenInformation parameter. 
            </param>
      <param name="returnLength">
            A pointer to a variable that receives the number of bytes needed 
            for the buffer pointed to by the TokenInformation parameter. 
            </param>
      <returns>
      </returns>
    </member>
    <member name="M:LamestWebserver.Core.NativeMethods.SendMessage(System.IntPtr,System.UInt32,System.Int32,System.IntPtr)">
      <summary>
            Sends the specified message to a window or windows. The function 
            calls the window procedure for the specified window and does not 
            return until the window procedure has processed the message. 
            </summary>
      <param name="hWnd">
            Handle to the window whose window procedure will receive the 
            message.
            </param>
      <param name="Msg">Specifies the message to be sent.</param>
      <param name="wParam">
            Specifies additional message-specific information.
            </param>
      <param name="lParam">
            Specifies additional message-specific information.
            </param>
      <returns>
      </returns>
    </member>
    <member name="M:LamestWebserver.Core.NativeMethods.GetSidSubAuthority(System.IntPtr,System.UInt32)">
      <summary>
            The function returns a pointer to a specified subauthority in a 
            security identifier (SID). The subauthority value is a relative 
            identifier (RID).
            </summary>
      <param name="pSid">
            A pointer to the SID structure from which a pointer to a 
            subauthority is to be returned.
            </param>
      <param name="nSubAuthority">
            Specifies an index value identifying the subauthority array 
            element whose address the function will return.
            </param>
      <returns>
            If the function succeeds, the return value is a pointer to the 
            specified SID subauthority. To get extended error information, 
            call GetLastError. If the function fails, the return value is 
            undefined. The function fails if the specified SID structure is 
            not valid or if the index value specified by the nSubAuthority 
            parameter is out of bounds.
            </returns>
    </member>
    <member name="T:LamestWebserver.Core.Web.WebCrawler">
      <summary>
            Provides an automated easy-to-use WebCrawler.
            </summary>
    </member>
    <member name="T:LamestWebserver.Core.Web.WebCrawler.WebCrawlerState">
      <summary>
            This is just public to be serializable.
            </summary>
    </member>
    <member name="F:LamestWebserver.Core.Web.WebCrawler.WebCrawlerState.VisitedPages">
      <summary>
            The visited pages so far.
            </summary>
    </member>
    <member name="F:LamestWebserver.Core.Web.WebCrawler.WebCrawlerState.ToGo">
      <summary>
            The discovered Pages that haven't been visited.
            </summary>
    </member>
    <member name="M:LamestWebserver.Core.Web.WebCrawler.WebCrawlerState.#ctor">
      <summary>
            Constructs a new WebCrawlerState object and initializes the internal collecions.
            </summary>
    </member>
    <member name="F:LamestWebserver.Core.Web.WebCrawler.StartURL">
      <summary>
            The URL to begin with.
            </summary>
    </member>
    <member name="F:LamestWebserver.Core.Web.WebCrawler.Prefixes">
      <summary>
            The Prefixes of the valid URLs to Crawl into.
            </summary>
    </member>
    <member name="F:LamestWebserver.Core.Web.WebCrawler.OnNewPage">
      <summary>
            The delegate to execute whenever a new match was found.
            </summary>
    </member>
    <member name="F:LamestWebserver.Core.Web.WebCrawler.OnError">
      <summary>
            The delegate to execute whenever a response is invalid.
            </summary>
    </member>
    <member name="F:LamestWebserver.Core.Web.WebCrawler.CallSynchrously">
      <summary>
            Specifies whether the OnNewPage and OnError functions shall be called synchronously or in parallel.
            </summary>
    </member>
    <member name="F:LamestWebserver.Core.Web.WebCrawler.IsDone">
      <summary>
            Has the WebCrawler processed every possible page?
            </summary>
    </member>
    <member name="F:LamestWebserver.Core.Web.WebCrawler.KeepLastEntry">
      <summary>
            If false: the last visited page before OnNewPage returns false is removed from VisitedPages. 
            This might be handy if the bot detection of a webpage is messing you up and you want to continue where you _successfully_ left of.
            </summary>
    </member>
    <member name="M:LamestWebserver.Core.Web.WebCrawler.#ctor(System.String,System.String[],System.Func{System.String,LamestWebserver.Core.Web.WebCrawler,System.Boolean},System.Func{System.Exception,System.Boolean},LamestWebserver.Core.Web.WebRequestFactory,System.Int32)">
      <summary>
            Constructs a new WebCrawler instance. Doesn't start it yet.
            </summary>
      <param name="startURL">The URL to begin crawling at.</param>
      <param name="prefixes">The valid prefixes of an URL to load (usually the page domain that you want to crawl through). ALL pages are valid if null.</param>
      <param name="onNewPage">The function to execute whenever a valid page is found.</param>
      <param name="onError">The function to execute whenever the response is invalid.</param>
      <param name="webRequestFactory">A WebRequestFactory to construct the Requests with.</param>
      <param name="threadCount">The number of worker-threads to use.</param>
    </member>
    <member name="M:LamestWebserver.Core.Web.WebCrawler.#ctor(System.String,System.String,System.Func{System.String,LamestWebserver.Core.Web.WebCrawler,System.Boolean},System.Func{System.Exception,System.Boolean},LamestWebserver.Core.Web.WebRequestFactory,System.Int32)">
      <summary>
            Constructs a new WebCrawler instance. Doesn't start it yet.
            </summary>
      <param name="startURL">The URL to begin crawling at.</param>
      <param name="prefix">The valid prefix of an URL to load (usually the page domain that you want to crawl through).</param>
      <param name="onNewPage">The function to execute whenever a valid page is found. Returns if the links inside this page should be visited.</param>
      <param name="onError">The function to execute whenever the response is invalid. Returns if the WebCrawler should continue running.</param>
      <param name="webRequestFactory">A WebRequestFactory to construct the Requests with.</param>
      <param name="threadCount">The number of worker-threads to use.</param>
    </member>
    <member name="M:LamestWebserver.Core.Web.WebCrawler.LoadState(System.String)">
      <summary>
            Loads a previous state of the crawler. (does not load the webRequestFactory caches)
            </summary>
      <param name="fileName">The filename of the saved state.</param>
    </member>
    <member name="M:LamestWebserver.Core.Web.WebCrawler.SaveState(System.String)">
      <summary>
            Saves the current state of the crawler. (does not save the webRequestFactory caches)
            </summary>
      <param name="fileName">The filename for the saved state.</param>
    </member>
    <member name="M:LamestWebserver.Core.Web.WebCrawler.Stop">
      <summary>
            Stops the crawler.
            </summary>
    </member>
    <member name="M:LamestWebserver.Core.Web.WebCrawler.Start">
      <summary>
            Starts the WebCrawler.
            </summary>
      <returns>Returns the current WebCrawler so that you can type 'var crawler = new WebCrawler(...).Start();'.</returns>
    </member>
    <member name="P:LamestWebserver.Core.Web.WebCrawler.WebRequestFactory">
      <summary>
            The internal WebRequestFactory.
            </summary>
    </member>
    <member name="T:LamestWebserver.Core.Web.WebRequestFactory">
      <summary>
            Provivides functionality for quickly generating a lot of similar WebRequests.
            </summary>
    </member>
    <member name="F:LamestWebserver.Core.Web.WebRequestFactory.Responses">
      <summary>
            The cached Responses of recent Requests.
            </summary>
    </member>
    <member name="F:LamestWebserver.Core.Web.WebRequestFactory.Redirects">
      <summary>
            The cached Redirects of recent Redirects.
            </summary>
    </member>
    <member name="F:LamestWebserver.Core.Web.WebRequestFactory.Cookies">
      <summary>
            The specified Cookies for the WebRequests.
            </summary>
    </member>
    <member name="F:LamestWebserver.Core.Web.WebRequestFactory.UserAgentString">
      <summary>
            The UserAgent string to send in every WebRequest.
            </summary>
    </member>
    <member name="F:LamestWebserver.Core.Web.WebRequestFactory.Timeout">
      <summary>
            The default Timeout in milliseconds for every request.
            </summary>
    </member>
    <member name="F:LamestWebserver.Core.Web.WebRequestFactory.MaximumRetries">
      <summary>
            The maximum number of Retries per Request on Timeout.
            </summary>
    </member>
    <member name="M:LamestWebserver.Core.Web.WebRequestFactory.#ctor(System.Boolean)">
      <summary>
            Creates a new WebRequestFactory instance.
            </summary>
      <param name="cacheResponses">Shall responses and redirects be cached?</param>
    </member>
    <member name="M:LamestWebserver.Core.Web.WebRequestFactory.FlushCache">
      <summary>
            Clears the caches for Responses and Redirects if they were enabled.
            </summary>
    </member>
    <member name="M:LamestWebserver.Core.Web.WebRequestFactory.LoadCacheState(System.String)">
      <summary>
            Loads the cached responses and redirects from files.
            </summary>
      <param name="fileName">the filename. (will be suffixed with .Responses or .Redirects)</param>
    </member>
    <member name="M:LamestWebserver.Core.Web.WebRequestFactory.AppendCacheState(System.String)">
      <summary>
            Loads the cached responses and redirects from files and appends them to the current collection of responses and redirects.
            </summary>
      <param name="fileName">the filename. (will be suffixed with .Responses or .Redirects)</param>
    </member>
    <member name="M:LamestWebserver.Core.Web.WebRequestFactory.SaveCacheState(System.String)">
      <summary>
            Saves the cached responses and redirects to files.
            </summary>
      <param name="fileName">the filename. (will be suffixed with .Responses or .Redirects)</param>
    </member>
    <member name="M:LamestWebserver.Core.Web.WebRequestFactory.GetResponse(System.String,System.String,System.Int32,System.String,System.Net.WebHeaderCollection)">
      <summary>
            Retrieves a Response as string.
            </summary>
      <param name="URL">The requested URL.</param>
      <param name="maxRedirects">The maximum amount of redirects before stop following.</param>
      <returns>Returns the response as string.</returns>
    </member>
    <member name="M:LamestWebserver.Core.Web.WebRequestFactory.HasCached(System.String,System.String,System.Int32)">
      <summary>
            Has this particular URL been cached?
            </summary>
      <param name="URL">The URL.</param>
      <returns>Returns true if the URL has been cached.</returns>
    </member>
    <member name="M:LamestWebserver.Core.Web.WebRequestFactory.GetResponse(System.String,System.Net.HttpStatusCode@,System.String,System.Int32,System.String,System.Net.WebHeaderCollection)">
      <summary>
            Retrieves a Response as string.
            </summary>
      <param name="URL">The requested URL.</param>
      <param name="statusCode">The status code of the Request.</param>
      <param name="maxRedirects">The maximum amount of redirects before stop following.</param>
      <returns>Returns the response as string.</returns>
    </member>
    <member name="M:LamestWebserver.Core.Web.WebRequestFactory.GetResponseSimple(System.String,System.Net.HttpStatusCode@)">
      <summary>
            Simply retrieves a response of the given URL.
            </summary>
      <param name="URL">The requested URL.</param>
      <param name="statusCode">The returned status code of the response.</param>
      <returns>
      </returns>
    </member>
    <member name="P:LamestWebserver.Core.Web.WebRequestFactory.RandomWaitTimeMs">
      <summary>
            The time to randomly wait after a completed request. (Item1 is MinimumTime, Item2 is MaximumTime)
            </summary>
    </member>
    <member name="T:LamestWebserver.Core.Parsing.ParsingStringExtentions">
      <summary>
            Provides Extention Methods for string operations.
            </summary>
    </member>
    <member name="M:LamestWebserver.Core.Parsing.ParsingStringExtentions.FindBetween(System.String,System.String,System.String)">
      <summary>
            Returns the string between two substrings of this string.
            </summary>
      <param name="s">this string.</param>
      <param name="before">the string before the requested string.</param>
      <param name="after">the string after the requested string.</param>
      <returns>the string inbetween or null.</returns>
    </member>
    <member name="M:LamestWebserver.Core.Parsing.ParsingStringExtentions.FindString(System.String,System.String,System.Int32@)">
      <summary>
            Searches for a Substring and returns it's start index.
            </summary>
      <param name="s">this string.</param>
      <param name="find">the substring to find.</param>
      <param name="index">the index where the substring begins.</param>
      <returns>returns true if the string could be found. otherwise false.</returns>
    </member>
    <member name="M:LamestWebserver.Core.Parsing.ParsingStringExtentions.GetKMP(System.String)">
      <summary>
            Returns the indexes of the Knuth–Morris–Pratt algorithm of a given string.
            </summary>
      <param name="s">this string.</param>
      <returns>the Knuth–Morris–Pratt algorithm indexes.</returns>
    </member>
    <member name="M:LamestWebserver.Core.Parsing.ParsingStringExtentions.Parse(System.String,System.String[])">
      <summary>
            Parses a string like Split(...) but keeps the splitting strings as separate entries.
            </summary>
      <param name="s">this string.</param>
      <param name="delimiters">the delimiters to split at.</param>
      <returns>A list of the splitted string parts without empty entries.</returns>
    </member>
    <member name="M:LamestWebserver.Core.Parsing.ParsingStringExtentions.Parse(System.String,System.Boolean,System.String[])">
      <summary>
            Parses a string like Split(...) but keeps the splitting strings as separate entries.
            </summary>
      <param name="s">this string.</param>
      <param name="removeEmptyEntries">shall empty strings be removed from the returned list?</param>
      <param name="delimiters">the delimiters to split at.</param>
      <returns>A list of the splitted string parts.</returns>
    </member>
    <member name="T:LamestWebserver.Core.Memory.FlushableMemoryPool">
      <summary>
            Provides very fast Allocation for a flushable volatile memory pool.
            </summary>
    </member>
    <member name="F:LamestWebserver.Core.Memory.FlushableMemoryPool.MaximumThreads">
      <summary>
            When this amount of concurrent FlushableMemoryPools is exceeded raise an exception. (If it is negative or zero: never raise an exception)
            </summary>
    </member>
    <member name="F:LamestWebserver.Core.Memory.FlushableMemoryPool.ThreadID">
      <summary>
            Retrieves the ThreadID of this FlushableMemoryPool.
            </summary>
    </member>
    <member name="M:LamestWebserver.Core.Memory.FlushableMemoryPool.AquireOrFlush">
      <summary>
            Creates or Flushes the FlushableMemoryPool of the current thread.
            </summary>
    </member>
    <member name="M:LamestWebserver.Core.Memory.FlushableMemoryPool.Allocate``1(System.Int32)">
      <summary>
            Allocates a block of memory.
            </summary>
      <typeparam name="T">The type of the object(s) to allocate memory for.</typeparam>
      <param name="count">The number of object(s) to allocate memory for.</param>
      <returns>The address as IntPtr.</returns>
    </member>
    <member name="M:LamestWebserver.Core.Memory.FlushableMemoryPool.Destroy">
      <summary>
            Destroys the FlushableMemoryPool of the current thread.
            </summary>
    </member>
    <member name="M:LamestWebserver.Core.Memory.FlushableMemoryPool.#ctor(System.Int32)">
      <summary>
            Constructs a new FlushableMemoryPool.
            </summary>
    </member>
    <member name="M:LamestWebserver.Core.Memory.FlushableMemoryPool.Finalize">
      <summary>
            Destructs the current Flushable Memory Pool by calling Dispose();
            </summary>
    </member>
    <member name="M:LamestWebserver.Core.Memory.FlushableMemoryPool.AllocateMemory``1(System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Core.Memory.FlushableMemoryPool.Free(System.IntPtr)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Core.Memory.FlushableMemoryPool.Flush">
      <summary>
            Flushes the Memory and resets the position.
            </summary>
    </member>
    <member name="M:LamestWebserver.Core.Memory.FlushableMemoryPool.Dispose">
      <inheritdoc />
    </member>
    <member name="P:LamestWebserver.Core.Memory.FlushableMemoryPool.Size">
      <summary>
            Retrieves the allocated size of this FlushableMemoryPool.
            </summary>
    </member>
    <member name="P:LamestWebserver.Core.Memory.FlushableMemoryPool.AllocatedSize">
      <summary>
            Retrieves the allocated size of the FlushableMemoryPool of the current thread.
            </summary>
    </member>
    <member name="T:LamestWebserver.Core.Memory.IAllocator">
      <summary>
            A memory allocation and freeing interface.
            </summary>
    </member>
    <member name="M:LamestWebserver.Core.Memory.IAllocator.AllocateMemory``1(System.Int32)">
      <summary>
            Allocates a block of memory.
            </summary>
      <typeparam name="T">The type of the object(s) to allocate memory for.</typeparam>
      <param name="count">The number of object(s) to allocate memory for.</param>
      <returns>The address as IntPtr.</returns>
    </member>
    <member name="M:LamestWebserver.Core.Memory.IAllocator.Free(System.IntPtr)">
      <summary>
            Frees a given IntPtr allocated with this Allocator.
            </summary>
      <param name="pointer">The IntPtr to free.</param>
    </member>
    <member name="T:LamestWebserver.Core.Graphics.Thumbnail">
      <summary>
            A Thumbnail image.
            </summary>
    </member>
    <member name="F:LamestWebserver.Core.Graphics.Thumbnail.Image">
      <summary>
            The Thumbnail image as Bitmap.
            </summary>
    </member>
    <member name="M:LamestWebserver.Core.Graphics.Thumbnail.#ctor(System.Drawing.Image,System.Int32,System.Int32)">
      <summary>
            Creates a new Thumbnail from an Image.
            </summary>
      <param name="image">The image to create a thumbnail of.</param>
      <param name="maxWidth">The maximum width in pixels of the thumbnail.</param>
      <param name="maxHeight">The maximum height in pixels of the thumbnail.</param>
    </member>
    <member name="M:LamestWebserver.Core.Graphics.Thumbnail.#ctor(System.String,System.Int32,System.Int32)">
      <summary>
            Creates a new Thumbnail from a File.
            </summary>
      <param name="path">The Path of the File.</param>
      <param name="maxWidth">The maximum width in pixels of the thumbnail.</param>
      <param name="maxHeight">The maximum height in pixels of the thumbnail.</param>
    </member>
    <member name="M:LamestWebserver.Core.Graphics.Thumbnail.#ctor(System.IO.Stream,System.Int32,System.Int32)">
      <summary>
            Creates a new Thumbnail from a Stream.
            </summary>
      <param name="stream">The stream to load the file from.</param>
      <param name="maxWidth">The maximum width in pixels of the thumbnail.</param>
      <param name="maxHeight">The maximum height in pixels of the thumbnail.</param>
    </member>
    <member name="M:LamestWebserver.Core.Graphics.Thumbnail.Save(System.String)">
      <summary>
            Saves the Thumbnail image to a File.
            </summary>
      <param name="path">The path of the file.</param>
    </member>
    <member name="M:LamestWebserver.Core.Graphics.Thumbnail.Save(System.IO.Stream)">
      <summary>
            Writes the Thumbnail to a Stream.
            </summary>
      <param name="stream">The stream to write to.</param>
    </member>
    <member name="T:LamestWebserver.Collections.FixedSizeQueue`1">
      <summary>
            A Queue of fixed size that just wraps around and overrides the oldest elements if full.
            </summary>
      <typeparam name="T">The type of the queue elements.</typeparam>
    </member>
    <member name="M:LamestWebserver.Collections.FixedSizeQueue`1.#ctor(System.Int32)">
      <summary>
            Constructs a new FixedSizeQueue.
            </summary>
      <param name="maximumCapacity">The maximum capacity of this Queue.</param>
    </member>
    <member name="M:LamestWebserver.Collections.FixedSizeQueue`1.Push(`0)">
      <summary>
            Adds an element to the queue.
            </summary>
      <param name="element">The element to add.</param>
    </member>
    <member name="M:LamestWebserver.Collections.FixedSizeQueue`1.Clear">
      <summary>
            Clears the FixesSizeQueue.
            </summary>
    </member>
    <member name="M:LamestWebserver.Collections.FixedSizeQueue`1.Contains(`0)">
      <summary>
            Returns true if this FixedSizeQueue contains a given element.
            </summary>
      <param name="item">The element to look for.</param>
      <returns>Returns true if the element was found and false if not.</returns>
    </member>
    <member name="M:LamestWebserver.Collections.FixedSizeQueue`1.CopyTo(`0[],System.Int32)">
      <summary>
            Copies the contents of this FixedSizeQueue into an array.
            </summary>
      <param name="array">The array to copy to.</param>
      <param name="arrayIndex">The index to start with in the given array.</param>
    </member>
    <member name="M:LamestWebserver.Collections.FixedSizeQueue`1.GetEnumerator">
      <inheritdoc />
    </member>
    <member name="P:LamestWebserver.Collections.FixedSizeQueue`1.MaximumCapacity">
      <summary>
            Gets or sets the maximum capacity of this FixedSizeQueue.
            </summary>
    </member>
    <member name="P:LamestWebserver.Collections.FixedSizeQueue`1.Count">
      <summary>
            The number of elements in this queue (capped by MaximumCapacity).
            </summary>
    </member>
    <member name="P:LamestWebserver.Collections.FixedSizeQueue`1.Item(System.Int32)">
      <summary>
            Gets an element from this queue at the given index. The last added entry will be index 0 and all others can be accessed in order by the index counting upwards.
            </summary>
      <param name="index">The index of the element to get.</param>
      <returns>The element at the given index.</returns>
    </member>
    <member name="T:LamestWebserver.Collections.WalkableQueue`1">
      <summary>
            A Queue just moves the Position in an internal List forward so it's always possible to access every possible index at any given time even after moving through the Queue.
            </summary>
      <typeparam name="T">The type of </typeparam>
    </member>
    <member name="F:LamestWebserver.Collections.WalkableQueue`1._internalList">
      <summary>
            The internal list storing the queue entries.
            </summary>
    </member>
    <member name="M:LamestWebserver.Collections.WalkableQueue`1.#ctor(`0[])">
      <summary>
            Constructs a new WalkableQueue.
            </summary>
      <param name="objs">The entries to add to the queue.</param>
    </member>
    <member name="M:LamestWebserver.Collections.WalkableQueue`1.#ctor(System.Collections.Generic.List{`0})">
      <summary>
            Constructs a new WalkableQueue from a List;
            </summary>
      <param name="objs">The entries to add to the queue.</param>
    </member>
    <member name="M:LamestWebserver.Collections.WalkableQueue`1.Push(`0)">
      <summary>
            Adds the given element to the queue.
            </summary>
      <param name="obj">The element to add to the queue.</param>
    </member>
    <member name="M:LamestWebserver.Collections.WalkableQueue`1.Peek">
      <summary>
            Retrieves the next element in the queue without moving the Position forward.
            </summary>
      <returns>Returns the next element in the queue or default(T)</returns>
    </member>
    <member name="M:LamestWebserver.Collections.WalkableQueue`1.Pop">
      <summary>
            Retrieves the next element in the queue by moving the Position forward.
            </summary>
      <returns>Returns the next element in the queue or default(T)</returns>
    </member>
    <member name="M:LamestWebserver.Collections.WalkableQueue`1.Clear">
      <summary>
            Clears the queue of all elements.
            </summary>
    </member>
    <member name="M:LamestWebserver.Collections.WalkableQueue`1.GetPassed">
      <summary>
            Retrieves all elements of the queue that we've already consumed.
            </summary>
      <returns>The elements as list.</returns>
    </member>
    <member name="M:LamestWebserver.Collections.WalkableQueue`1.GetConsumable">
      <summary>
            Retrieves all elements of the queue that we've not consumed yet.
            </summary>
      <returns>The elements as list.</returns>
    </member>
    <member name="M:LamestWebserver.Collections.WalkableQueue`1.GetAll">
      <summary>
            Retrieves all elements of the queue.
            </summary>
      <returns>The elements as list.</returns>
    </member>
    <member name="M:LamestWebserver.Collections.WalkableQueue`1.GetRange(System.Int32,System.Int32)">
      <summary>
            Retrieves all elements of the queue from a given index with a given length.
            </summary>
      <param name="startIndex">The index to begin at.</param>
      <param name="count">The amount of elements to get.</param>
      <returns>The elements as list.</returns>
    </member>
    <member name="M:LamestWebserver.Collections.WalkableQueue`1.ResetPosition">
      <summary>
            Resets the position of the queue to zero.
            </summary>
    </member>
    <member name="M:LamestWebserver.Collections.WalkableQueue`1.AtEnd">
      <summary>
            Retrieves true if the queue is already at it's end or false if not.
            </summary>
      <returns>Returns true if at end and false if not.</returns>
    </member>
    <member name="M:LamestWebserver.Collections.WalkableQueue`1.GetEnumerator">
      <inheritdoc />
    </member>
    <member name="P:LamestWebserver.Collections.WalkableQueue`1.Position">
      <summary>
            The current position in the Queue.
            </summary>
    </member>
    <member name="P:LamestWebserver.Collections.WalkableQueue`1.Count">
      <inheritdoc />
    </member>
    <member name="P:LamestWebserver.Collections.WalkableQueue`1.Current">
      <summary>
            Retrieves the current Element of the Queue.
            </summary>
    </member>
    <member name="P:LamestWebserver.Collections.WalkableQueue`1.Item(System.Int32)">
      <summary>
            Gets or Sets the element at a given index from this queue.
            </summary>
      <param name="index">The index of the element.</param>
      <returns>The element at a given index.</returns>
    </member>
    <member name="T:LamestWebserver.Collections.URL`1">
      <summary>
            A fixed collection of elements.
            </summary>
      <typeparam name="T">The type of the elements.</typeparam>
    </member>
    <member name="M:LamestWebserver.Collections.URL`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.String)">
      <summary>
            Creates a new URL out of the given folders.
            </summary>
      <param name="folders">The folders of this URL.</param>
      <param name="delimiter">The delimiter to display the URL with.</param>
    </member>
    <member name="M:LamestWebserver.Collections.URL`1.Append(`0)">
      <summary>
            Adds and item to the URL.
            </summary>
      <param name="item">The item to add.</param>
      <returns>A new URL with this element appended to.</returns>
    </member>
    <member name="M:LamestWebserver.Collections.URL`1.ToString">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Collections.URL`1.GetEnumerator">
      <inheritdoc />
    </member>
    <member name="P:LamestWebserver.Collections.URL`1.Count">
      <summary>
            Retrieves the amount of elements in this URL.
            </summary>
    </member>
    <member name="P:LamestWebserver.Collections.URL`1.Item(System.Int32)">
      <summary>
            Gets an element inside the URL.
            </summary>
      <param name="index">The index to get the element at.</param>
      <returns>Returns the element at this index.</returns>
    </member>
    <member name="T:LamestWebserver.Collections.AVLHashMap`2">
      <summary>
            A HashMap which uses AVLTrees inside to access Values very fast.
            Returns default(T) / null if element not found.
            implements ISerializable, IXmlSerializable
            </summary>
      <typeparam name="TKey">The Type of the Keys (implement IComparable, IEquatable&lt;TKey&gt;)</typeparam>
      <typeparam name="TValue">The Type of the Values</typeparam>
    </member>
    <member name="T:LamestWebserver.Collections.AVLHashMap`2.Entry">
      <summary>
            Only used for Serializing
            </summary>
    </member>
    <member name="P:LamestWebserver.Collections.AVLHashMap`2.Entry.Key">
      <summary>
            The Key
            </summary>
    </member>
    <member name="P:LamestWebserver.Collections.AVLHashMap`2.Entry.Value">
      <summary>
            The Value
            </summary>
    </member>
    <member name="M:LamestWebserver.Collections.AVLHashMap`2.AVLNode.#ctor">
      <summary>
            Empty constructor for Deserialisation
            </summary>
    </member>
    <member name="M:LamestWebserver.Collections.AVLHashMap`2.#ctor(System.Int32)">
      <summary>
            Constructs a new AVLHashmap of the specified size
            </summary>
      <param name="size">the size of the hashmap</param>
    </member>
    <member name="M:LamestWebserver.Collections.AVLHashMap`2.#ctor">
      <summary>
            Constructs a new AVLHashmep with a size of 1024
            </summary>
    </member>
    <member name="M:LamestWebserver.Collections.AVLHashMap`2.Validate">
      <summary>
            Used for UnitTests.
            </summary>
    </member>
    <member name="M:LamestWebserver.Collections.AVLHashMap`2.ContainsKey(`0)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Collections.AVLHashMap`2.Add(`0,`1)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Collections.AVLHashMap`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Collections.AVLHashMap`2.TryGetValue(`0,`1@)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Collections.AVLHashMap`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Collections.AVLHashMap`2.Clear">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Collections.AVLHashMap`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Collections.AVLHashMap`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Collections.AVLHashMap`2.Remove(`0)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Collections.AVLHashMap`2.GetEnumerator">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Collections.AVLHashMap`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Collections.AVLHashMap`2.GetSchema">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Collections.AVLHashMap`2.ReadXml(System.Xml.XmlReader)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Collections.AVLHashMap`2.WriteXml(System.Xml.XmlWriter)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Collections.AVLHashMap`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Deserializes an AVLHashmap
            </summary>
      <param name="info">SerializationInfo</param>
      <param name="context">StreamingContext</param>
    </member>
    <member name="P:LamestWebserver.Collections.AVLHashMap`2.Keys">
      <inheritdoc />
    </member>
    <member name="P:LamestWebserver.Collections.AVLHashMap`2.Values">
      <inheritdoc />
    </member>
    <member name="P:LamestWebserver.Collections.AVLHashMap`2.Count">
      <inheritdoc />
    </member>
    <member name="P:LamestWebserver.Collections.AVLHashMap`2.IsReadOnly">
      <inheritdoc />
    </member>
    <member name="P:LamestWebserver.Collections.AVLHashMap`2.Item(`0)">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.Collections.AVLTree`2">
      <summary>
            A automatically balancing BinaryTree to keep logarithmic search behaviour.
            Returns default(T) / null if element not found.
            implements ISerializable, IXmlSerializable
            </summary>
      <typeparam name="TKey">The Type of the Keys (implement IComparable, IEquatable&lt;TKey&gt;)</typeparam>
      <typeparam name="TValue">The Type of the Values</typeparam>
    </member>
    <member name="T:LamestWebserver.Collections.AVLTree`2.Entry">
      <summary>
            Only used for Serializing AVLTrees
            </summary>
    </member>
    <member name="P:LamestWebserver.Collections.AVLTree`2.Entry.Key">
      <summary>
            The key.
            </summary>
    </member>
    <member name="P:LamestWebserver.Collections.AVLTree`2.Entry.Value">
      <summary>
            The value.
            </summary>
    </member>
    <member name="M:LamestWebserver.Collections.AVLTree`2.AVLNode.#ctor">
      <summary>
            Empty constructor for Deserialisation
            </summary>
    </member>
    <member name="M:LamestWebserver.Collections.AVLTree`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Collections.AVLTree`2.Add(`0,`1)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Collections.AVLTree`2.Clear">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Collections.AVLTree`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Collections.AVLTree`2.ContainsKey(`0)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Collections.AVLTree`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Collections.AVLTree`2.GetEnumerator">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Collections.AVLTree`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Collections.AVLTree`2.Remove(`0)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Collections.AVLTree`2.TryGetValue(`0,`1@)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Collections.AVLTree`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Collections.AVLTree`2.#ctor">
      <summary>
            Deserialization Constructor for XML
            </summary>
    </member>
    <member name="M:LamestWebserver.Collections.AVLTree`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Deserializes an AVLTree.
            </summary>
      <param name="info">SerializationInfo</param>
      <param name="context">StreamingContext</param>
    </member>
    <member name="M:LamestWebserver.Collections.AVLTree`2.Validate">
      <summary>
            Only used for the UnitTests.
            </summary>
    </member>
    <member name="M:LamestWebserver.Collections.AVLTree`2.GetSchema">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Collections.AVLTree`2.ReadXml(System.Xml.XmlReader)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Collections.AVLTree`2.WriteXml(System.Xml.XmlWriter)">
      <inheritdoc />
    </member>
    <member name="P:LamestWebserver.Collections.AVLTree`2.Item(`0)">
      <inheritdoc />
    </member>
    <member name="P:LamestWebserver.Collections.AVLTree`2.Count">
      <inheritdoc />
    </member>
    <member name="P:LamestWebserver.Collections.AVLTree`2.IsReadOnly">
      <inheritdoc />
    </member>
    <member name="P:LamestWebserver.Collections.AVLTree`2.Keys">
      <inheritdoc />
    </member>
    <member name="P:LamestWebserver.Collections.AVLTree`2.Values">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.Collections.QueuedAVLTree`2">
      <summary>
            A automatically balancing BinaryTree to keep logarithmic search behaviour combined with a Queue. Search, Add, Remove: O(log(n)); RemoveFirst: O(1);
            If the ItemCount exceeds the specified limit, the oldest entry is removed.
            Returns default(T) / null if element not found.
            </summary>
      <typeparam name="TKey">The Type of the Keys (implement IComparable, IEquatable&lt;TKey&gt;)</typeparam>
      <typeparam name="TValue">The Type of the Values</typeparam>
    </member>
    <member name="M:LamestWebserver.Collections.QueuedAVLTree`2.#ctor">
      <summary>
            Constructs a new QueuedAVLTree with a size of 4096.
            </summary>
    </member>
    <member name="M:LamestWebserver.Collections.QueuedAVLTree`2.#ctor(System.Int32)">
      <summary>
            Constructs a new QueuedAVLTree with a specified maximum size
            </summary>
      <param name="maxSize">the maximum size</param>
    </member>
    <member name="M:LamestWebserver.Collections.QueuedAVLTree`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Collections.QueuedAVLTree`2.Add(`0,`1)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Collections.QueuedAVLTree`2.Clear">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Collections.QueuedAVLTree`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Collections.QueuedAVLTree`2.ContainsKey(`0)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Collections.QueuedAVLTree`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Collections.QueuedAVLTree`2.GetEnumerator">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Collections.QueuedAVLTree`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Collections.QueuedAVLTree`2.Remove(`0)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Collections.QueuedAVLTree`2.TryGetValue(`0,`1@)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Collections.QueuedAVLTree`2.Validate">
      <summary>
            Used for UnitTests.
            </summary>
    </member>
    <member name="P:LamestWebserver.Collections.QueuedAVLTree`2.Item(`0)">
      <inheritdoc />
    </member>
    <member name="P:LamestWebserver.Collections.QueuedAVLTree`2.Count">
      <inheritdoc />
    </member>
    <member name="P:LamestWebserver.Collections.QueuedAVLTree`2.IsReadOnly">
      <inheritdoc />
    </member>
    <member name="P:LamestWebserver.Collections.QueuedAVLTree`2.Keys">
      <inheritdoc />
    </member>
    <member name="P:LamestWebserver.Collections.QueuedAVLTree`2.Values">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.Collections.BitList">
      <summary>
            A special - very storage effective - List for Bits.
            </summary>
    </member>
    <member name="M:LamestWebserver.Collections.BitList.Add(System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Collections.BitList.Clear">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Collections.BitList.Contains(System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Collections.BitList.CopyTo(System.Boolean[],System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Collections.BitList.GetEnumerator">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Collections.BitList.IndexOf(System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Collections.BitList.Insert(System.Int32,System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Collections.BitList.Remove(System.Boolean)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Collections.BitList.RemoveAt(System.Int32)">
      <inheritdoc />
    </member>
    <member name="P:LamestWebserver.Collections.BitList.Item(System.Int32)">
      <inheritdoc />
    </member>
    <member name="P:LamestWebserver.Collections.BitList.Count">
      <inheritdoc />
    </member>
    <member name="P:LamestWebserver.Collections.BitList.IsReadOnly">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.Collections.ActionList`1">
      <summary>
            List with the ability to do a action every time it's been change.
            </summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="F:LamestWebserver.Collections.ActionList`1.ActionToExecute">
      <summary>
            Action that get executed after each manipulation.
            </summary>
    </member>
    <member name="M:LamestWebserver.Collections.ActionList`1.#ctor">
      <summary>
            Constructs an empty ActionList.
            </summary>
    </member>
    <member name="M:LamestWebserver.Collections.ActionList`1.#ctor(System.Action)">
      <summary>
            Constructs an empty ActionList.
            </summary>
      <param name="action">The action to execute on change.</param>
    </member>
    <member name="M:LamestWebserver.Collections.ActionList`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Action)">
      <summary>
            Constructs an empty ActionList.
            </summary>
      <param name="collection">The collection to use as internal list.</param>
      <param name="action">The action to execute on change.</param>
    </member>
    <member name="M:LamestWebserver.Collections.ActionList`1.Add(`0)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Collections.ActionList`1.Clear">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Collections.ActionList`1.Contains(`0)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Collections.ActionList`1.CopyTo(`0[],System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Collections.ActionList`1.GetEnumerator">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Collections.ActionList`1.IndexOf(`0)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Collections.ActionList`1.Insert(System.Int32,`0)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Collections.ActionList`1.Remove(`0)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Collections.ActionList`1.RemoveAt(System.Int32)">
      <inheritdoc />
    </member>
    <member name="M:LamestWebserver.Collections.ActionList`1.RemoveAll(System.Predicate{`0})">
      <inheritdoc />
    </member>
    <member name="P:LamestWebserver.Collections.ActionList`1.Item(System.Int32)">
      <inheritdoc />
    </member>
    <member name="P:LamestWebserver.Collections.ActionList`1.Count">
      <inheritdoc />
    </member>
    <member name="P:LamestWebserver.Collections.ActionList`1.IsReadOnly">
      <inheritdoc />
    </member>
    <member name="T:LamestWebserver.Caching.ECachingType">
      <summary>
            Specifies whether an element or a page should be cached.
            </summary>
    </member>
    <member name="F:LamestWebserver.Caching.ECachingType.Cacheable">
      <summary>
            The element or page can be cached (does not include dynamic content).
            </summary>
    </member>
    <member name="F:LamestWebserver.Caching.ECachingType.NotCacheable">
      <summary>
            The element or page can not be cached (does include dynamic content).
            </summary>
    </member>
    <member name="F:LamestWebserver.Caching.ECachingType.Default">
      <summary>
            The element or page will take the default value for Cachable or NotCacheable from it's ancestor or the global Default.
            </summary>
    </member>
    <member name="T:LamestWebserver.Caching.ResponseCache">
      <summary>
            A general purpose key-value string cache.
            </summary>
    </member>
    <member name="T:LamestWebserver.Caching.ResponseCache.ResponseCacheEntry`1">
      <summary>
            A cached response.
            </summary>
      <typeparam name="T">The type of the cached element.</typeparam>
    </member>
    <member name="F:LamestWebserver.Caching.ResponseCache.ResponseCacheEntry`1.LastUpdatedDateTime">
      <summary>
            The time when this entry was created or updated.
            </summary>
    </member>
    <member name="F:LamestWebserver.Caching.ResponseCache.ResponseCacheEntry`1.RefreshTime">
      <summary>
            The lifetime of this entry. If null it doesn't have to be refreshed.
            </summary>
    </member>
    <member name="F:LamestWebserver.Caching.ResponseCache.ResponseCacheEntry`1.Response">
      <summary>
            The Response to retrieve from this entry.
            </summary>
    </member>
    <member name="F:LamestWebserver.Caching.ResponseCache.ResponseCacheEntry`1.Count">
      <summary>
            The amount of times this entry has been requested.
            </summary>
    </member>
    <member name="F:LamestWebserver.Caching.ResponseCache.ResponseCacheEntry`1.LastRequestedDateTime">
      <summary>
            The time when this entry was accessed for the last time.
            </summary>
    </member>
    <member name="M:LamestWebserver.Caching.ResponseCache.ResponseCacheEntry`1.#ctor">
      <summary>
            Creates a new ResponseCacheEntry instance.
            </summary>
    </member>
    <member name="M:LamestWebserver.Caching.ResponseCache.ResponseCacheEntry`1.#ctor(`0,System.Nullable{System.TimeSpan})">
      <summary>
            Creates a new ResponseCacheEntry instance.
            </summary>
      <param name="respose">The response.</param>
      <param name="refreshTime">The lifetime of the cached entry. If null this entry doesn't have to be refreshed.</param>
    </member>
    <member name="M:LamestWebserver.Caching.ResponseCache.ResponseCacheEntry`1.Increment">
      <summary>
            Increments the Count and Updates the LastRequestedDateTime.
            </summary>
    </member>
    <member name="F:LamestWebserver.Caching.ResponseCache.CurrentCacheInstance">
      <summary>
            The main ResponseCache instance for LamestWebserver.
            </summary>
    </member>
    <member name="F:LamestWebserver.Caching.ResponseCache.StringResponseCacheHashmapSize">
      <summary>
            The size of the underlying hashmap for the cached items.
            </summary>
    </member>
    <member name="F:LamestWebserver.Caching.ResponseCache.MaximumStringResponseCacheSize">
      <summary>
            The Maximum Response cache size. if null: unlimited.
            <para />
            Defaults to 1024 * 1024 * 256 = 512 MBytes (because of two byte characters).
            </summary>
    </member>
    <member name="F:LamestWebserver.Caching.ResponseCache.CacheMakeRoom_AdditionalFreeSpacePercentage">
      <summary>
            The additional free space to make - relative to the maximum cache size, when the cache is overflowing. (between 0 and 1)
            </summary>
    </member>
    <member name="F:LamestWebserver.Caching.ResponseCache.CacheMakeRoom_UpperPercentile_Date">
      <summary>
            The upper percentile for the date based cache cleaning. (between 0 and 1)
            </summary>
    </member>
    <member name="F:LamestWebserver.Caching.ResponseCache.CacheMakeRoom_UpperPercentile_Count">
      <summary>
            The upper percentile for the access count based cache cleaning. (between 0 and 1)
            </summary>
    </member>
    <member name="F:LamestWebserver.Caching.ResponseCache.CacheMakeRoom_RemoveBySizePercentage">
      <summary>
            The maximum percentage of entries to remove by size. (between 0 and 1)
            </summary>
    </member>
    <member name="F:LamestWebserver.Caching.ResponseCache.CacheMakeRoom_RemoveByTimePercentage">
      <summary>
            The maximum percentage of entries to remove by lifetime left. (between 0 and 1)
            </summary>
    </member>
    <member name="M:LamestWebserver.Caching.ResponseCache.#ctor">
      <summary>
            Creates a new ResponseCache.
            </summary>
    </member>
    <member name="M:LamestWebserver.Caching.ResponseCache.GetCachedStringResponse(System.String,System.String@)">
      <summary>
            Retrieves a cached string response if it is cached.
            </summary>
      <param name="key">The key of the cached response</param>
      <param name="response">The cached response.</param>
      <returns>Returns true if the response could be retrieved.</returns>
    </member>
    <member name="M:LamestWebserver.Caching.ResponseCache.SetCachedStringResponse(System.String,System.String,System.Nullable{System.TimeSpan})">
      <summary>
            Sets a response to the cache.
            </summary>
      <param name="key">The key of the response.</param>
      <param name="response">The response.</param>
      <param name="refreshTime">The lifetime of this entry. If null this entry doesn't have to be refreshed.</param>
    </member>
    <member name="M:LamestWebserver.Caching.ResponseCache.GetCachedString(System.String,System.Func{System.String},System.Nullable{System.TimeSpan})">
      <summary>
            Retrueves a cached string or caches it using the source function.
            </summary>
      <param name="key">The key of the response.</param>
      <param name="sourceIfNotCached">A function that retrieves the source if it's not cached yet.</param>
      <param name="refreshTime">The lifetime of this entry. If null this entry doesn't have to be refreshed. This lifetime will not override the original lifetime of this entry.</param>
      <returns>The cached response.</returns>
    </member>
    <member name="M:LamestWebserver.Caching.ResponseCache.RemoveCachedString(System.String)">
      <summary>
            Removes a cached string from the cache.
            </summary>
      <param name="key">the key of the cached entry.</param>
    </member>
    <member name="M:LamestWebserver.Caching.ResponseCache.Clear">
      <summary>
            Clears the cache entirely.
            </summary>
    </member>
    <member name="M:LamestWebserver.Caching.ResponseCache.MakeRoom(System.UInt64)">
      <summary>
            Makes room when the cache is overflowing.
            </summary>
      <param name="requestedSpace">The requested amount of free space. (Not including CacheMakeRoom_AdditionalFreeSpace)</param>
    </member>
    <member name="M:LamestWebserver.Caching.ResponseCache.RemoveCachedPrefixes(System.String)">
      <summary>
            Removes all Cached Entries that begin with a specific string prefix.
            </summary>
      <param name="prefix">The prefix.</param>
    </member>
    <member name="M:LamestWebserver.Caching.ResponseCache.RemoveStringResponseEntry(System.String,LamestWebserver.Caching.ResponseCache.ResponseCacheEntry{System.String})">
      <summary>
            Removes an entry from the cache.
            <para /> 
            This method can handle non-existent items.
            </summary>
      <param name="key">The key of the entry.</param>
      <param name="value">The response if already retrieved. If null, the response will be retrieved automatically.</param>
    </member>
    <member name="M:LamestWebserver.Caching.ResponseCache.RemoveStringResponseEntries(System.Collections.Generic.ICollection{System.String})">
      <summary>
            Removes a collection of entries from the cache.
            <para /> 
            This method can handle non-existent items.
            </summary>
      <param name="keys">The keys of the entries.</param>
    </member>
    <member name="M:LamestWebserver.Caching.ResponseCache.AddStringResponseEntry(System.String,LamestWebserver.Caching.ResponseCache.ResponseCacheEntry{System.String})">
      <summary>
            Adds an Entry to the cache.
            <para /> 
            This method can handle already existent items.
            </summary>
      <param name="key">The key of the response.</param>
      <param name="value">The response.</param>
    </member>
    <member name="M:LamestWebserver.Caching.ResponseCache.GetDebugResponseNode">
      <inheritdoc />
    </member>
    <member name="P:LamestWebserver.Caching.ResponseCache.CurrentStringResponseCacheSize">
      <summary>
            The current size of the cache.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.ConstructorHandling">
      <summary>
            Specifies how constructors are used when initializing objects during deserialization by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.ConstructorHandling.Default">
      <summary>
            First attempt to use the public default constructor, then fall back to a single parameterized constructor, then to the non-public default constructor.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.ConstructorHandling.AllowNonPublicDefaultConstructor">
      <summary>
            Json.NET will use a non-public default constructor before falling back to a parameterized constructor.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.DateFormatHandling">
      <summary>
            Specifies how dates are formatted when writing JSON text.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DateFormatHandling.IsoDateFormat">
      <summary>
            Dates are written in the ISO 8601 format, e.g. <c>"2012-03-21T05:40Z"</c>.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DateFormatHandling.MicrosoftDateFormat">
      <summary>
            Dates are written in the Microsoft JSON format, e.g. <c>"\/Date(1198908717056)\/"</c>.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.DateParseHandling">
      <summary>
            Specifies how date formatted strings, e.g. <c>"\/Date(1198908717056)\/"</c> and <c>"2012-03-21T05:40Z"</c>, are parsed when reading JSON text.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DateParseHandling.None">
      <summary>
            Date formatted strings are not parsed to a date type and are read as strings.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DateParseHandling.DateTime">
      <summary>
            Date formatted strings, e.g. <c>"\/Date(1198908717056)\/"</c> and <c>"2012-03-21T05:40Z"</c>, are parsed to <see cref="F:Newtonsoft.Json.DateParseHandling.DateTime" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DateParseHandling.DateTimeOffset">
      <summary>
            Date formatted strings, e.g. <c>"\/Date(1198908717056)\/"</c> and <c>"2012-03-21T05:40Z"</c>, are parsed to <see cref="F:Newtonsoft.Json.DateParseHandling.DateTimeOffset" />.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.DateTimeZoneHandling">
      <summary>
            Specifies how to treat the time value when converting between string and <see cref="T:System.DateTime" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DateTimeZoneHandling.Local">
      <summary>
            Treat as local time. If the <see cref="T:System.DateTime" /> object represents a Coordinated Universal Time (UTC), it is converted to the local time.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DateTimeZoneHandling.Utc">
      <summary>
            Treat as a UTC. If the <see cref="T:System.DateTime" /> object represents a local time, it is converted to a UTC.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DateTimeZoneHandling.Unspecified">
      <summary>
            Treat as a local time if a <see cref="T:System.DateTime" /> is being converted to a string.
            If a string is being converted to <see cref="T:System.DateTime" />, convert to a local time if a time zone is specified.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DateTimeZoneHandling.RoundtripKind">
      <summary>
            Time zone information should be preserved when converting.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.DefaultValueHandling">
      <summary>
            Specifies default value handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
      <example>
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeDefaultValueHandlingObject" title="DefaultValueHandling Class" />
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeDefaultValueHandlingExample" title="DefaultValueHandling Ignore Example" />
      </example>
    </member>
    <member name="F:Newtonsoft.Json.DefaultValueHandling.Include">
      <summary>
            Include members where the member value is the same as the member's default value when serializing objects.
            Included members are written to JSON. Has no effect when deserializing.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DefaultValueHandling.Ignore">
      <summary>
            Ignore members where the member value is the same as the member's default value when serializing objects
            so that it is not written to JSON.
            This option will ignore all default values (e.g. <c>null</c> for objects and nullable types; <c>0</c> for integers,
            decimals and floating point numbers; and <c>false</c> for booleans). The default value ignored can be changed by
            placing the <see cref="T:System.ComponentModel.DefaultValueAttribute" /> on the property.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DefaultValueHandling.Populate">
      <summary>
            Members with a default value but no JSON will be set to their default value when deserializing.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DefaultValueHandling.IgnoreAndPopulate">
      <summary>
            Ignore members where the member value is the same as the member's default value when serializing objects
            and set members to their default value when deserializing.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.FloatFormatHandling">
      <summary>
            Specifies float format handling options when writing special floating point numbers, e.g. <see cref="F:System.Double.NaN" />,
            <see cref="F:System.Double.PositiveInfinity" /> and <see cref="F:System.Double.NegativeInfinity" /> with <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.FloatFormatHandling.String">
      <summary>
            Write special floating point values as strings in JSON, e.g. <c>"NaN"</c>, <c>"Infinity"</c>, <c>"-Infinity"</c>.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.FloatFormatHandling.Symbol">
      <summary>
            Write special floating point values as symbols in JSON, e.g. <c>NaN</c>, <c>Infinity</c>, <c>-Infinity</c>.
            Note that this will produce non-valid JSON.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.FloatFormatHandling.DefaultValue">
      <summary>
            Write special floating point values as the property's default value in JSON, e.g. 0.0 for a <see cref="T:System.Double" /> property, <c>null</c> for a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" /> property.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.FloatParseHandling">
      <summary>
            Specifies how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.FloatParseHandling.Double">
      <summary>
            Floating point numbers are parsed to <see cref="F:Newtonsoft.Json.FloatParseHandling.Double" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.FloatParseHandling.Decimal">
      <summary>
            Floating point numbers are parsed to <see cref="F:Newtonsoft.Json.FloatParseHandling.Decimal" />.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Formatting">
      <summary>
            Specifies formatting options for the <see cref="T:Newtonsoft.Json.JsonTextWriter" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Formatting.None">
      <summary>
            No special formatting is applied. This is the default.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Formatting.Indented">
      <summary>
            Causes child objects to be indented according to the <see cref="P:Newtonsoft.Json.JsonTextWriter.Indentation" /> and <see cref="P:Newtonsoft.Json.JsonTextWriter.IndentChar" /> settings.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.IArrayPool`1">
      <summary>
            Provides an interface for using pooled arrays.
            </summary>
      <typeparam name="T">The array type content.</typeparam>
    </member>
    <member name="M:Newtonsoft.Json.IArrayPool`1.Rent(System.Int32)">
      <summary>
            Rent an array from the pool. This array must be returned when it is no longer needed.
            </summary>
      <param name="minimumLength">The minimum required length of the array. The returned array may be longer.</param>
      <returns>The rented array from the pool. This array must be returned when it is no longer needed.</returns>
    </member>
    <member name="M:Newtonsoft.Json.IArrayPool`1.Return(`0[])">
      <summary>
            Return an array to the pool.
            </summary>
      <param name="array">The array that is being returned.</param>
    </member>
    <member name="T:Newtonsoft.Json.IJsonLineInfo">
      <summary>
            Provides an interface to enable a class to return line and position information.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.IJsonLineInfo.HasLineInfo">
      <summary>
            Gets a value indicating whether the class can return line information.
            </summary>
      <returns>
        <c>true</c> if <see cref="P:Newtonsoft.Json.IJsonLineInfo.LineNumber" /> and <see cref="P:Newtonsoft.Json.IJsonLineInfo.LinePosition" /> can be provided; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.IJsonLineInfo.LineNumber">
      <summary>
            Gets the current line number.
            </summary>
      <value>The current line number or 0 if no line information is available (for example, when <see cref="M:Newtonsoft.Json.IJsonLineInfo.HasLineInfo" /> returns <c>false</c>).</value>
    </member>
    <member name="P:Newtonsoft.Json.IJsonLineInfo.LinePosition">
      <summary>
            Gets the current line position.
            </summary>
      <value>The current line position or 0 if no line information is available (for example, when <see cref="M:Newtonsoft.Json.IJsonLineInfo.HasLineInfo" /> returns <c>false</c>).</value>
    </member>
    <member name="T:Newtonsoft.Json.JsonArrayAttribute">
      <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> how to serialize the collection.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonArrayAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonArrayAttribute" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonArrayAttribute.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonObjectAttribute" /> class with a flag indicating whether the array can contain null items.
            </summary>
      <param name="allowNullItems">A flag indicating whether the array can contain null items.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonArrayAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonArrayAttribute" /> class with the specified container Id.
            </summary>
      <param name="id">The container Id.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonArrayAttribute.AllowNullItems">
      <summary>
            Gets or sets a value indicating whether null items are allowed in the collection.
            </summary>
      <value>
        <c>true</c> if null items are allowed in the collection; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Newtonsoft.Json.JsonConstructorAttribute">
      <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> to use the specified constructor when deserializing that object.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonContainerAttribute">
      <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> how to serialize the object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonContainerAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonContainerAttribute" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonContainerAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonContainerAttribute" /> class with the specified container Id.
            </summary>
      <param name="id">The container Id.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonContainerAttribute.Id">
      <summary>
            Gets or sets the id.
            </summary>
      <value>The id.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonContainerAttribute.Title">
      <summary>
            Gets or sets the title.
            </summary>
      <value>The title.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonContainerAttribute.Description">
      <summary>
            Gets or sets the description.
            </summary>
      <value>The description.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonContainerAttribute.ItemConverterType">
      <summary>
            Gets or sets the collection's items converter.
            </summary>
      <value>The collection's items converter.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonContainerAttribute.ItemConverterParameters">
      <summary>
            The parameter list to use when constructing the <see cref="T:Newtonsoft.Json.JsonConverter" /> described by <see cref="P:Newtonsoft.Json.JsonContainerAttribute.ItemConverterType" />.
            If <c>null</c>, the default constructor is used.
            When non-<c>null</c>, there must be a constructor defined in the <see cref="T:Newtonsoft.Json.JsonConverter" /> that exactly matches the number,
            order, and type of these parameters.
            </summary>
      <example>
        <code>
            [JsonContainer(ItemConverterType = typeof(MyContainerConverter), ItemConverterParameters = new object[] { 123, "Four" })]
            </code>
      </example>
    </member>
    <member name="P:Newtonsoft.Json.JsonContainerAttribute.NamingStrategyType">
      <summary>
            Gets or sets the <see cref="T:System.Type" /> of the <see cref="T:Newtonsoft.Json.Serialization.NamingStrategy" />.
            </summary>
      <value>The <see cref="T:System.Type" /> of the <see cref="T:Newtonsoft.Json.Serialization.NamingStrategy" />.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonContainerAttribute.NamingStrategyParameters">
      <summary>
            The parameter list to use when constructing the <see cref="T:Newtonsoft.Json.Serialization.NamingStrategy" /> described by <see cref="P:Newtonsoft.Json.JsonContainerAttribute.NamingStrategyType" />.
            If <c>null</c>, the default constructor is used.
            When non-<c>null</c>, there must be a constructor defined in the <see cref="T:Newtonsoft.Json.Serialization.NamingStrategy" /> that exactly matches the number,
            order, and type of these parameters.
            </summary>
      <example>
        <code>
            [JsonContainer(NamingStrategyType = typeof(MyNamingStrategy), NamingStrategyParameters = new object[] { 123, "Four" })]
            </code>
      </example>
    </member>
    <member name="P:Newtonsoft.Json.JsonContainerAttribute.IsReference">
      <summary>
            Gets or sets a value that indicates whether to preserve object references.
            </summary>
      <value>
        <c>true</c> to keep object reference; otherwise, <c>false</c>. The default is <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonContainerAttribute.ItemIsReference">
      <summary>
            Gets or sets a value that indicates whether to preserve collection's items references.
            </summary>
      <value>
        <c>true</c> to keep collection's items object references; otherwise, <c>false</c>. The default is <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonContainerAttribute.ItemReferenceLoopHandling">
      <summary>
            Gets or sets the reference loop handling used when serializing the collection's items.
            </summary>
      <value>The reference loop handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonContainerAttribute.ItemTypeNameHandling">
      <summary>
            Gets or sets the type name handling used when serializing the collection's items.
            </summary>
      <value>The type name handling.</value>
    </member>
    <member name="T:Newtonsoft.Json.JsonConvert">
      <summary>
            Provides methods for converting between .NET types and JSON types.
            </summary>
      <example>
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="SerializeObject" title="Serializing and Deserializing JSON with JsonConvert" />
      </example>
    </member>
    <member name="F:Newtonsoft.Json.JsonConvert.True">
      <summary>
            Represents JavaScript's boolean value <c>true</c> as a string. This field is read-only.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonConvert.False">
      <summary>
            Represents JavaScript's boolean value <c>false</c> as a string. This field is read-only.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonConvert.Null">
      <summary>
            Represents JavaScript's <c>null</c> as a string. This field is read-only.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonConvert.Undefined">
      <summary>
            Represents JavaScript's <c>undefined</c> as a string. This field is read-only.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonConvert.PositiveInfinity">
      <summary>
            Represents JavaScript's positive infinity as a string. This field is read-only.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonConvert.NegativeInfinity">
      <summary>
            Represents JavaScript's negative infinity as a string. This field is read-only.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonConvert.NaN">
      <summary>
            Represents JavaScript's <c>NaN</c> as a string. This field is read-only.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.DateTime)">
      <summary>
            Converts the <see cref="T:System.DateTime" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.DateTime" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.DateTime,Newtonsoft.Json.DateFormatHandling,Newtonsoft.Json.DateTimeZoneHandling)">
      <summary>
            Converts the <see cref="T:System.DateTime" /> to its JSON string representation using the <see cref="T:Newtonsoft.Json.DateFormatHandling" /> specified.
            </summary>
      <param name="value">The value to convert.</param>
      <param name="format">The format the date will be converted to.</param>
      <param name="timeZoneHandling">The time zone handling when the date is converted to a string.</param>
      <returns>A JSON string representation of the <see cref="T:System.DateTime" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.DateTimeOffset)">
      <summary>
            Converts the <see cref="T:System.DateTimeOffset" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.DateTimeOffset" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.DateTimeOffset,Newtonsoft.Json.DateFormatHandling)">
      <summary>
            Converts the <see cref="T:System.DateTimeOffset" /> to its JSON string representation using the <see cref="T:Newtonsoft.Json.DateFormatHandling" /> specified.
            </summary>
      <param name="value">The value to convert.</param>
      <param name="format">The format the date will be converted to.</param>
      <returns>A JSON string representation of the <see cref="T:System.DateTimeOffset" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Boolean)">
      <summary>
            Converts the <see cref="T:System.Boolean" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Char)">
      <summary>
            Converts the <see cref="T:System.Char" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Char" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Enum)">
      <summary>
            Converts the <see cref="T:System.Enum" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Enum" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Int32)">
      <summary>
            Converts the <see cref="T:System.Int32" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Int16)">
      <summary>
            Converts the <see cref="T:System.Int16" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Int16" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.UInt16)">
      <summary>
            Converts the <see cref="T:System.UInt16" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.UInt16" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.UInt32)">
      <summary>
            Converts the <see cref="T:System.UInt32" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.UInt32" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Int64)">
      <summary>
            Converts the <see cref="T:System.Int64" />  to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Int64" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.UInt64)">
      <summary>
            Converts the <see cref="T:System.UInt64" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.UInt64" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Single)">
      <summary>
            Converts the <see cref="T:System.Single" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Single" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Double)">
      <summary>
            Converts the <see cref="T:System.Double" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Double" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Byte)">
      <summary>
            Converts the <see cref="T:System.Byte" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Byte" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.SByte)">
      <summary>
            Converts the <see cref="T:System.SByte" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.SByte" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Decimal)">
      <summary>
            Converts the <see cref="T:System.Decimal" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.SByte" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Guid)">
      <summary>
            Converts the <see cref="T:System.Guid" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Guid" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.TimeSpan)">
      <summary>
            Converts the <see cref="T:System.TimeSpan" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.TimeSpan" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Uri)">
      <summary>
            Converts the <see cref="T:System.Uri" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Uri" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.String)">
      <summary>
            Converts the <see cref="T:System.String" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.String" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.String,System.Char)">
      <summary>
            Converts the <see cref="T:System.String" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <param name="delimiter">The string delimiter character.</param>
      <returns>A JSON string representation of the <see cref="T:System.String" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.String,System.Char,Newtonsoft.Json.StringEscapeHandling)">
      <summary>
            Converts the <see cref="T:System.String" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <param name="delimiter">The string delimiter character.</param>
      <param name="stringEscapeHandling">The string escape handling.</param>
      <returns>A JSON string representation of the <see cref="T:System.String" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Object)">
      <summary>
            Converts the <see cref="T:System.Object" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Object" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object)">
      <summary>
            Serializes the specified object to a JSON string.
            </summary>
      <param name="value">The object to serialize.</param>
      <returns>A JSON string representation of the object.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.Formatting)">
      <summary>
            Serializes the specified object to a JSON string using formatting.
            </summary>
      <param name="value">The object to serialize.</param>
      <param name="formatting">Indicates how the output should be formatted.</param>
      <returns>
            A JSON string representation of the object.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Serializes the specified object to a JSON string using a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
      <param name="value">The object to serialize.</param>
      <param name="converters">A collection of converters used while serializing.</param>
      <returns>A JSON string representation of the object.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Serializes the specified object to a JSON string using formatting and a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
      <param name="value">The object to serialize.</param>
      <param name="formatting">Indicates how the output should be formatted.</param>
      <param name="converters">A collection of converters used while serializing.</param>
      <returns>A JSON string representation of the object.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Serializes the specified object to a JSON string using <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
      <param name="value">The object to serialize.</param>
      <param name="settings">The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to serialize the object.
            If this is <c>null</c>, default serialization settings will be used.</param>
      <returns>
            A JSON string representation of the object.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,System.Type,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Serializes the specified object to a JSON string using a type, formatting and <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
      <param name="value">The object to serialize.</param>
      <param name="settings">The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to serialize the object.
            If this is <c>null</c>, default serialization settings will be used.</param>
      <param name="type">
            The type of the value being serialized.
            This parameter is used when <see cref="P:Newtonsoft.Json.JsonSerializer.TypeNameHandling" /> is <see cref="F:Newtonsoft.Json.TypeNameHandling.Auto" /> to write out the type name if the type of the value does not match.
            Specifying the type is optional.
            </param>
      <returns>
            A JSON string representation of the object.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Serializes the specified object to a JSON string using formatting and <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
      <param name="value">The object to serialize.</param>
      <param name="formatting">Indicates how the output should be formatted.</param>
      <param name="settings">The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to serialize the object.
            If this is <c>null</c>, default serialization settings will be used.</param>
      <returns>
            A JSON string representation of the object.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,System.Type,Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Serializes the specified object to a JSON string using a type, formatting and <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
      <param name="value">The object to serialize.</param>
      <param name="formatting">Indicates how the output should be formatted.</param>
      <param name="settings">The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to serialize the object.
            If this is <c>null</c>, default serialization settings will be used.</param>
      <param name="type">
            The type of the value being serialized.
            This parameter is used when <see cref="P:Newtonsoft.Json.JsonSerializer.TypeNameHandling" /> is <see cref="F:Newtonsoft.Json.TypeNameHandling.Auto" /> to write out the type name if the type of the value does not match.
            Specifying the type is optional.
            </param>
      <returns>
            A JSON string representation of the object.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String)">
      <summary>
            Deserializes the JSON to a .NET object.
            </summary>
      <param name="value">The JSON to deserialize.</param>
      <returns>The deserialized object from the JSON string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Deserializes the JSON to a .NET object using <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
      <param name="value">The JSON to deserialize.</param>
      <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is <c>null</c>, default serialization settings will be used.
            </param>
      <returns>The deserialized object from the JSON string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,System.Type)">
      <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
      <param name="value">The JSON to deserialize.</param>
      <param name="type">The <see cref="T:System.Type" /> of object being deserialized.</param>
      <returns>The deserialized object from the JSON string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject``1(System.String)">
      <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
      <typeparam name="T">The type of the object to deserialize to.</typeparam>
      <param name="value">The JSON to deserialize.</param>
      <returns>The deserialized object from the JSON string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeAnonymousType``1(System.String,``0)">
      <summary>
            Deserializes the JSON to the given anonymous type.
            </summary>
      <typeparam name="T">
            The anonymous type to deserialize to. This can't be specified
            traditionally and must be inferred from the anonymous type passed
            as a parameter.
            </typeparam>
      <param name="value">The JSON to deserialize.</param>
      <param name="anonymousTypeObject">The anonymous type object.</param>
      <returns>The deserialized anonymous type from the JSON string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeAnonymousType``1(System.String,``0,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Deserializes the JSON to the given anonymous type using <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
      <typeparam name="T">
            The anonymous type to deserialize to. This can't be specified
            traditionally and must be inferred from the anonymous type passed
            as a parameter.
            </typeparam>
      <param name="value">The JSON to deserialize.</param>
      <param name="anonymousTypeObject">The anonymous type object.</param>
      <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is <c>null</c>, default serialization settings will be used.
            </param>
      <returns>The deserialized anonymous type from the JSON string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject``1(System.String,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Deserializes the JSON to the specified .NET type using a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
      <typeparam name="T">The type of the object to deserialize to.</typeparam>
      <param name="value">The JSON to deserialize.</param>
      <param name="converters">Converters to use while deserializing.</param>
      <returns>The deserialized object from the JSON string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject``1(System.String,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Deserializes the JSON to the specified .NET type using <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
      <typeparam name="T">The type of the object to deserialize to.</typeparam>
      <param name="value">The object to deserialize.</param>
      <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is <c>null</c>, default serialization settings will be used.
            </param>
      <returns>The deserialized object from the JSON string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,System.Type,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Deserializes the JSON to the specified .NET type using a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
      <param name="value">The JSON to deserialize.</param>
      <param name="type">The type of the object to deserialize.</param>
      <param name="converters">Converters to use while deserializing.</param>
      <returns>The deserialized object from the JSON string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,System.Type,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Deserializes the JSON to the specified .NET type using <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
      <param name="value">The JSON to deserialize.</param>
      <param name="type">The type of the object to deserialize to.</param>
      <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is <c>null</c>, default serialization settings will be used.
            </param>
      <returns>The deserialized object from the JSON string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.PopulateObject(System.String,System.Object)">
      <summary>
            Populates the object with values from the JSON string.
            </summary>
      <param name="value">The JSON to populate values from.</param>
      <param name="target">The target object to populate values onto.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.PopulateObject(System.String,System.Object,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Populates the object with values from the JSON string using <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
      <param name="value">The JSON to populate values from.</param>
      <param name="target">The target object to populate values onto.</param>
      <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is <c>null</c>, default serialization settings will be used.
            </param>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeXmlNode(System.Xml.XmlNode)">
      <summary>
            Serializes the <see cref="T:System.Xml.XmlNode" /> to a JSON string.
            </summary>
      <param name="node">The node to serialize.</param>
      <returns>A JSON string of the <see cref="T:System.Xml.XmlNode" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeXmlNode(System.Xml.XmlNode,Newtonsoft.Json.Formatting)">
      <summary>
            Serializes the <see cref="T:System.Xml.XmlNode" /> to a JSON string using formatting.
            </summary>
      <param name="node">The node to serialize.</param>
      <param name="formatting">Indicates how the output should be formatted.</param>
      <returns>A JSON string of the <see cref="T:System.Xml.XmlNode" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeXmlNode(System.Xml.XmlNode,Newtonsoft.Json.Formatting,System.Boolean)">
      <summary>
            Serializes the <see cref="T:System.Xml.XmlNode" /> to a JSON string using formatting and omits the root object if <paramref name="omitRootObject" /> is <c>true</c>.
            </summary>
      <param name="node">The node to serialize.</param>
      <param name="formatting">Indicates how the output should be formatted.</param>
      <param name="omitRootObject">Omits writing the root object.</param>
      <returns>A JSON string of the <see cref="T:System.Xml.XmlNode" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXmlNode(System.String)">
      <summary>
            Deserializes the <see cref="T:System.Xml.XmlNode" /> from a JSON string.
            </summary>
      <param name="value">The JSON string.</param>
      <returns>The deserialized <see cref="T:System.Xml.XmlNode" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXmlNode(System.String,System.String)">
      <summary>
            Deserializes the <see cref="T:System.Xml.XmlNode" /> from a JSON string nested in a root element specified by <paramref name="deserializeRootElementName" />.
            </summary>
      <param name="value">The JSON string.</param>
      <param name="deserializeRootElementName">The name of the root element to append when deserializing.</param>
      <returns>The deserialized <see cref="T:System.Xml.XmlNode" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXmlNode(System.String,System.String,System.Boolean)">
      <summary>
            Deserializes the <see cref="T:System.Xml.XmlNode" /> from a JSON string nested in a root element specified by <paramref name="deserializeRootElementName" />
            and writes a Json.NET array attribute for collections.
            </summary>
      <param name="value">The JSON string.</param>
      <param name="deserializeRootElementName">The name of the root element to append when deserializing.</param>
      <param name="writeArrayAttribute">
            A flag to indicate whether to write the Json.NET array attribute.
            This attribute helps preserve arrays when converting the written XML back to JSON.
            </param>
      <returns>The deserialized <see cref="T:System.Xml.XmlNode" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeXNode(System.Xml.Linq.XObject)">
      <summary>
            Serializes the <see cref="T:System.Xml.Linq.XNode" /> to a JSON string.
            </summary>
      <param name="node">The node to convert to JSON.</param>
      <returns>A JSON string of the <see cref="T:System.Xml.Linq.XNode" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeXNode(System.Xml.Linq.XObject,Newtonsoft.Json.Formatting)">
      <summary>
            Serializes the <see cref="T:System.Xml.Linq.XNode" /> to a JSON string using formatting.
            </summary>
      <param name="node">The node to convert to JSON.</param>
      <param name="formatting">Indicates how the output should be formatted.</param>
      <returns>A JSON string of the <see cref="T:System.Xml.Linq.XNode" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeXNode(System.Xml.Linq.XObject,Newtonsoft.Json.Formatting,System.Boolean)">
      <summary>
            Serializes the <see cref="T:System.Xml.Linq.XNode" /> to a JSON string using formatting and omits the root object if <paramref name="omitRootObject" /> is <c>true</c>.
            </summary>
      <param name="node">The node to serialize.</param>
      <param name="formatting">Indicates how the output should be formatted.</param>
      <param name="omitRootObject">Omits writing the root object.</param>
      <returns>A JSON string of the <see cref="T:System.Xml.Linq.XNode" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXNode(System.String)">
      <summary>
            Deserializes the <see cref="T:System.Xml.Linq.XNode" /> from a JSON string.
            </summary>
      <param name="value">The JSON string.</param>
      <returns>The deserialized <see cref="T:System.Xml.Linq.XNode" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXNode(System.String,System.String)">
      <summary>
            Deserializes the <see cref="T:System.Xml.Linq.XNode" /> from a JSON string nested in a root element specified by <paramref name="deserializeRootElementName" />.
            </summary>
      <param name="value">The JSON string.</param>
      <param name="deserializeRootElementName">The name of the root element to append when deserializing.</param>
      <returns>The deserialized <see cref="T:System.Xml.Linq.XNode" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXNode(System.String,System.String,System.Boolean)">
      <summary>
            Deserializes the <see cref="T:System.Xml.Linq.XNode" /> from a JSON string nested in a root element specified by <paramref name="deserializeRootElementName" />
            and writes a Json.NET array attribute for collections.
            </summary>
      <param name="value">The JSON string.</param>
      <param name="deserializeRootElementName">The name of the root element to append when deserializing.</param>
      <param name="writeArrayAttribute">
            A flag to indicate whether to write the Json.NET array attribute.
            This attribute helps preserve arrays when converting the written XML back to JSON.
            </param>
      <returns>The deserialized <see cref="T:System.Xml.Linq.XNode" />.</returns>
    </member>
    <member name="P:Newtonsoft.Json.JsonConvert.DefaultSettings">
      <summary>
            Gets or sets a function that creates default <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            Default settings are automatically used by serialization methods on <see cref="T:Newtonsoft.Json.JsonConvert" />,
            and <see cref="M:Newtonsoft.Json.Linq.JToken.ToObject``1" /> and <see cref="M:Newtonsoft.Json.Linq.JToken.FromObject(System.Object)" /> on <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            To serialize without using any default settings create a <see cref="T:Newtonsoft.Json.JsonSerializer" /> with
            <see cref="M:Newtonsoft.Json.JsonSerializer.Create" />.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonConverter">
      <summary>
            Converts an object to and from JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.JsonConverter.CanRead">
      <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter" /> can read JSON.
            </summary>
      <value>
        <c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter" /> can read JSON; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonConverter.CanWrite">
      <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON.
            </summary>
      <value>
        <c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Newtonsoft.Json.JsonConverter`1">
      <summary>
            Converts an object to and from JSON.
            </summary>
      <typeparam name="T">The object type to convert.</typeparam>
    </member>
    <member name="M:Newtonsoft.Json.JsonConverter`1.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonConverter`1.WriteJson(Newtonsoft.Json.JsonWriter,`0,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonConverter`1.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConverter`1.ReadJson(Newtonsoft.Json.JsonReader,System.Type,`0,System.Boolean,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read. If there is no existing value then <c>null</c> will be used.</param>
      <param name="hasExistingValue">The existing value has a value.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConverter`1.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.JsonConverterAttribute">
      <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> to use the specified <see cref="T:Newtonsoft.Json.JsonConverter" /> when serializing the member or class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonConverterAttribute.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonConverterAttribute" /> class.
            </summary>
      <param name="converterType">Type of the <see cref="T:Newtonsoft.Json.JsonConverter" />.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonConverterAttribute.#ctor(System.Type,System.Object[])">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonConverterAttribute" /> class.
            </summary>
      <param name="converterType">Type of the <see cref="T:Newtonsoft.Json.JsonConverter" />.</param>
      <param name="converterParameters">Parameter list to use when constructing the <see cref="T:Newtonsoft.Json.JsonConverter" />. Can be <c>null</c>.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonConverterAttribute.ConverterType">
      <summary>
            Gets the <see cref="T:System.Type" /> of the <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
      <value>The <see cref="T:System.Type" /> of the <see cref="T:Newtonsoft.Json.JsonConverter" />.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonConverterAttribute.ConverterParameters">
      <summary>
            The parameter list to use when constructing the <see cref="T:Newtonsoft.Json.JsonConverter" /> described by <see cref="P:Newtonsoft.Json.JsonConverterAttribute.ConverterType" />.
            If <c>null</c>, the default constructor is used.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonConverterCollection">
      <summary>
            Represents a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonDictionaryAttribute">
      <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> how to serialize the collection.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonDictionaryAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonDictionaryAttribute" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonDictionaryAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonDictionaryAttribute" /> class with the specified container Id.
            </summary>
      <param name="id">The container Id.</param>
    </member>
    <member name="T:Newtonsoft.Json.JsonException">
      <summary>
            The exception thrown when an error occurs during JSON serialization or deserialization.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonException" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonException" /> class
            with a specified error message.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or <c>null</c> if no inner exception is specified.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is <c>null</c>.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is <c>null</c> or <see cref="P:System.Exception.HResult" /> is zero (0).</exception>
    </member>
    <member name="T:Newtonsoft.Json.JsonExtensionDataAttribute">
      <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> to deserialize properties with no matching class member into the specified collection
            and write values during serialization.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonExtensionDataAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonExtensionDataAttribute" /> class.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonExtensionDataAttribute.WriteData">
      <summary>
            Gets or sets a value that indicates whether to write extension data when serializing the object.
            </summary>
      <value>
        <c>true</c> to write extension data when serializing the object; otherwise, <c>false</c>. The default is <c>true</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonExtensionDataAttribute.ReadData">
      <summary>
            Gets or sets a value that indicates whether to read extension data when deserializing the object.
            </summary>
      <value>
        <c>true</c> to read extension data when deserializing the object; otherwise, <c>false</c>. The default is <c>true</c>.
            </value>
    </member>
    <member name="T:Newtonsoft.Json.JsonIgnoreAttribute">
      <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> not to serialize the public field or public read/write property value.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonObjectAttribute">
      <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> how to serialize the object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonObjectAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonObjectAttribute" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonObjectAttribute.#ctor(Newtonsoft.Json.MemberSerialization)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonObjectAttribute" /> class with the specified member serialization.
            </summary>
      <param name="memberSerialization">The member serialization.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonObjectAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonObjectAttribute" /> class with the specified container Id.
            </summary>
      <param name="id">The container Id.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonObjectAttribute.MemberSerialization">
      <summary>
            Gets or sets the member serialization.
            </summary>
      <value>The member serialization.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonObjectAttribute.ItemNullValueHandling">
      <summary>
            Gets or sets how the object's properties with null values are handled during serialization and deserialization.
            </summary>
      <value>How the object's properties with null values are handled during serialization and deserialization.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonObjectAttribute.ItemRequired">
      <summary>
            Gets or sets a value that indicates whether the object's properties are required.
            </summary>
      <value>
            	A value indicating whether the object's properties are required.
            </value>
    </member>
    <member name="T:Newtonsoft.Json.JsonPropertyAttribute">
      <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> to always serialize the member with the specified name.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonPropertyAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonPropertyAttribute" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonPropertyAttribute" /> class with the specified name.
            </summary>
      <param name="propertyName">Name of the property.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ItemConverterType">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.JsonConverter" /> used when serializing the property's collection items.
            </summary>
      <value>The collection's items <see cref="T:Newtonsoft.Json.JsonConverter" />.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ItemConverterParameters">
      <summary>
            The parameter list to use when constructing the <see cref="T:Newtonsoft.Json.JsonConverter" /> described by <see cref="P:Newtonsoft.Json.JsonPropertyAttribute.ItemConverterType" />.
            If <c>null</c>, the default constructor is used.
            When non-<c>null</c>, there must be a constructor defined in the <see cref="T:Newtonsoft.Json.JsonConverter" /> that exactly matches the number,
            order, and type of these parameters.
            </summary>
      <example>
        <code>
            [JsonProperty(ItemConverterType = typeof(MyContainerConverter), ItemConverterParameters = new object[] { 123, "Four" })]
            </code>
      </example>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.NamingStrategyType">
      <summary>
            Gets or sets the <see cref="T:System.Type" /> of the <see cref="T:Newtonsoft.Json.Serialization.NamingStrategy" />.
            </summary>
      <value>The <see cref="T:System.Type" /> of the <see cref="T:Newtonsoft.Json.Serialization.NamingStrategy" />.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.NamingStrategyParameters">
      <summary>
            The parameter list to use when constructing the <see cref="T:Newtonsoft.Json.Serialization.NamingStrategy" /> described by <see cref="P:Newtonsoft.Json.JsonPropertyAttribute.NamingStrategyType" />.
            If <c>null</c>, the default constructor is used.
            When non-<c>null</c>, there must be a constructor defined in the <see cref="T:Newtonsoft.Json.Serialization.NamingStrategy" /> that exactly matches the number,
            order, and type of these parameters.
            </summary>
      <example>
        <code>
            [JsonProperty(NamingStrategyType = typeof(MyNamingStrategy), NamingStrategyParameters = new object[] { 123, "Four" })]
            </code>
      </example>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.NullValueHandling">
      <summary>
            Gets or sets the null value handling used when serializing this property.
            </summary>
      <value>The null value handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.DefaultValueHandling">
      <summary>
            Gets or sets the default value handling used when serializing this property.
            </summary>
      <value>The default value handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ReferenceLoopHandling">
      <summary>
            Gets or sets the reference loop handling used when serializing this property.
            </summary>
      <value>The reference loop handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ObjectCreationHandling">
      <summary>
            Gets or sets the object creation handling used when deserializing this property.
            </summary>
      <value>The object creation handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.TypeNameHandling">
      <summary>
            Gets or sets the type name handling used when serializing this property.
            </summary>
      <value>The type name handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.IsReference">
      <summary>
            Gets or sets whether this property's value is serialized as a reference.
            </summary>
      <value>Whether this property's value is serialized as a reference.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.Order">
      <summary>
            Gets or sets the order of serialization of a member.
            </summary>
      <value>The numeric order of serialization.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.Required">
      <summary>
            Gets or sets a value indicating whether this property is required.
            </summary>
      <value>
            	A value indicating whether this property is required.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.PropertyName">
      <summary>
            Gets or sets the name of the property.
            </summary>
      <value>The name of the property.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ItemReferenceLoopHandling">
      <summary>
            Gets or sets the reference loop handling used when serializing the property's collection items.
            </summary>
      <value>The collection's items reference loop handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ItemTypeNameHandling">
      <summary>
            Gets or sets the type name handling used when serializing the property's collection items.
            </summary>
      <value>The collection's items type name handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ItemIsReference">
      <summary>
            Gets or sets whether this property's collection items are serialized as a reference.
            </summary>
      <value>Whether this property's collection items are serialized as a reference.</value>
    </member>
    <member name="T:Newtonsoft.Json.JsonReader">
      <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized JSON data.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonReader.State">
      <summary>
            Specifies the state of the reader.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonReader.State.Start">
      <summary>
            A <see cref="T:Newtonsoft.Json.JsonReader" /> read method has not been called.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonReader.State.Complete">
      <summary>
            The end of the file has been reached successfully.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonReader.State.Property">
      <summary>
            Reader is at a property.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonReader.State.ObjectStart">
      <summary>
            Reader is at the start of an object.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonReader.State.Object">
      <summary>
            Reader is in an object.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonReader.State.ArrayStart">
      <summary>
            Reader is at the start of an array.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonReader.State.Array">
      <summary>
            Reader is in an array.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonReader.State.Closed">
      <summary>
            The <see cref="M:Newtonsoft.Json.JsonReader.Close" /> method has been called.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonReader.State.PostValue">
      <summary>
            Reader has just read a value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonReader.State.ConstructorStart">
      <summary>
            Reader is at the start of a constructor.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonReader.State.Constructor">
      <summary>
            Reader is in a constructor.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonReader.State.Error">
      <summary>
            An error occurred that prevents the read operation from continuing.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonReader.State.Finished">
      <summary>
            The end of the file has been reached successfully.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.ReadAsync(System.Threading.CancellationToken)">
      <summary>
            Asynchronously reads the next JSON token from the source.
            </summary>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous read. The <see cref="P:System.Threading.Tasks.Task`1.Result" />
            property returns <c>true</c> if the next token was read successfully; <c>false</c> if there are no more tokens to read.</returns>
      <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.SkipAsync(System.Threading.CancellationToken)">
      <summary>
            Asynchronously skips the children of the current token.
            </summary>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.ReadAsBooleanAsync(System.Threading.CancellationToken)">
      <summary>
            Asynchronously reads the next JSON token from the source as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" />.
            </summary>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous read. The <see cref="P:System.Threading.Tasks.Task`1.Result" />
            property returns the <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" />. This result will be <c>null</c> at the end of an array.</returns>
      <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.ReadAsBytesAsync(System.Threading.CancellationToken)">
      <summary>
            Asynchronously reads the next JSON token from the source as a <see cref="T:System.Byte" />[].
            </summary>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous read. The <see cref="P:System.Threading.Tasks.Task`1.Result" />
            property returns the <see cref="T:System.Byte" />[]. This result will be <c>null</c> at the end of an array.</returns>
      <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.ReadAsDateTimeAsync(System.Threading.CancellationToken)">
      <summary>
            Asynchronously reads the next JSON token from the source as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" />.
            </summary>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous read. The <see cref="P:System.Threading.Tasks.Task`1.Result" />
            property returns the <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" />. This result will be <c>null</c> at the end of an array.</returns>
      <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.ReadAsDateTimeOffsetAsync(System.Threading.CancellationToken)">
      <summary>
            Asynchronously reads the next JSON token from the source as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" />.
            </summary>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous read. The <see cref="P:System.Threading.Tasks.Task`1.Result" />
            property returns the <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" />. This result will be <c>null</c> at the end of an array.</returns>
      <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.ReadAsDecimalAsync(System.Threading.CancellationToken)">
      <summary>
            Asynchronously reads the next JSON token from the source as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" />.
            </summary>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous read. The <see cref="P:System.Threading.Tasks.Task`1.Result" />
            property returns the <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" />. This result will be <c>null</c> at the end of an array.</returns>
      <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.ReadAsDoubleAsync(System.Threading.CancellationToken)">
      <summary>
            Asynchronously reads the next JSON token from the source as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" />.
            </summary>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous read. The <see cref="P:System.Threading.Tasks.Task`1.Result" />
            property returns the <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" />. This result will be <c>null</c> at the end of an array.</returns>
      <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.ReadAsInt32Async(System.Threading.CancellationToken)">
      <summary>
            Asynchronously reads the next JSON token from the source as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" />.
            </summary>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous read. The <see cref="P:System.Threading.Tasks.Task`1.Result" />
            property returns the <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" />. This result will be <c>null</c> at the end of an array.</returns>
      <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.ReadAsStringAsync(System.Threading.CancellationToken)">
      <summary>
            Asynchronously reads the next JSON token from the source as a <see cref="T:System.String" />.
            </summary>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous read. The <see cref="P:System.Threading.Tasks.Task`1.Result" />
            property returns the <see cref="T:System.String" />. This result will be <c>null</c> at the end of an array.</returns>
      <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReader" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.Read">
      <summary>
            Reads the next JSON token from the source.
            </summary>
      <returns>
        <c>true</c> if the next token was read successfully; <c>false</c> if there are no more tokens to read.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.ReadAsInt32">
      <summary>
            Reads the next JSON token from the source as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.ReadAsString">
      <summary>
            Reads the next JSON token from the source as a <see cref="T:System.String" />.
            </summary>
      <returns>A <see cref="T:System.String" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.ReadAsBytes">
      <summary>
            Reads the next JSON token from the source as a <see cref="T:System.Byte" />[].
            </summary>
      <returns>A <see cref="T:System.Byte" />[] or <c>null</c> if the next JSON token is null. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.ReadAsDouble">
      <summary>
            Reads the next JSON token from the source as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.ReadAsBoolean">
      <summary>
            Reads the next JSON token from the source as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.ReadAsDecimal">
      <summary>
            Reads the next JSON token from the source as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.ReadAsDateTime">
      <summary>
            Reads the next JSON token from the source as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.ReadAsDateTimeOffset">
      <summary>
            Reads the next JSON token from the source as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.Skip">
      <summary>
            Skips the children of the current token.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.SetToken(Newtonsoft.Json.JsonToken)">
      <summary>
            Sets the current token.
            </summary>
      <param name="newToken">The new token.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.SetToken(Newtonsoft.Json.JsonToken,System.Object)">
      <summary>
            Sets the current token and value.
            </summary>
      <param name="newToken">The new token.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.SetToken(Newtonsoft.Json.JsonToken,System.Object,System.Boolean)">
      <summary>
            Sets the current token and value.
            </summary>
      <param name="newToken">The new token.</param>
      <param name="value">The value.</param>
      <param name="updateIndex">A flag indicating whether the position index inside an array should be updated.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.SetStateBasedOnCurrent">
      <summary>
            Sets the state based on current token type.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.Dispose(System.Boolean)">
      <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.Close">
      <summary>
            Changes the reader's state to <see cref="F:Newtonsoft.Json.JsonReader.State.Closed" />.
            If <see cref="P:Newtonsoft.Json.JsonReader.CloseInput" /> is set to <c>true</c>, the source is also closed.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.CurrentState">
      <summary>
            Gets the current reader state.
            </summary>
      <value>The current reader state.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.CloseInput">
      <summary>
            Gets or sets a value indicating whether the source should be closed when this reader is closed.
            </summary>
      <value>
        <c>true</c> to close the source when this reader is closed; otherwise <c>false</c>. The default is <c>true</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.SupportMultipleContent">
      <summary>
            Gets or sets a value indicating whether multiple pieces of JSON content can
            be read from a continuous stream without erroring.
            </summary>
      <value>
        <c>true</c> to support reading multiple pieces of JSON content; otherwise <c>false</c>.
            The default is <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.QuoteChar">
      <summary>
            Gets the quotation mark character used to enclose the value of a string.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.DateTimeZoneHandling">
      <summary>
            Gets or sets how <see cref="T:System.DateTime" /> time zones are handled when reading JSON.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.DateParseHandling">
      <summary>
            Gets or sets how date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed when reading JSON.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.FloatParseHandling">
      <summary>
            Gets or sets how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.DateFormatString">
      <summary>
            Gets or sets how custom date formatted strings are parsed when reading JSON.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.MaxDepth">
      <summary>
            Gets or sets the maximum depth allowed when reading JSON. Reading past this depth will throw a <see cref="T:Newtonsoft.Json.JsonReaderException" />.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.TokenType">
      <summary>
            Gets the type of the current JSON token. 
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.Value">
      <summary>
            Gets the text value of the current JSON token.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.ValueType">
      <summary>
            Gets the .NET type for the current JSON token.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.Depth">
      <summary>
            Gets the depth of the current token in the JSON document.
            </summary>
      <value>The depth of the current token in the JSON document.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.Path">
      <summary>
            Gets the path of the current JSON token. 
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.Culture">
      <summary>
            Gets or sets the culture used when reading JSON. Defaults to <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonReaderException">
      <summary>
            The exception thrown when an error occurs while reading JSON text.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonReaderException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReaderException" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonReaderException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReaderException" /> class
            with a specified error message.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonReaderException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReaderException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or <c>null</c> if no inner exception is specified.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonReaderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReaderException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is <c>null</c>.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is <c>null</c> or <see cref="P:System.Exception.HResult" /> is zero (0).</exception>
    </member>
    <member name="M:Newtonsoft.Json.JsonReaderException.#ctor(System.String,System.String,System.Int32,System.Int32,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReaderException" /> class
            with a specified error message, JSON path, line number, line position, and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="path">The path to the JSON where the error occurred.</param>
      <param name="lineNumber">The line number indicating where the error occurred.</param>
      <param name="linePosition">The line position indicating where the error occurred.</param>
      <param name="innerException">The exception that is the cause of the current exception, or <c>null</c> if no inner exception is specified.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonReaderException.LineNumber">
      <summary>
            Gets the line number indicating where the error occurred.
            </summary>
      <value>The line number indicating where the error occurred.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonReaderException.LinePosition">
      <summary>
            Gets the line position indicating where the error occurred.
            </summary>
      <value>The line position indicating where the error occurred.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonReaderException.Path">
      <summary>
            Gets the path to the JSON where the error occurred.
            </summary>
      <value>The path to the JSON where the error occurred.</value>
    </member>
    <member name="T:Newtonsoft.Json.JsonRequiredAttribute">
      <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> to always serialize the member, and to require that the member has a value.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonSerializationException">
      <summary>
            The exception thrown when an error occurs during JSON serialization or deserialization.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException" /> class
            with a specified error message.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or <c>null</c> if no inner exception is specified.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is <c>null</c>.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is <c>null</c> or <see cref="P:System.Exception.HResult" /> is zero (0).</exception>
    </member>
    <member name="T:Newtonsoft.Json.JsonSerializer">
      <summary>
            Serializes and deserializes objects into and from the JSON format.
            The <see cref="T:Newtonsoft.Json.JsonSerializer" /> enables you to control how objects are encoded into JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializer" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Create">
      <summary>
            Creates a new <see cref="T:Newtonsoft.Json.JsonSerializer" /> instance.
            The <see cref="T:Newtonsoft.Json.JsonSerializer" /> will not use default settings 
            from <see cref="P:Newtonsoft.Json.JsonConvert.DefaultSettings" />.
            </summary>
      <returns>
            A new <see cref="T:Newtonsoft.Json.JsonSerializer" /> instance.
            The <see cref="T:Newtonsoft.Json.JsonSerializer" /> will not use default settings 
            from <see cref="P:Newtonsoft.Json.JsonConvert.DefaultSettings" />.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Create(Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Creates a new <see cref="T:Newtonsoft.Json.JsonSerializer" /> instance using the specified <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            The <see cref="T:Newtonsoft.Json.JsonSerializer" /> will not use default settings 
            from <see cref="P:Newtonsoft.Json.JsonConvert.DefaultSettings" />.
            </summary>
      <param name="settings">The settings to be applied to the <see cref="T:Newtonsoft.Json.JsonSerializer" />.</param>
      <returns>
            A new <see cref="T:Newtonsoft.Json.JsonSerializer" /> instance using the specified <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            The <see cref="T:Newtonsoft.Json.JsonSerializer" /> will not use default settings 
            from <see cref="P:Newtonsoft.Json.JsonConvert.DefaultSettings" />.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.CreateDefault">
      <summary>
            Creates a new <see cref="T:Newtonsoft.Json.JsonSerializer" /> instance.
            The <see cref="T:Newtonsoft.Json.JsonSerializer" /> will use default settings 
            from <see cref="P:Newtonsoft.Json.JsonConvert.DefaultSettings" />.
            </summary>
      <returns>
            A new <see cref="T:Newtonsoft.Json.JsonSerializer" /> instance.
            The <see cref="T:Newtonsoft.Json.JsonSerializer" /> will use default settings 
            from <see cref="P:Newtonsoft.Json.JsonConvert.DefaultSettings" />.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.CreateDefault(Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Creates a new <see cref="T:Newtonsoft.Json.JsonSerializer" /> instance using the specified <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            The <see cref="T:Newtonsoft.Json.JsonSerializer" /> will use default settings 
            from <see cref="P:Newtonsoft.Json.JsonConvert.DefaultSettings" /> as well as the specified <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
      <param name="settings">The settings to be applied to the <see cref="T:Newtonsoft.Json.JsonSerializer" />.</param>
      <returns>
            A new <see cref="T:Newtonsoft.Json.JsonSerializer" /> instance using the specified <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            The <see cref="T:Newtonsoft.Json.JsonSerializer" /> will use default settings 
            from <see cref="P:Newtonsoft.Json.JsonConvert.DefaultSettings" /> as well as the specified <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Populate(System.IO.TextReader,System.Object)">
      <summary>
            Populates the JSON values onto the target object.
            </summary>
      <param name="reader">The <see cref="T:System.IO.TextReader" /> that contains the JSON structure to reader values from.</param>
      <param name="target">The target object to populate values onto.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Populate(Newtonsoft.Json.JsonReader,System.Object)">
      <summary>
            Populates the JSON values onto the target object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> that contains the JSON structure to reader values from.</param>
      <param name="target">The target object to populate values onto.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize(Newtonsoft.Json.JsonReader)">
      <summary>
            Deserializes the JSON structure contained by the specified <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> that contains the JSON structure to deserialize.</param>
      <returns>The <see cref="T:System.Object" /> being deserialized.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize(System.IO.TextReader,System.Type)">
      <summary>
            Deserializes the JSON structure contained by the specified <see cref="T:System.IO.StringReader" />
            into an instance of the specified type.
            </summary>
      <param name="reader">The <see cref="T:System.IO.TextReader" /> containing the object.</param>
      <param name="objectType">The <see cref="T:System.Type" /> of object being deserialized.</param>
      <returns>The instance of <paramref name="objectType" /> being deserialized.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize``1(Newtonsoft.Json.JsonReader)">
      <summary>
            Deserializes the JSON structure contained by the specified <see cref="T:Newtonsoft.Json.JsonReader" />
            into an instance of the specified type.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> containing the object.</param>
      <typeparam name="T">The type of the object to deserialize.</typeparam>
      <returns>The instance of <typeparamref name="T" /> being deserialized.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize(Newtonsoft.Json.JsonReader,System.Type)">
      <summary>
            Deserializes the JSON structure contained by the specified <see cref="T:Newtonsoft.Json.JsonReader" />
            into an instance of the specified type.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> containing the object.</param>
      <param name="objectType">The <see cref="T:System.Type" /> of object being deserialized.</param>
      <returns>The instance of <paramref name="objectType" /> being deserialized.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Serialize(System.IO.TextWriter,System.Object)">
      <summary>
            Serializes the specified <see cref="T:System.Object" /> and writes the JSON structure
            using the specified <see cref="T:System.IO.TextWriter" />.
            </summary>
      <param name="textWriter">The <see cref="T:System.IO.TextWriter" /> used to write the JSON structure.</param>
      <param name="value">The <see cref="T:System.Object" /> to serialize.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Serialize(Newtonsoft.Json.JsonWriter,System.Object,System.Type)">
      <summary>
            Serializes the specified <see cref="T:System.Object" /> and writes the JSON structure
            using the specified <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
      <param name="jsonWriter">The <see cref="T:Newtonsoft.Json.JsonWriter" /> used to write the JSON structure.</param>
      <param name="value">The <see cref="T:System.Object" /> to serialize.</param>
      <param name="objectType">
            The type of the value being serialized.
            This parameter is used when <see cref="P:Newtonsoft.Json.JsonSerializer.TypeNameHandling" /> is <see cref="F:Newtonsoft.Json.TypeNameHandling.Auto" /> to write out the type name if the type of the value does not match.
            Specifying the type is optional.
            </param>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Serialize(System.IO.TextWriter,System.Object,System.Type)">
      <summary>
            Serializes the specified <see cref="T:System.Object" /> and writes the JSON structure
            using the specified <see cref="T:System.IO.TextWriter" />.
            </summary>
      <param name="textWriter">The <see cref="T:System.IO.TextWriter" /> used to write the JSON structure.</param>
      <param name="value">The <see cref="T:System.Object" /> to serialize.</param>
      <param name="objectType">
            The type of the value being serialized.
            This parameter is used when <see cref="P:Newtonsoft.Json.JsonSerializer.TypeNameHandling" /> is Auto to write out the type name if the type of the value does not match.
            Specifying the type is optional.
            </param>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Serialize(Newtonsoft.Json.JsonWriter,System.Object)">
      <summary>
            Serializes the specified <see cref="T:System.Object" /> and writes the JSON structure
            using the specified <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
      <param name="jsonWriter">The <see cref="T:Newtonsoft.Json.JsonWriter" /> used to write the JSON structure.</param>
      <param name="value">The <see cref="T:System.Object" /> to serialize.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.ReferenceResolver">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Serialization.IReferenceResolver" /> used by the serializer when resolving references.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.Binder">
      <summary>
            Gets or sets the <see cref="P:Newtonsoft.Json.JsonSerializer.SerializationBinder" /> used by the serializer when resolving type names.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.SerializationBinder">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Serialization.ISerializationBinder" /> used by the serializer when resolving type names.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.TraceWriter">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Serialization.ITraceWriter" /> used by the serializer when writing trace messages.
            </summary>
      <value>The trace writer.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.EqualityComparer">
      <summary>
            Gets or sets the equality comparer used by the serializer when comparing references.
            </summary>
      <value>The equality comparer.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.TypeNameHandling">
      <summary>
            Gets or sets how type name writing and reading is handled by the serializer.
            The default value is <see cref="F:Newtonsoft.Json.TypeNameHandling.None" />.
            </summary>
      <remarks>
        <see cref="P:Newtonsoft.Json.JsonSerializer.TypeNameHandling" /> should be used with caution when your application deserializes JSON from an external source.
            Incoming types should be validated with a custom <see cref="P:Newtonsoft.Json.JsonSerializer.SerializationBinder" />
            when deserializing with a value other than <see cref="F:Newtonsoft.Json.TypeNameHandling.None" />.
            </remarks>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.TypeNameAssemblyFormat">
      <summary>
            Gets or sets how a type name assembly is written and resolved by the serializer.
            The default value is <see cref="F:System.Runtime.Serialization.Formatters.FormatterAssemblyStyle.Simple" />.
            </summary>
      <value>The type name assembly format.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.TypeNameAssemblyFormatHandling">
      <summary>
            Gets or sets how a type name assembly is written and resolved by the serializer.
            The default value is <see cref="F:Newtonsoft.Json.TypeNameAssemblyFormatHandling.Simple" />.
            </summary>
      <value>The type name assembly format.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.PreserveReferencesHandling">
      <summary>
            Gets or sets how object references are preserved by the serializer.
            The default value is <see cref="F:Newtonsoft.Json.PreserveReferencesHandling.None" />.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.ReferenceLoopHandling">
      <summary>
            Gets or sets how reference loops (e.g. a class referencing itself) is handled.
            The default value is <see cref="F:Newtonsoft.Json.ReferenceLoopHandling.Error" />.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.MissingMemberHandling">
      <summary>
            Gets or sets how missing members (e.g. JSON contains a property that isn't a member on the object) are handled during deserialization.
            The default value is <see cref="F:Newtonsoft.Json.MissingMemberHandling.Ignore" />.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.NullValueHandling">
      <summary>
            Gets or sets how null values are handled during serialization and deserialization.
            The default value is <see cref="F:Newtonsoft.Json.NullValueHandling.Include" />.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.DefaultValueHandling">
      <summary>
            Gets or sets how default values are handled during serialization and deserialization.
            The default value is <see cref="F:Newtonsoft.Json.DefaultValueHandling.Include" />.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.ObjectCreationHandling">
      <summary>
            Gets or sets how objects are created during deserialization.
            The default value is <see cref="F:Newtonsoft.Json.ObjectCreationHandling.Auto" />.
            </summary>
      <value>The object creation handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.ConstructorHandling">
      <summary>
            Gets or sets how constructors are used during deserialization.
            The default value is <see cref="F:Newtonsoft.Json.ConstructorHandling.Default" />.
            </summary>
      <value>The constructor handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.MetadataPropertyHandling">
      <summary>
            Gets or sets how metadata properties are used during deserialization.
            The default value is <see cref="F:Newtonsoft.Json.MetadataPropertyHandling.Default" />.
            </summary>
      <value>The metadata properties handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.Converters">
      <summary>
            Gets a collection <see cref="T:Newtonsoft.Json.JsonConverter" /> that will be used during serialization.
            </summary>
      <value>Collection <see cref="T:Newtonsoft.Json.JsonConverter" /> that will be used during serialization.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.ContractResolver">
      <summary>
            Gets or sets the contract resolver used by the serializer when
            serializing .NET objects to JSON and vice versa.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.Context">
      <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.StreamingContext" /> used by the serializer when invoking serialization callback methods.
            </summary>
      <value>The context.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.Formatting">
      <summary>
            Indicates how JSON text output is formatted.
            The default value is <see cref="F:Newtonsoft.Json.Formatting.None" />.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.DateFormatHandling">
      <summary>
            Gets or sets how dates are written to JSON text.
            The default value is <see cref="F:Newtonsoft.Json.DateFormatHandling.IsoDateFormat" />.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.DateTimeZoneHandling">
      <summary>
            Gets or sets how <see cref="T:System.DateTime" /> time zones are handled during serialization and deserialization.
            The default value is <see cref="F:Newtonsoft.Json.DateTimeZoneHandling.RoundtripKind" />.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.DateParseHandling">
      <summary>
            Gets or sets how date formatted strings, e.g. <c>"\/Date(1198908717056)\/"</c> and <c>"2012-03-21T05:40Z"</c>, are parsed when reading JSON.
            The default value is <see cref="F:Newtonsoft.Json.DateParseHandling.DateTime" />.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.FloatParseHandling">
      <summary>
            Gets or sets how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
            The default value is <see cref="F:Newtonsoft.Json.FloatParseHandling.Double" />.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.FloatFormatHandling">
      <summary>
            Gets or sets how special floating point numbers, e.g. <see cref="F:System.Double.NaN" />,
            <see cref="F:System.Double.PositiveInfinity" /> and <see cref="F:System.Double.NegativeInfinity" />,
            are written as JSON text.
            The default value is <see cref="F:Newtonsoft.Json.FloatFormatHandling.String" />.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.StringEscapeHandling">
      <summary>
            Gets or sets how strings are escaped when writing JSON text.
            The default value is <see cref="F:Newtonsoft.Json.StringEscapeHandling.Default" />.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.DateFormatString">
      <summary>
            Gets or sets how <see cref="T:System.DateTime" /> and <see cref="T:System.DateTimeOffset" /> values are formatted when writing JSON text,
            and the expected date format when reading JSON text.
            The default value is <c>"yyyy'-'MM'-'dd'T'HH':'mm':'ss.FFFFFFFK"</c>.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.Culture">
      <summary>
            Gets or sets the culture used when reading JSON.
            The default value is <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.MaxDepth">
      <summary>
            Gets or sets the maximum depth allowed when reading JSON. Reading past this depth will throw a <see cref="T:Newtonsoft.Json.JsonReaderException" />.
            A null value means there is no maximum.
            The default value is <c>null</c>.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.CheckAdditionalContent">
      <summary>
            Gets a value indicating whether there will be a check for additional JSON content after deserializing an object.
            The default value is <c>false</c>.
            </summary>
      <value>
        <c>true</c> if there will be a check for additional JSON content after deserializing an object; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="E:Newtonsoft.Json.JsonSerializer.Error">
      <summary>
            Occurs when the <see cref="T:Newtonsoft.Json.JsonSerializer" /> errors during serialization and deserialization.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonSerializerSettings">
      <summary>
            Specifies the settings on a <see cref="T:Newtonsoft.Json.JsonSerializer" /> object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializerSettings.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> class.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.ReferenceLoopHandling">
      <summary>
            Gets or sets how reference loops (e.g. a class referencing itself) are handled.
            The default value is <see cref="F:Newtonsoft.Json.ReferenceLoopHandling.Error" />.
            </summary>
      <value>Reference loop handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.MissingMemberHandling">
      <summary>
            Gets or sets how missing members (e.g. JSON contains a property that isn't a member on the object) are handled during deserialization.
            The default value is <see cref="F:Newtonsoft.Json.MissingMemberHandling.Ignore" />.
            </summary>
      <value>Missing member handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.ObjectCreationHandling">
      <summary>
            Gets or sets how objects are created during deserialization.
            The default value is <see cref="F:Newtonsoft.Json.ObjectCreationHandling.Auto" />.
            </summary>
      <value>The object creation handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.NullValueHandling">
      <summary>
            Gets or sets how null values are handled during serialization and deserialization.
            The default value is <see cref="F:Newtonsoft.Json.NullValueHandling.Include" />.
            </summary>
      <value>Null value handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.DefaultValueHandling">
      <summary>
            Gets or sets how default values are handled during serialization and deserialization.
            The default value is <see cref="F:Newtonsoft.Json.DefaultValueHandling.Include" />.
            </summary>
      <value>The default value handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.Converters">
      <summary>
            Gets or sets a <see cref="T:Newtonsoft.Json.JsonConverter" /> collection that will be used during serialization.
            </summary>
      <value>The converters.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.PreserveReferencesHandling">
      <summary>
            Gets or sets how object references are preserved by the serializer.
            The default value is <see cref="F:Newtonsoft.Json.PreserveReferencesHandling.None" />.
            </summary>
      <value>The preserve references handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.TypeNameHandling">
      <summary>
            Gets or sets how type name writing and reading is handled by the serializer.
            The default value is <see cref="F:Newtonsoft.Json.TypeNameHandling.None" />.
            </summary>
      <remarks>
        <see cref="P:Newtonsoft.Json.JsonSerializerSettings.TypeNameHandling" /> should be used with caution when your application deserializes JSON from an external source.
            Incoming types should be validated with a custom <see cref="P:Newtonsoft.Json.JsonSerializerSettings.SerializationBinder" />
            when deserializing with a value other than <see cref="F:Newtonsoft.Json.TypeNameHandling.None" />.
            </remarks>
      <value>The type name handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.MetadataPropertyHandling">
      <summary>
            Gets or sets how metadata properties are used during deserialization.
            The default value is <see cref="F:Newtonsoft.Json.MetadataPropertyHandling.Default" />.
            </summary>
      <value>The metadata properties handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.TypeNameAssemblyFormat">
      <summary>
            Gets or sets how a type name assembly is written and resolved by the serializer.
            The default value is <see cref="F:System.Runtime.Serialization.Formatters.FormatterAssemblyStyle.Simple" />.
            </summary>
      <value>The type name assembly format.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.TypeNameAssemblyFormatHandling">
      <summary>
            Gets or sets how a type name assembly is written and resolved by the serializer.
            The default value is <see cref="F:Newtonsoft.Json.TypeNameAssemblyFormatHandling.Simple" />.
            </summary>
      <value>The type name assembly format.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.ConstructorHandling">
      <summary>
            Gets or sets how constructors are used during deserialization.
            The default value is <see cref="F:Newtonsoft.Json.ConstructorHandling.Default" />.
            </summary>
      <value>The constructor handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.ContractResolver">
      <summary>
            Gets or sets the contract resolver used by the serializer when
            serializing .NET objects to JSON and vice versa.
            </summary>
      <value>The contract resolver.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.EqualityComparer">
      <summary>
            Gets or sets the equality comparer used by the serializer when comparing references.
            </summary>
      <value>The equality comparer.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.ReferenceResolver">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Serialization.IReferenceResolver" /> used by the serializer when resolving references.
            </summary>
      <value>The reference resolver.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.ReferenceResolverProvider">
      <summary>
            Gets or sets a function that creates the <see cref="T:Newtonsoft.Json.Serialization.IReferenceResolver" /> used by the serializer when resolving references.
            </summary>
      <value>A function that creates the <see cref="T:Newtonsoft.Json.Serialization.IReferenceResolver" /> used by the serializer when resolving references.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.TraceWriter">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Serialization.ITraceWriter" /> used by the serializer when writing trace messages.
            </summary>
      <value>The trace writer.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.Binder">
      <summary>
            Gets or sets the <see cref="P:Newtonsoft.Json.JsonSerializerSettings.SerializationBinder" /> used by the serializer when resolving type names.
            </summary>
      <value>The binder.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.SerializationBinder">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Serialization.ISerializationBinder" /> used by the serializer when resolving type names.
            </summary>
      <value>The binder.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.Error">
      <summary>
            Gets or sets the error handler called during serialization and deserialization.
            </summary>
      <value>The error handler called during serialization and deserialization.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.Context">
      <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.StreamingContext" /> used by the serializer when invoking serialization callback methods.
            </summary>
      <value>The context.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.DateFormatString">
      <summary>
            Gets or sets how <see cref="T:System.DateTime" /> and <see cref="T:System.DateTimeOffset" /> values are formatted when writing JSON text,
            and the expected date format when reading JSON text.
            The default value is <c>"yyyy'-'MM'-'dd'T'HH':'mm':'ss.FFFFFFFK"</c>.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.MaxDepth">
      <summary>
            Gets or sets the maximum depth allowed when reading JSON. Reading past this depth will throw a <see cref="T:Newtonsoft.Json.JsonReaderException" />.
            A null value means there is no maximum.
            The default value is <c>null</c>.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.Formatting">
      <summary>
            Indicates how JSON text output is formatted.
            The default value is <see cref="F:Newtonsoft.Json.Formatting.None" />.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.DateFormatHandling">
      <summary>
            Gets or sets how dates are written to JSON text.
            The default value is <see cref="F:Newtonsoft.Json.DateFormatHandling.IsoDateFormat" />.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.DateTimeZoneHandling">
      <summary>
            Gets or sets how <see cref="T:System.DateTime" /> time zones are handled during serialization and deserialization.
            The default value is <see cref="F:Newtonsoft.Json.DateTimeZoneHandling.RoundtripKind" />.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.DateParseHandling">
      <summary>
            Gets or sets how date formatted strings, e.g. <c>"\/Date(1198908717056)\/"</c> and <c>"2012-03-21T05:40Z"</c>, are parsed when reading JSON.
            The default value is <see cref="F:Newtonsoft.Json.DateParseHandling.DateTime" />.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.FloatFormatHandling">
      <summary>
            Gets or sets how special floating point numbers, e.g. <see cref="F:System.Double.NaN" />,
            <see cref="F:System.Double.PositiveInfinity" /> and <see cref="F:System.Double.NegativeInfinity" />,
            are written as JSON.
            The default value is <see cref="F:Newtonsoft.Json.FloatFormatHandling.String" />.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.FloatParseHandling">
      <summary>
            Gets or sets how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
            The default value is <see cref="F:Newtonsoft.Json.FloatParseHandling.Double" />.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.StringEscapeHandling">
      <summary>
            Gets or sets how strings are escaped when writing JSON text.
            The default value is <see cref="F:Newtonsoft.Json.StringEscapeHandling.Default" />.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.Culture">
      <summary>
            Gets or sets the culture used when reading JSON.
            The default value is <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.CheckAdditionalContent">
      <summary>
            Gets a value indicating whether there will be a check for additional content after deserializing an object.
            The default value is <c>false</c>.
            </summary>
      <value>
        <c>true</c> if there will be a check for additional content after deserializing an object; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:Newtonsoft.Json.JsonTextReader">
      <summary>
            Represents a reader that provides fast, non-cached, forward-only access to JSON text data.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsync(System.Threading.CancellationToken)">
      <summary>
            Asynchronously reads the next JSON token from the source.
            </summary>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous read. The <see cref="P:System.Threading.Tasks.Task`1.Result" />
            property returns <c>true</c> if the next token was read successfully; <c>false</c> if there are no more tokens to read.</returns>
      <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsBooleanAsync(System.Threading.CancellationToken)">
      <summary>
            Asynchronously reads the next JSON token from the source as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" />.
            </summary>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous read. The <see cref="P:System.Threading.Tasks.Task`1.Result" />
            property returns the <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" />. This result will be <c>null</c> at the end of an array.</returns>
      <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsBytesAsync(System.Threading.CancellationToken)">
      <summary>
            Asynchronously reads the next JSON token from the source as a <see cref="T:System.Byte" />[].
            </summary>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous read. The <see cref="P:System.Threading.Tasks.Task`1.Result" />
            property returns the <see cref="T:System.Byte" />[]. This result will be <c>null</c> at the end of an array.</returns>
      <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsDateTimeAsync(System.Threading.CancellationToken)">
      <summary>
            Asynchronously reads the next JSON token from the source as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" />.
            </summary>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous read. The <see cref="P:System.Threading.Tasks.Task`1.Result" />
            property returns the <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" />. This result will be <c>null</c> at the end of an array.</returns>
      <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsDateTimeOffsetAsync(System.Threading.CancellationToken)">
      <summary>
            Asynchronously reads the next JSON token from the source as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" />.
            </summary>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous read. The <see cref="P:System.Threading.Tasks.Task`1.Result" />
            property returns the <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" />. This result will be <c>null</c> at the end of an array.</returns>
      <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsDecimalAsync(System.Threading.CancellationToken)">
      <summary>
            Asynchronously reads the next JSON token from the source as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" />.
            </summary>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous read. The <see cref="P:System.Threading.Tasks.Task`1.Result" />
            property returns the <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" />. This result will be <c>null</c> at the end of an array.</returns>
      <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsDoubleAsync(System.Threading.CancellationToken)">
      <summary>
            Asynchronously reads the next JSON token from the source as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" />.
            </summary>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous read. The <see cref="P:System.Threading.Tasks.Task`1.Result" />
            property returns the <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" />. This result will be <c>null</c> at the end of an array.</returns>
      <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsInt32Async(System.Threading.CancellationToken)">
      <summary>
            Asynchronously reads the next JSON token from the source as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" />.
            </summary>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous read. The <see cref="P:System.Threading.Tasks.Task`1.Result" />
            property returns the <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" />. This result will be <c>null</c> at the end of an array.</returns>
      <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsStringAsync(System.Threading.CancellationToken)">
      <summary>
            Asynchronously reads the next JSON token from the source as a <see cref="T:System.String" />.
            </summary>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous read. The <see cref="P:System.Threading.Tasks.Task`1.Result" />
            property returns the <see cref="T:System.String" />. This result will be <c>null</c> at the end of an array.</returns>
      <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.#ctor(System.IO.TextReader)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonTextReader" /> class with the specified <see cref="T:System.IO.TextReader" />.
            </summary>
      <param name="reader">The <see cref="T:System.IO.TextReader" /> containing the JSON data to read.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.Read">
      <summary>
            Reads the next JSON token from the underlying <see cref="T:System.IO.TextReader" />.
            </summary>
      <returns>
        <c>true</c> if the next token was read successfully; <c>false</c> if there are no more tokens to read.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsInt32">
      <summary>
            Reads the next JSON token from the underlying <see cref="T:System.IO.TextReader" /> as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsDateTime">
      <summary>
            Reads the next JSON token from the underlying <see cref="T:System.IO.TextReader" /> as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsString">
      <summary>
            Reads the next JSON token from the underlying <see cref="T:System.IO.TextReader" /> as a <see cref="T:System.String" />.
            </summary>
      <returns>A <see cref="T:System.String" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsBytes">
      <summary>
            Reads the next JSON token from the underlying <see cref="T:System.IO.TextReader" /> as a <see cref="T:System.Byte" />[].
            </summary>
      <returns>A <see cref="T:System.Byte" />[] or <c>null</c> if the next JSON token is null. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsBoolean">
      <summary>
            Reads the next JSON token from the underlying <see cref="T:System.IO.TextReader" /> as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsDateTimeOffset">
      <summary>
            Reads the next JSON token from the underlying <see cref="T:System.IO.TextReader" /> as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsDecimal">
      <summary>
            Reads the next JSON token from the underlying <see cref="T:System.IO.TextReader" /> as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsDouble">
      <summary>
            Reads the next JSON token from the underlying <see cref="T:System.IO.TextReader" /> as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.Close">
      <summary>
            Changes the reader's state to <see cref="F:Newtonsoft.Json.JsonReader.State.Closed" />.
            If <see cref="P:Newtonsoft.Json.JsonReader.CloseInput" /> is set to <c>true</c>, the underlying <see cref="T:System.IO.TextReader" /> is also closed.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.HasLineInfo">
      <summary>
            Gets a value indicating whether the class can return line information.
            </summary>
      <returns>
        <c>true</c> if <see cref="P:Newtonsoft.Json.JsonTextReader.LineNumber" /> and <see cref="P:Newtonsoft.Json.JsonTextReader.LinePosition" /> can be provided; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.JsonTextReader.ArrayPool">
      <summary>
            Gets or sets the reader's character buffer pool.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonTextReader.LineNumber">
      <summary>
            Gets the current line number.
            </summary>
      <value>
            The current line number or 0 if no line information is available (for example, <see cref="M:Newtonsoft.Json.JsonTextReader.HasLineInfo" /> returns <c>false</c>).
            </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonTextReader.LinePosition">
      <summary>
            Gets the current line position.
            </summary>
      <value>
            The current line position or 0 if no line information is available (for example, <see cref="M:Newtonsoft.Json.JsonTextReader.HasLineInfo" /> returns <c>false</c>).
            </value>
    </member>
    <member name="T:Newtonsoft.Json.JsonTextWriter">
      <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating JSON data.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.FlushAsync(System.Threading.CancellationToken)">
      <summary>
            Asynchronously flushes whatever is in the buffer to the destination and also flushes the destination.
            </summary>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueDelimiterAsync(System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes the JSON value delimiter.
            </summary>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteEndAsync(Newtonsoft.Json.JsonToken,System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes the specified end token.
            </summary>
      <param name="token">The end token to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.CloseAsync(System.Threading.CancellationToken)">
      <summary>
            Asynchronously closes this writer.
            If <see cref="P:Newtonsoft.Json.JsonWriter.CloseOutput" /> is set to <c>true</c>, the destination is also closed.
            </summary>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteEndAsync(System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes the end of the current JSON object or array.
            </summary>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteIndentAsync(System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes indent characters.
            </summary>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteIndentSpaceAsync(System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes an indent space.
            </summary>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteRawAsync(System.String,System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes raw JSON without changing the writer's state.
            </summary>
      <param name="json">The raw JSON to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteNullAsync(System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes a null value.
            </summary>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WritePropertyNameAsync(System.String,System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes the property name of a name/value pair of a JSON object.
            </summary>
      <param name="name">The name of the property.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WritePropertyNameAsync(System.String,System.Boolean,System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes the property name of a name/value pair of a JSON object.
            </summary>
      <param name="name">The name of the property.</param>
      <param name="escape">A flag to indicate whether the text should be escaped when it is written as a JSON property name.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteStartArrayAsync(System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes the beginning of a JSON array.
            </summary>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteStartObjectAsync(System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes the beginning of a JSON object.
            </summary>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteStartConstructorAsync(System.String,System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes the start of a constructor with the given name.
            </summary>
      <param name="name">The name of the constructor.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteUndefinedAsync(System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes an undefined value.
            </summary>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteWhitespaceAsync(System.String,System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes the given white space.
            </summary>
      <param name="ws">The string of white space characters.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Boolean,System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" /> value to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.Boolean},System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes a <see cref="T:System.Boolean" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Boolean" /> value to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Byte,System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes a <see cref="T:System.Byte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Byte" /> value to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.Byte},System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Byte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.Byte" /> value to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Byte[],System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes a <see cref="T:System.Byte" />[] value.
            </summary>
      <param name="value">The <see cref="T:System.Byte" />[] value to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Char,System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes a <see cref="T:System.Char" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Char" /> value to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.Char},System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Char" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.Char" /> value to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.DateTime,System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes a <see cref="T:System.DateTime" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTime" /> value to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.DateTime},System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" /> value to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.DateTimeOffset,System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes a <see cref="T:System.DateTimeOffset" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTimeOffset" /> value to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" /> value to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Decimal,System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes a <see cref="T:System.Decimal" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Decimal" /> value to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.Decimal},System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" /> value to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Double,System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes a <see cref="T:System.Double" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Double" /> value to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.Double},System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" /> value to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Single,System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes a <see cref="T:System.Single" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Single" /> value to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.Single},System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Single" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.Single" /> value to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Guid,System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes a <see cref="T:System.Guid" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Guid" /> value to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.Guid},System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Guid" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.Guid" /> value to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Int32,System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes a <see cref="T:System.Int32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int32" /> value to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" /> value to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Int64,System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes a <see cref="T:System.Int64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int64" /> value to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int64" /> value to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Object,System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes a <see cref="T:System.Object" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Object" /> value to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.SByte,System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes a <see cref="T:System.SByte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.SByte" /> value to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.SByte},System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.SByte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.SByte" /> value to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Int16,System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes a <see cref="T:System.Int16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int16" /> value to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.Int16},System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int16" /> value to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.String,System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes a <see cref="T:System.String" /> value.
            </summary>
      <param name="value">The <see cref="T:System.String" /> value to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.TimeSpan,System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes a <see cref="T:System.TimeSpan" /> value.
            </summary>
      <param name="value">The <see cref="T:System.TimeSpan" /> value to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.TimeSpan},System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.TimeSpan" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.TimeSpan" /> value to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.UInt32,System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes a <see cref="T:System.UInt32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt32" /> value to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.UInt32},System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt32" /> value to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.UInt64,System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes a <see cref="T:System.UInt64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt64" /> value to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.UInt64},System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt64" /> value to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Uri,System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes a <see cref="T:System.Uri" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Uri" /> value to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.UInt16,System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes a <see cref="T:System.UInt16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt16" /> value to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueAsync(System.Nullable{System.UInt16},System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt16" /> value to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteCommentAsync(System.String,System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes a comment <c>/*...*/</c> containing the specified text.
            </summary>
      <param name="text">Text to place inside the comment.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteEndArrayAsync(System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes the end of an array.
            </summary>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteEndConstructorAsync(System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes the end of a constructor.
            </summary>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteEndObjectAsync(System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes the end of a JSON object.
            </summary>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteRawValueAsync(System.String,System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes raw JSON where a value is expected and updates the writer's state.
            </summary>
      <param name="json">The raw JSON to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>Derived classes must override this method to get asynchronous behaviour. Otherwise it will
            execute synchronously, returning an already-completed task.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.#ctor(System.IO.TextWriter)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonTextWriter" /> class using the specified <see cref="T:System.IO.TextWriter" />.
            </summary>
      <param name="textWriter">The <see cref="T:System.IO.TextWriter" /> to write to.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.Flush">
      <summary>
            Flushes whatever is in the buffer to the underlying <see cref="T:System.IO.TextWriter" /> and also flushes the underlying <see cref="T:System.IO.TextWriter" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.Close">
      <summary>
            Closes this writer.
            If <see cref="P:Newtonsoft.Json.JsonWriter.CloseOutput" /> is set to <c>true</c>, the underlying <see cref="T:System.IO.TextWriter" /> is also closed.
            If <see cref="P:Newtonsoft.Json.JsonWriter.AutoCompleteOnClose" /> is set to <c>true</c>, the JSON is auto-completed.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteStartObject">
      <summary>
            Writes the beginning of a JSON object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteStartArray">
      <summary>
            Writes the beginning of a JSON array.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteStartConstructor(System.String)">
      <summary>
            Writes the start of a constructor with the given name.
            </summary>
      <param name="name">The name of the constructor.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteEnd(Newtonsoft.Json.JsonToken)">
      <summary>
            Writes the specified end token.
            </summary>
      <param name="token">The end token to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WritePropertyName(System.String)">
      <summary>
            Writes the property name of a name/value pair on a JSON object.
            </summary>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WritePropertyName(System.String,System.Boolean)">
      <summary>
            Writes the property name of a name/value pair on a JSON object.
            </summary>
      <param name="name">The name of the property.</param>
      <param name="escape">A flag to indicate whether the text should be escaped when it is written as a JSON property name.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteIndent">
      <summary>
            Writes indent characters.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueDelimiter">
      <summary>
            Writes the JSON value delimiter.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteIndentSpace">
      <summary>
            Writes an indent space.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Object)">
      <summary>
            Writes a <see cref="T:System.Object" /> value.
            An error will raised if the value cannot be written as a single JSON token.
            </summary>
      <param name="value">The <see cref="T:System.Object" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteNull">
      <summary>
            Writes a null value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteUndefined">
      <summary>
            Writes an undefined value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteRaw(System.String)">
      <summary>
            Writes raw JSON.
            </summary>
      <param name="json">The raw JSON to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.String)">
      <summary>
            Writes a <see cref="T:System.String" /> value.
            </summary>
      <param name="value">The <see cref="T:System.String" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Int32)">
      <summary>
            Writes a <see cref="T:System.Int32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int32" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.UInt32)">
      <summary>
            Writes a <see cref="T:System.UInt32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt32" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Int64)">
      <summary>
            Writes a <see cref="T:System.Int64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int64" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.UInt64)">
      <summary>
            Writes a <see cref="T:System.UInt64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt64" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Single)">
      <summary>
            Writes a <see cref="T:System.Single" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Single" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Nullable{System.Single})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Single" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.Single" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Double)">
      <summary>
            Writes a <see cref="T:System.Double" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Double" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Nullable{System.Double})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Boolean)">
      <summary>
            Writes a <see cref="T:System.Boolean" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Boolean" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Int16)">
      <summary>
            Writes a <see cref="T:System.Int16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int16" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.UInt16)">
      <summary>
            Writes a <see cref="T:System.UInt16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt16" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Char)">
      <summary>
            Writes a <see cref="T:System.Char" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Char" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Byte)">
      <summary>
            Writes a <see cref="T:System.Byte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Byte" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.SByte)">
      <summary>
            Writes a <see cref="T:System.SByte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.SByte" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Decimal)">
      <summary>
            Writes a <see cref="T:System.Decimal" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Decimal" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.DateTime)">
      <summary>
            Writes a <see cref="T:System.DateTime" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTime" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Byte[])">
      <summary>
            Writes a <see cref="T:System.Byte" />[] value.
            </summary>
      <param name="value">The <see cref="T:System.Byte" />[] value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.DateTimeOffset)">
      <summary>
            Writes a <see cref="T:System.DateTimeOffset" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTimeOffset" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Guid)">
      <summary>
            Writes a <see cref="T:System.Guid" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Guid" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.TimeSpan)">
      <summary>
            Writes a <see cref="T:System.TimeSpan" /> value.
            </summary>
      <param name="value">The <see cref="T:System.TimeSpan" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Uri)">
      <summary>
            Writes a <see cref="T:System.Uri" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Uri" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteComment(System.String)">
      <summary>
            Writes a comment <c>/*...*/</c> containing the specified text. 
            </summary>
      <param name="text">Text to place inside the comment.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteWhitespace(System.String)">
      <summary>
            Writes the given white space.
            </summary>
      <param name="ws">The string of white space characters.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonTextWriter.ArrayPool">
      <summary>
            Gets or sets the writer's character array pool.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonTextWriter.Indentation">
      <summary>
            Gets or sets how many <see cref="P:Newtonsoft.Json.JsonTextWriter.IndentChar" />s to write for each level in the hierarchy when <see cref="P:Newtonsoft.Json.JsonWriter.Formatting" /> is set to <see cref="F:Newtonsoft.Json.Formatting.Indented" />.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonTextWriter.QuoteChar">
      <summary>
            Gets or sets which character to use to quote attribute values.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonTextWriter.IndentChar">
      <summary>
            Gets or sets which character to use for indenting when <see cref="P:Newtonsoft.Json.JsonWriter.Formatting" /> is set to <see cref="F:Newtonsoft.Json.Formatting.Indented" />.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonTextWriter.QuoteName">
      <summary>
            Gets or sets a value indicating whether object names will be surrounded with quotes.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonToken">
      <summary>
            Specifies the type of JSON token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.None">
      <summary>
            This is returned by the <see cref="T:Newtonsoft.Json.JsonReader" /> if a read method has not been called.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.StartObject">
      <summary>
            An object start token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.StartArray">
      <summary>
            An array start token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.StartConstructor">
      <summary>
            A constructor start token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.PropertyName">
      <summary>
            An object property name.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Comment">
      <summary>
            A comment.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Raw">
      <summary>
            Raw JSON.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Integer">
      <summary>
            An integer.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Float">
      <summary>
            A float.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.String">
      <summary>
            A string.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Boolean">
      <summary>
            A boolean.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Null">
      <summary>
            A null token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Undefined">
      <summary>
            An undefined token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.EndObject">
      <summary>
            An object end token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.EndArray">
      <summary>
            An array end token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.EndConstructor">
      <summary>
            A constructor end token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Date">
      <summary>
            A Date.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Bytes">
      <summary>
            Byte data.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonValidatingReader">
      <summary>
        <para>
            Represents a reader that provides <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> validation.
            </para>
        <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
      </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonValidatingReader.#ctor(Newtonsoft.Json.JsonReader)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonValidatingReader" /> class that
            validates the content returned from the given <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from while validating.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonValidatingReader.Close">
      <summary>
            Changes the reader's state to <see cref="F:Newtonsoft.Json.JsonReader.State.Closed" />.
            If <see cref="P:Newtonsoft.Json.JsonReader.CloseInput" /> is set to <c>true</c>, the underlying <see cref="T:Newtonsoft.Json.JsonReader" /> is also closed.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsInt32">
      <summary>
            Reads the next JSON token from the underlying <see cref="T:Newtonsoft.Json.JsonReader" /> as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsBytes">
      <summary>
            Reads the next JSON token from the underlying <see cref="T:Newtonsoft.Json.JsonReader" /> as a <see cref="T:System.Byte" />[].
            </summary>
      <returns>
            A <see cref="T:System.Byte" />[] or <c>null</c> if the next JSON token is null.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsDecimal">
      <summary>
            Reads the next JSON token from the underlying <see cref="T:Newtonsoft.Json.JsonReader" /> as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsDouble">
      <summary>
            Reads the next JSON token from the underlying <see cref="T:Newtonsoft.Json.JsonReader" /> as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsBoolean">
      <summary>
            Reads the next JSON token from the underlying <see cref="T:Newtonsoft.Json.JsonReader" /> as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsString">
      <summary>
            Reads the next JSON token from the underlying <see cref="T:Newtonsoft.Json.JsonReader" /> as a <see cref="T:System.String" />.
            </summary>
      <returns>A <see cref="T:System.String" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsDateTime">
      <summary>
            Reads the next JSON token from the underlying <see cref="T:Newtonsoft.Json.JsonReader" /> as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsDateTimeOffset">
      <summary>
            Reads the next JSON token from the underlying <see cref="T:Newtonsoft.Json.JsonReader" /> as a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonValidatingReader.Read">
      <summary>
            Reads the next JSON token from the underlying <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
      <returns>
        <c>true</c> if the next token was read successfully; <c>false</c> if there are no more tokens to read.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.Value">
      <summary>
            Gets the text value of the current JSON token.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.Depth">
      <summary>
            Gets the depth of the current token in the JSON document.
            </summary>
      <value>The depth of the current token in the JSON document.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.Path">
      <summary>
            Gets the path of the current JSON token. 
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.QuoteChar">
      <summary>
            Gets the quotation mark character used to enclose the value of a string.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.TokenType">
      <summary>
            Gets the type of the current JSON token.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.ValueType">
      <summary>
            Gets the .NET type for the current JSON token.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.Schema">
      <summary>
            Gets or sets the schema.
            </summary>
      <value>The schema.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.Reader">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.JsonReader" /> used to construct this <see cref="T:Newtonsoft.Json.JsonValidatingReader" />.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.JsonReader" /> specified in the constructor.</value>
    </member>
    <member name="E:Newtonsoft.Json.JsonValidatingReader.ValidationEventHandler">
      <summary>
            Sets an event handler for receiving schema validation errors.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonWriter">
      <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating JSON data.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.CloseAsync(System.Threading.CancellationToken)">
      <summary>
            Asynchronously closes this writer.
            If <see cref="P:Newtonsoft.Json.JsonWriter.CloseOutput" /> is set to <c>true</c>, the destination is also closed.
            </summary>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.FlushAsync(System.Threading.CancellationToken)">
      <summary>
            Asynchronously flushes whatever is in the buffer to the destination and also flushes the destination.
            </summary>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteEndAsync(Newtonsoft.Json.JsonToken,System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes the specified end token.
            </summary>
      <param name="token">The end token to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteIndentAsync(System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes indent characters.
            </summary>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValueDelimiterAsync(System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes the JSON value delimiter.
            </summary>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteIndentSpaceAsync(System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes an indent space.
            </summary>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteRawAsync(System.String,System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes raw JSON without changing the writer's state.
            </summary>
      <param name="json">The raw JSON to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteEndAsync(System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes the end of the current JSON object or array.
            </summary>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteEndArrayAsync(System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes the end of an array.
            </summary>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteEndConstructorAsync(System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes the end of a constructor.
            </summary>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteEndObjectAsync(System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes the end of a JSON object.
            </summary>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteNullAsync(System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes a null value.
            </summary>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WritePropertyNameAsync(System.String,System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes the property name of a name/value pair of a JSON object.
            </summary>
      <param name="name">The name of the property.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WritePropertyNameAsync(System.String,System.Boolean,System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes the property name of a name/value pair of a JSON object.
            </summary>
      <param name="name">The name of the property.</param>
      <param name="escape">A flag to indicate whether the text should be escaped when it is written as a JSON property name.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteStartArrayAsync(System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes the beginning of a JSON array.
            </summary>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteCommentAsync(System.String,System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes a comment <c>/*...*/</c> containing the specified text.
            </summary>
      <param name="text">Text to place inside the comment.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteRawValueAsync(System.String,System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes raw JSON where a value is expected and updates the writer's state.
            </summary>
      <param name="json">The raw JSON to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteStartConstructorAsync(System.String,System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes the start of a constructor with the given name.
            </summary>
      <param name="name">The name of the constructor.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteStartObjectAsync(System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes the beginning of a JSON object.
            </summary>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteTokenAsync(Newtonsoft.Json.JsonReader,System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes the current <see cref="T:Newtonsoft.Json.JsonReader" /> token.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read the token from.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteTokenAsync(Newtonsoft.Json.JsonReader,System.Boolean,System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes the current <see cref="T:Newtonsoft.Json.JsonReader" /> token.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read the token from.</param>
      <param name="writeChildren">A flag indicating whether the current token's children should be written.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteTokenAsync(Newtonsoft.Json.JsonToken,System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes the <see cref="T:Newtonsoft.Json.JsonToken" /> token and its value.
            </summary>
      <param name="token">The <see cref="T:Newtonsoft.Json.JsonToken" /> to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteTokenAsync(Newtonsoft.Json.JsonToken,System.Object,System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes the <see cref="T:Newtonsoft.Json.JsonToken" /> token and its value.
            </summary>
      <param name="token">The <see cref="T:Newtonsoft.Json.JsonToken" /> to write.</param>
      <param name="value">
            The value to write.
            A value is only required for tokens that have an associated value, e.g. the <see cref="T:System.String" /> property name for <see cref="F:Newtonsoft.Json.JsonToken.PropertyName" />.
            <c>null</c> can be passed to the method for tokens that don't have a value, e.g. <see cref="F:Newtonsoft.Json.JsonToken.StartObject" />.
            </param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Boolean,System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" /> value to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.Boolean},System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes a <see cref="T:System.Boolean" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Boolean" /> value to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Byte,System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes a <see cref="T:System.Byte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Byte" /> value to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.Byte},System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Byte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.Byte" /> value to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Byte[],System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes a <see cref="T:System.Byte" />[] value.
            </summary>
      <param name="value">The <see cref="T:System.Byte" />[] value to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Char,System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes a <see cref="T:System.Char" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Char" /> value to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.Char},System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Char" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.Char" /> value to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.DateTime,System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes a <see cref="T:System.DateTime" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTime" /> value to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.DateTime},System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" /> value to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.DateTimeOffset,System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes a <see cref="T:System.DateTimeOffset" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTimeOffset" /> value to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" /> value to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Decimal,System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes a <see cref="T:System.Decimal" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Decimal" /> value to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.Decimal},System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" /> value to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Double,System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes a <see cref="T:System.Double" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Double" /> value to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.Double},System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" /> value to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Single,System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes a <see cref="T:System.Single" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Single" /> value to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.Single},System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Single" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.Single" /> value to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Guid,System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes a <see cref="T:System.Guid" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Guid" /> value to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.Guid},System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Guid" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.Guid" /> value to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Int32,System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes a <see cref="T:System.Int32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int32" /> value to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.Int32},System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" /> value to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Int64,System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes a <see cref="T:System.Int64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int64" /> value to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.Int64},System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int64" /> value to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Object,System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes a <see cref="T:System.Object" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Object" /> value to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.SByte,System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes a <see cref="T:System.SByte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.SByte" /> value to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.SByte},System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.SByte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.SByte" /> value to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Int16,System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes a <see cref="T:System.Int16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int16" /> value to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.Int16},System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int16" /> value to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.String,System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes a <see cref="T:System.String" /> value.
            </summary>
      <param name="value">The <see cref="T:System.String" /> value to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.TimeSpan,System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes a <see cref="T:System.TimeSpan" /> value.
            </summary>
      <param name="value">The <see cref="T:System.TimeSpan" /> value to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.TimeSpan},System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.TimeSpan" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.TimeSpan" /> value to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.UInt32,System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes a <see cref="T:System.UInt32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt32" /> value to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.UInt32},System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt32" /> value to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.UInt64,System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes a <see cref="T:System.UInt64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt64" /> value to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.UInt64},System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt64" /> value to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Uri,System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes a <see cref="T:System.Uri" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Uri" /> value to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.UInt16,System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes a <see cref="T:System.UInt16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt16" /> value to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValueAsync(System.Nullable{System.UInt16},System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt16" /> value to write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteUndefinedAsync(System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes an undefined value.
            </summary>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteWhitespaceAsync(System.String,System.Threading.CancellationToken)">
      <summary>
            Asynchronously writes the given white space.
            </summary>
      <param name="ws">The string of white space characters.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.SetWriteStateAsync(Newtonsoft.Json.JsonToken,System.Object,System.Threading.CancellationToken)">
      <summary>
            Asynchronously ets the state of the <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
      <param name="token">The <see cref="T:Newtonsoft.Json.JsonToken" /> being written.</param>
      <param name="value">The value being written.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous operation.</returns>
      <remarks>The default behaviour is to execute synchronously, returning an already-completed task. Derived
            classes can override this behaviour for true asynchronicity.</remarks>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonWriter" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.Flush">
      <summary>
            Flushes whatever is in the buffer to the destination and also flushes the destination.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.Close">
      <summary>
            Closes this writer.
            If <see cref="P:Newtonsoft.Json.JsonWriter.CloseOutput" /> is set to <c>true</c>, the destination is also closed.
            If <see cref="P:Newtonsoft.Json.JsonWriter.AutoCompleteOnClose" /> is set to <c>true</c>, the JSON is auto-completed.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteStartObject">
      <summary>
            Writes the beginning of a JSON object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteEndObject">
      <summary>
            Writes the end of a JSON object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteStartArray">
      <summary>
            Writes the beginning of a JSON array.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteEndArray">
      <summary>
            Writes the end of an array.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteStartConstructor(System.String)">
      <summary>
            Writes the start of a constructor with the given name.
            </summary>
      <param name="name">The name of the constructor.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteEndConstructor">
      <summary>
            Writes the end constructor.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WritePropertyName(System.String)">
      <summary>
            Writes the property name of a name/value pair of a JSON object.
            </summary>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WritePropertyName(System.String,System.Boolean)">
      <summary>
            Writes the property name of a name/value pair of a JSON object.
            </summary>
      <param name="name">The name of the property.</param>
      <param name="escape">A flag to indicate whether the text should be escaped when it is written as a JSON property name.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteEnd">
      <summary>
            Writes the end of the current JSON object or array.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteToken(Newtonsoft.Json.JsonReader)">
      <summary>
            Writes the current <see cref="T:Newtonsoft.Json.JsonReader" /> token and its children.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read the token from.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteToken(Newtonsoft.Json.JsonReader,System.Boolean)">
      <summary>
            Writes the current <see cref="T:Newtonsoft.Json.JsonReader" /> token.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read the token from.</param>
      <param name="writeChildren">A flag indicating whether the current token's children should be written.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteToken(Newtonsoft.Json.JsonToken,System.Object)">
      <summary>
            Writes the <see cref="T:Newtonsoft.Json.JsonToken" /> token and its value.
            </summary>
      <param name="token">The <see cref="T:Newtonsoft.Json.JsonToken" /> to write.</param>
      <param name="value">
            The value to write.
            A value is only required for tokens that have an associated value, e.g. the <see cref="T:System.String" /> property name for <see cref="F:Newtonsoft.Json.JsonToken.PropertyName" />.
            <c>null</c> can be passed to the method for tokens that don't have a value, e.g. <see cref="F:Newtonsoft.Json.JsonToken.StartObject" />.
            </param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteToken(Newtonsoft.Json.JsonToken)">
      <summary>
            Writes the <see cref="T:Newtonsoft.Json.JsonToken" /> token.
            </summary>
      <param name="token">The <see cref="T:Newtonsoft.Json.JsonToken" /> to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteEnd(Newtonsoft.Json.JsonToken)">
      <summary>
            Writes the specified end token.
            </summary>
      <param name="token">The end token to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteIndent">
      <summary>
            Writes indent characters.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValueDelimiter">
      <summary>
            Writes the JSON value delimiter.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteIndentSpace">
      <summary>
            Writes an indent space.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteNull">
      <summary>
            Writes a null value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteUndefined">
      <summary>
            Writes an undefined value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteRaw(System.String)">
      <summary>
            Writes raw JSON without changing the writer's state.
            </summary>
      <param name="json">The raw JSON to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteRawValue(System.String)">
      <summary>
            Writes raw JSON where a value is expected and updates the writer's state.
            </summary>
      <param name="json">The raw JSON to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.String)">
      <summary>
            Writes a <see cref="T:System.String" /> value.
            </summary>
      <param name="value">The <see cref="T:System.String" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Int32)">
      <summary>
            Writes a <see cref="T:System.Int32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int32" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.UInt32)">
      <summary>
            Writes a <see cref="T:System.UInt32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt32" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Int64)">
      <summary>
            Writes a <see cref="T:System.Int64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int64" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.UInt64)">
      <summary>
            Writes a <see cref="T:System.UInt64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt64" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Single)">
      <summary>
            Writes a <see cref="T:System.Single" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Single" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Double)">
      <summary>
            Writes a <see cref="T:System.Double" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Double" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Boolean)">
      <summary>
            Writes a <see cref="T:System.Boolean" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Boolean" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Int16)">
      <summary>
            Writes a <see cref="T:System.Int16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int16" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.UInt16)">
      <summary>
            Writes a <see cref="T:System.UInt16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt16" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Char)">
      <summary>
            Writes a <see cref="T:System.Char" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Char" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Byte)">
      <summary>
            Writes a <see cref="T:System.Byte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Byte" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.SByte)">
      <summary>
            Writes a <see cref="T:System.SByte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.SByte" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Decimal)">
      <summary>
            Writes a <see cref="T:System.Decimal" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Decimal" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.DateTime)">
      <summary>
            Writes a <see cref="T:System.DateTime" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTime" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.DateTimeOffset)">
      <summary>
            Writes a <see cref="T:System.DateTimeOffset" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTimeOffset" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Guid)">
      <summary>
            Writes a <see cref="T:System.Guid" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Guid" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.TimeSpan)">
      <summary>
            Writes a <see cref="T:System.TimeSpan" /> value.
            </summary>
      <param name="value">The <see cref="T:System.TimeSpan" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Int32})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.UInt32})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt32" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Int64})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int64" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.UInt64})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt64" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Single})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Single" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.Single" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Double})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Boolean})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Int16})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int16" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.UInt16})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt16" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Char})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Char" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.Char" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Byte})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Byte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.Byte" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.SByte})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.SByte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.SByte" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Decimal})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.DateTime})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.DateTimeOffset})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Guid})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Guid" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.Guid" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.TimeSpan})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> of <see cref="T:System.TimeSpan" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> of <see cref="T:System.TimeSpan" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Byte[])">
      <summary>
            Writes a <see cref="T:System.Byte" />[] value.
            </summary>
      <param name="value">The <see cref="T:System.Byte" />[] value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Uri)">
      <summary>
            Writes a <see cref="T:System.Uri" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Uri" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Object)">
      <summary>
            Writes a <see cref="T:System.Object" /> value.
            An error will raised if the value cannot be written as a single JSON token.
            </summary>
      <param name="value">The <see cref="T:System.Object" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteComment(System.String)">
      <summary>
            Writes a comment <c>/*...*/</c> containing the specified text.
            </summary>
      <param name="text">Text to place inside the comment.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteWhitespace(System.String)">
      <summary>
            Writes the given white space.
            </summary>
      <param name="ws">The string of white space characters.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.Dispose(System.Boolean)">
      <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.SetWriteState(Newtonsoft.Json.JsonToken,System.Object)">
      <summary>
            Sets the state of the <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
      <param name="token">The <see cref="T:Newtonsoft.Json.JsonToken" /> being written.</param>
      <param name="value">The value being written.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.CloseOutput">
      <summary>
            Gets or sets a value indicating whether the destination should be closed when this writer is closed.
            </summary>
      <value>
        <c>true</c> to close the destination when this writer is closed; otherwise <c>false</c>. The default is <c>true</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.AutoCompleteOnClose">
      <summary>
            Gets or sets a value indicating whether the JSON should be auto-completed when this writer is closed.
            </summary>
      <value>
        <c>true</c> to auto-complete the JSON when this writer is closed; otherwise <c>false</c>. The default is <c>true</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.Top">
      <summary>
            Gets the top.
            </summary>
      <value>The top.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.WriteState">
      <summary>
            Gets the state of the writer.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.Path">
      <summary>
            Gets the path of the writer. 
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.Formatting">
      <summary>
            Gets or sets a value indicating how JSON text output should be formatted.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.DateFormatHandling">
      <summary>
            Gets or sets how dates are written to JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.DateTimeZoneHandling">
      <summary>
            Gets or sets how <see cref="T:System.DateTime" /> time zones are handled when writing JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.StringEscapeHandling">
      <summary>
            Gets or sets how strings are escaped when writing JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.FloatFormatHandling">
      <summary>
            Gets or sets how special floating point numbers, e.g. <see cref="F:System.Double.NaN" />,
            <see cref="F:System.Double.PositiveInfinity" /> and <see cref="F:System.Double.NegativeInfinity" />,
            are written to JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.DateFormatString">
      <summary>
            Gets or sets how <see cref="T:System.DateTime" /> and <see cref="T:System.DateTimeOffset" /> values are formatted when writing JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.Culture">
      <summary>
            Gets or sets the culture used when writing JSON. Defaults to <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonWriterException">
      <summary>
            The exception thrown when an error occurs while writing JSON text.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriterException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonWriterException" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriterException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonWriterException" /> class
            with a specified error message.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriterException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonWriterException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or <c>null</c> if no inner exception is specified.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonWriterException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is <c>null</c>.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is <c>null</c> or <see cref="P:System.Exception.HResult" /> is zero (0).</exception>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriterException.#ctor(System.String,System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonWriterException" /> class
            with a specified error message, JSON path and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="path">The path to the JSON where the error occurred.</param>
      <param name="innerException">The exception that is the cause of the current exception, or <c>null</c> if no inner exception is specified.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriterException.Path">
      <summary>
            Gets the path to the JSON where the error occurred.
            </summary>
      <value>The path to the JSON where the error occurred.</value>
    </member>
    <member name="T:Newtonsoft.Json.MemberSerialization">
      <summary>
            Specifies the member serialization options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.MemberSerialization.OptOut">
      <summary>
            All public members are serialized by default. Members can be excluded using <see cref="T:Newtonsoft.Json.JsonIgnoreAttribute" /> or <see cref="T:System.NonSerializedAttribute" />.
            This is the default member serialization mode.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.MemberSerialization.OptIn">
      <summary>
            Only members marked with <see cref="T:Newtonsoft.Json.JsonPropertyAttribute" /> or <see cref="T:System.Runtime.Serialization.DataMemberAttribute" /> are serialized.
            This member serialization mode can also be set by marking the class with <see cref="T:System.Runtime.Serialization.DataContractAttribute" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.MemberSerialization.Fields">
      <summary>
            All public and private fields are serialized. Members can be excluded using <see cref="T:Newtonsoft.Json.JsonIgnoreAttribute" /> or <see cref="T:System.NonSerializedAttribute" />.
            This member serialization mode can also be set by marking the class with <see cref="T:System.SerializableAttribute" />
            and setting IgnoreSerializableAttribute on <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver" /> to <c>false</c>.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.MetadataPropertyHandling">
      <summary>
            Specifies metadata property handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.MetadataPropertyHandling.Default">
      <summary>
            Read metadata properties located at the start of a JSON object.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.MetadataPropertyHandling.ReadAhead">
      <summary>
            Read metadata properties located anywhere in a JSON object. Note that this setting will impact performance.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.MetadataPropertyHandling.Ignore">
      <summary>
            Do not try to read metadata properties.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.MissingMemberHandling">
      <summary>
            Specifies missing member handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.MissingMemberHandling.Ignore">
      <summary>
            Ignore a missing member and do not attempt to deserialize it.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.MissingMemberHandling.Error">
      <summary>
            Throw a <see cref="T:Newtonsoft.Json.JsonSerializationException" /> when a missing member is encountered during deserialization.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.NullValueHandling">
      <summary>
            Specifies null value handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
      <example>
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeNullValueHandlingObject" title="NullValueHandling Class" />
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeNullValueHandlingExample" title="NullValueHandling Ignore Example" />
      </example>
    </member>
    <member name="F:Newtonsoft.Json.NullValueHandling.Include">
      <summary>
            Include null values when serializing and deserializing objects.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.NullValueHandling.Ignore">
      <summary>
            Ignore null values when serializing and deserializing objects.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.ObjectCreationHandling">
      <summary>
            Specifies how object creation is handled by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.ObjectCreationHandling.Auto">
      <summary>
            Reuse existing objects, create new objects when needed.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.ObjectCreationHandling.Reuse">
      <summary>
            Only reuse existing objects.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.ObjectCreationHandling.Replace">
      <summary>
            Always create new objects.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.PreserveReferencesHandling">
      <summary>
            Specifies reference handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            Note that references cannot be preserved when a value is set via a non-default constructor such as types that implement <see cref="T:System.Runtime.Serialization.ISerializable" />.
            </summary>
      <example>
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="PreservingObjectReferencesOn" title="Preserve Object References" />
      </example>
    </member>
    <member name="F:Newtonsoft.Json.PreserveReferencesHandling.None">
      <summary>
            Do not preserve references when serializing types.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.PreserveReferencesHandling.Objects">
      <summary>
            Preserve references when serializing into a JSON object structure.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.PreserveReferencesHandling.Arrays">
      <summary>
            Preserve references when serializing into a JSON array structure.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.PreserveReferencesHandling.All">
      <summary>
            Preserve references when serializing.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.ReferenceLoopHandling">
      <summary>
            Specifies reference loop handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.ReferenceLoopHandling.Error">
      <summary>
            Throw a <see cref="T:Newtonsoft.Json.JsonSerializationException" /> when a loop is encountered.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.ReferenceLoopHandling.Ignore">
      <summary>
            Ignore loop references and do not serialize.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.ReferenceLoopHandling.Serialize">
      <summary>
            Serialize loop references.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Required">
      <summary>
            Indicating whether a property is required.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Required.Default">
      <summary>
            The property is not required. The default state.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Required.AllowNull">
      <summary>
            The property must be defined in JSON but can be a null value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Required.Always">
      <summary>
            The property must be defined in JSON and cannot be a null value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Required.DisallowNull">
      <summary>
            The property is not required but it cannot be a null value.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.StringEscapeHandling">
      <summary>
            Specifies how strings are escaped when writing JSON text.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.StringEscapeHandling.Default">
      <summary>
            Only control characters (e.g. newline) are escaped.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.StringEscapeHandling.EscapeNonAscii">
      <summary>
            All non-ASCII and control characters (e.g. newline) are escaped.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.StringEscapeHandling.EscapeHtml">
      <summary>
            HTML (&lt;, &gt;, &amp;, ', ") and control characters (e.g. newline) are escaped.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.TypeNameAssemblyFormatHandling">
      <summary>
            Indicates the method that will be used during deserialization for locating and loading assemblies.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.TypeNameAssemblyFormatHandling.Simple">
      <summary>
            In simple mode, the assembly used during deserialization need not match exactly the assembly used during serialization. Specifically, the version numbers need not match as the <c>LoadWithPartialName</c> method of the <see cref="T:System.Reflection.Assembly" /> class is used to load the assembly.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.TypeNameAssemblyFormatHandling.Full">
      <summary>
            In full mode, the assembly used during deserialization must match exactly the assembly used during serialization. The <c>Load</c> method of the <see cref="T:System.Reflection.Assembly" /> class is used to load the assembly.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.TypeNameHandling">
      <summary>
            Specifies type name handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
      <remarks>
        <see cref="P:Newtonsoft.Json.JsonSerializer.TypeNameHandling" /> should be used with caution when your application deserializes JSON from an external source.
            Incoming types should be validated with a custom <see cref="P:Newtonsoft.Json.JsonSerializer.SerializationBinder" />
            when deserializing with a value other than <see cref="F:Newtonsoft.Json.TypeNameHandling.None" />.
            </remarks>
    </member>
    <member name="F:Newtonsoft.Json.TypeNameHandling.None">
      <summary>
            Do not include the .NET type name when serializing types.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.TypeNameHandling.Objects">
      <summary>
            Include the .NET type name when serializing into a JSON object structure.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.TypeNameHandling.Arrays">
      <summary>
            Include the .NET type name when serializing into a JSON array structure.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.TypeNameHandling.All">
      <summary>
            Always include the .NET type name when serializing.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.TypeNameHandling.Auto">
      <summary>
            Include the .NET type name when the type of the object being serialized is not the same as its declared type.
            Note that this doesn't include the root serialized object by default. To include the root object's type name in JSON
            you must specify a root type object with <see cref="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,System.Type,Newtonsoft.Json.JsonSerializerSettings)" />
            or <see cref="M:Newtonsoft.Json.JsonSerializer.Serialize(Newtonsoft.Json.JsonWriter,System.Object,System.Type)" />.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.WriteState">
      <summary>
            Specifies the state of the <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.WriteState.Error">
      <summary>
            An exception has been thrown, which has left the <see cref="T:Newtonsoft.Json.JsonWriter" /> in an invalid state.
            You may call the <see cref="M:Newtonsoft.Json.JsonWriter.Close" /> method to put the <see cref="T:Newtonsoft.Json.JsonWriter" /> in the <c>Closed</c> state.
            Any other <see cref="T:Newtonsoft.Json.JsonWriter" /> method calls result in an <see cref="T:System.InvalidOperationException" /> being thrown.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.WriteState.Closed">
      <summary>
            The <see cref="M:Newtonsoft.Json.JsonWriter.Close" /> method has been called.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.WriteState.Object">
      <summary>
            An object is being written. 
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.WriteState.Array">
      <summary>
            An array is being written.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.WriteState.Constructor">
      <summary>
            A constructor is being written.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.WriteState.Property">
      <summary>
            A property is being written.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.WriteState.Start">
      <summary>
            A <see cref="T:Newtonsoft.Json.JsonWriter" /> write method has not been called.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
      <summary>
            Determines whether the collection is <c>null</c> or empty.
            </summary>
      <param name="collection">The collection.</param>
      <returns>
        <c>true</c> if the collection is <c>null</c> or empty; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.CollectionUtils.AddRange``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Adds the elements of the specified collection to the specified generic <see cref="T:System.Collections.Generic.IList`1" />.
            </summary>
      <param name="initial">The list to add to.</param>
      <param name="collection">The collection of elements to add.</param>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ConvertUtils.ConvertOrCast(System.Object,System.Globalization.CultureInfo,System.Type)">
      <summary>
            Converts the value to the specified type. If the value is unable to be converted, the
            value is checked whether it assignable to the specified type.
            </summary>
      <param name="initialValue">The value to convert.</param>
      <param name="culture">The culture to use when converting.</param>
      <param name="targetType">The type to convert or cast the value to.</param>
      <returns>
            The converted type. If conversion was unsuccessful, the initial value
            is returned if assignable to the target type.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1.CallMethodWithResult(System.String,System.Dynamic.DynamicMetaObjectBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},Newtonsoft.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback,Newtonsoft.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback)">
      <summary>
            Helper method for generating a MetaObject which calls a
            specific method on Dynamic that returns a result
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1.CallMethodReturnLast(System.String,System.Dynamic.DynamicMetaObjectBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},Newtonsoft.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback)">
      <summary>
            Helper method for generating a MetaObject which calls a
            specific method on Dynamic, but uses one of the arguments for
            the result.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1.CallMethodNoResult(System.String,System.Dynamic.DynamicMetaObjectBinder,System.Linq.Expressions.Expression[],Newtonsoft.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback)">
      <summary>
            Helper method for generating a MetaObject which calls a
            specific method on Dynamic, but uses one of the arguments for
            the result.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1.GetRestrictions">
      <summary>
            Returns a Restrictions object which includes our current restrictions merged
            with a restriction limiting our type
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Utilities.ImmutableCollectionsUtils">
      <summary>
            Helper class for serializing immutable collections.
            Note that this is used by all builds, even those that don't support immutable collections, in case the DLL is GACed
            https://github.com/JamesNK/Newtonsoft.Json/issues/652
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.GetCollectionItemType(System.Type)">
      <summary>
            Gets the type of the typed collection's items.
            </summary>
      <param name="type">The type.</param>
      <returns>The type of the typed collection's items.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberUnderlyingType(System.Reflection.MemberInfo)">
      <summary>
            Gets the member's underlying type.
            </summary>
      <param name="member">The member.</param>
      <returns>The underlying type of the member.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.IsIndexedProperty(System.Reflection.MemberInfo)">
      <summary>
            Determines whether the member is an indexed property.
            </summary>
      <param name="member">The member.</param>
      <returns>
        <c>true</c> if the member is an indexed property; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.IsIndexedProperty(System.Reflection.PropertyInfo)">
      <summary>
            Determines whether the property is an indexed property.
            </summary>
      <param name="property">The property.</param>
      <returns>
        <c>true</c> if the property is an indexed property; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberValue(System.Reflection.MemberInfo,System.Object)">
      <summary>
            Gets the member's value on the object.
            </summary>
      <param name="member">The member.</param>
      <param name="target">The target object.</param>
      <returns>The member's value on the object.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.SetMemberValue(System.Reflection.MemberInfo,System.Object,System.Object)">
      <summary>
            Sets the member's value on the target object.
            </summary>
      <param name="member">The member.</param>
      <param name="target">The target.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.CanReadMemberValue(System.Reflection.MemberInfo,System.Boolean)">
      <summary>
            Determines whether the specified MemberInfo can be read.
            </summary>
      <param name="member">The MemberInfo to determine whether can be read.</param>
            /// <param name="nonPublic">if set to <c>true</c> then allow the member to be gotten non-publicly.</param><returns><c>true</c> if the specified MemberInfo can be read; otherwise, <c>false</c>.
            </returns></member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.CanSetMemberValue(System.Reflection.MemberInfo,System.Boolean,System.Boolean)">
      <summary>
            Determines whether the specified MemberInfo can be set.
            </summary>
      <param name="member">The MemberInfo to determine whether can be set.</param>
      <param name="nonPublic">if set to <c>true</c> then allow the member to be set non-publicly.</param>
      <param name="canSetReadOnly">if set to <c>true</c> then allow the member to be set if read-only.</param>
      <returns>
        <c>true</c> if the specified MemberInfo can be set; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Utilities.StringBuffer">
      <summary>
            Builds a string. Unlike <see cref="T:System.Text.StringBuilder" /> this class lets you reuse its internal buffer.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.StringUtils.IsWhiteSpace(System.String)">
      <summary>
            Determines whether the string is all white space. Empty string will return <c>false</c>.
            </summary>
      <param name="s">The string to test whether it is all white space.</param>
      <returns>
        <c>true</c> if the string is all white space; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.CamelCaseNamingStrategy">
      <summary>
            A camel case naming strategy.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.CamelCaseNamingStrategy.#ctor(System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.CamelCaseNamingStrategy" /> class.
            </summary>
      <param name="processDictionaryKeys">
            A flag indicating whether dictionary keys should be processed.
            </param>
      <param name="overrideSpecifiedNames">
            A flag indicating whether explicitly specified property names should be processed,
            e.g. a property name customized with a <see cref="T:Newtonsoft.Json.JsonPropertyAttribute" />.
            </param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.CamelCaseNamingStrategy.#ctor(System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.CamelCaseNamingStrategy" /> class.
            </summary>
      <param name="processDictionaryKeys">
            A flag indicating whether dictionary keys should be processed.
            </param>
      <param name="overrideSpecifiedNames">
            A flag indicating whether explicitly specified property names should be processed,
            e.g. a property name customized with a <see cref="T:Newtonsoft.Json.JsonPropertyAttribute" />.
            </param>
      <param name="processExtensionDataNames">
            A flag indicating whether extension data names should be processed.
            </param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.CamelCaseNamingStrategy.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.CamelCaseNamingStrategy" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.CamelCaseNamingStrategy.ResolvePropertyName(System.String)">
      <summary>
            Resolves the specified property name.
            </summary>
      <param name="name">The property name to resolve.</param>
      <returns>The resolved property name.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver">
      <summary>
            Resolves member mappings for a type, camel casing property names.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver.ResolveContract(System.Type)">
      <summary>
            Resolves the contract for a given type.
            </summary>
      <param name="type">The type to resolve a contract for.</param>
      <returns>The contract for a given type.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.DefaultContractResolver">
      <summary>
            Used by <see cref="T:Newtonsoft.Json.JsonSerializer" /> to resolve a <see cref="T:Newtonsoft.Json.Serialization.JsonContract" /> for a given <see cref="T:System.Type" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContract(System.Type)">
      <summary>
            Resolves the contract for a given type.
            </summary>
      <param name="type">The type to resolve a contract for.</param>
      <returns>The contract for a given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.GetSerializableMembers(System.Type)">
      <summary>
            Gets the serializable members for the type.
            </summary>
      <param name="objectType">The type to get serializable members for.</param>
      <returns>The serializable members for the type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateObjectContract(System.Type)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonObjectContract" /> for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonObjectContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateConstructorParameters(System.Reflection.ConstructorInfo,Newtonsoft.Json.Serialization.JsonPropertyCollection)">
      <summary>
            Creates the constructor parameters.
            </summary>
      <param name="constructor">The constructor to create properties for.</param>
      <param name="memberProperties">The type's member properties.</param>
      <returns>Properties for the given <see cref="T:System.Reflection.ConstructorInfo" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePropertyFromConstructorParameter(Newtonsoft.Json.Serialization.JsonProperty,System.Reflection.ParameterInfo)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> for the given <see cref="T:System.Reflection.ParameterInfo" />.
            </summary>
      <param name="matchingMemberProperty">The matching member property.</param>
      <param name="parameterInfo">The constructor parameter.</param>
      <returns>A created <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> for the given <see cref="T:System.Reflection.ParameterInfo" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContractConverter(System.Type)">
      <summary>
            Resolves the default <see cref="T:Newtonsoft.Json.JsonConverter" /> for the contract.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>The contract's default <see cref="T:Newtonsoft.Json.JsonConverter" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateDictionaryContract(System.Type)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonDictionaryContract" /> for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonDictionaryContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateArrayContract(System.Type)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonArrayContract" /> for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonArrayContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePrimitiveContract(System.Type)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract" /> for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateLinqContract(System.Type)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonLinqContract" /> for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonLinqContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateISerializableContract(System.Type)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonISerializableContract" /> for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonISerializableContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateDynamicContract(System.Type)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonDynamicContract" /> for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonDynamicContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateStringContract(System.Type)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonStringContract" /> for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonStringContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateContract(System.Type)">
      <summary>
            Determines which contract type is created for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperties(System.Type,Newtonsoft.Json.MemberSerialization)">
      <summary>
            Creates properties for the given <see cref="T:Newtonsoft.Json.Serialization.JsonContract" />.
            </summary>
      <param name="type">The type to create properties for.</param>
            /// <param name="memberSerialization">The member serialization mode for the type.</param><returns>Properties for the given <see cref="T:Newtonsoft.Json.Serialization.JsonContract" />.</returns></member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateMemberValueProvider(System.Reflection.MemberInfo)">
      <summary>
            Creates the <see cref="T:Newtonsoft.Json.Serialization.IValueProvider" /> used by the serializer to get and set values from a member.
            </summary>
      <param name="member">The member.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Serialization.IValueProvider" /> used by the serializer to get and set values from a member.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperty(System.Reflection.MemberInfo,Newtonsoft.Json.MemberSerialization)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> for the given <see cref="T:System.Reflection.MemberInfo" />.
            </summary>
      <param name="memberSerialization">The member's parent <see cref="T:Newtonsoft.Json.MemberSerialization" />.</param>
      <param name="member">The member to create a <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> for.</param>
      <returns>A created <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> for the given <see cref="T:System.Reflection.MemberInfo" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolvePropertyName(System.String)">
      <summary>
            Resolves the name of the property.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <returns>Resolved name of the property.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveExtensionDataName(System.String)">
      <summary>
            Resolves the name of the extension data. By default no changes are made to extension data names.
            </summary>
      <param name="extensionDataName">Name of the extension data.</param>
      <returns>Resolved name of the extension data.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveDictionaryKey(System.String)">
      <summary>
            Resolves the key of the dictionary. By default <see cref="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolvePropertyName(System.String)" /> is used to resolve dictionary keys.
            </summary>
      <param name="dictionaryKey">Key of the dictionary.</param>
      <returns>Resolved key of the dictionary.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.GetResolvedPropertyName(System.String)">
      <summary>
            Gets the resolved name of the property.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <returns>Name of the property.</returns>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.DynamicCodeGeneration">
      <summary>
            Gets a value indicating whether members are being get and set using dynamic code generation.
            This value is determined by the runtime permissions available.
            </summary>
      <value>
        <c>true</c> if using dynamic code generation; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.DefaultMembersSearchFlags">
      <summary>
            Gets or sets the default members search flags.
            </summary>
      <value>The default members search flags.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.SerializeCompilerGeneratedMembers">
      <summary>
            Gets or sets a value indicating whether compiler generated members should be serialized.
            </summary>
      <value>
        <c>true</c> if serialized compiler generated members; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.IgnoreSerializableInterface">
      <summary>
            Gets or sets a value indicating whether to ignore the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface when serializing and deserializing types.
            </summary>
      <value>
        <c>true</c> if the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface will be ignored when serializing and deserializing types; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.IgnoreSerializableAttribute">
      <summary>
            Gets or sets a value indicating whether to ignore the <see cref="T:System.SerializableAttribute" /> attribute when serializing and deserializing types.
            </summary>
      <value>
        <c>true</c> if the <see cref="T:System.SerializableAttribute" /> attribute will be ignored when serializing and deserializing types; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.IgnoreIsSpecifiedMembers">
      <summary>
            Gets or sets a value indicating whether to ignore IsSpecified members when serializing and deserializing types.
            </summary>
      <value>
        <c>true</c> if the IsSpecified members will be ignored when serializing and deserializing types; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.IgnoreShouldSerializeMembers">
      <summary>
            Gets or sets a value indicating whether to ignore ShouldSerialize members when serializing and deserializing types.
            </summary>
      <value>
        <c>true</c> if the ShouldSerialize members will be ignored when serializing and deserializing types; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.NamingStrategy">
      <summary>
            Gets or sets the naming strategy used to resolve how property names and dictionary keys are serialized.
            </summary>
      <value>The naming strategy used to resolve how property names and dictionary keys are serialized.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.DefaultNamingStrategy">
      <summary>
            The default naming strategy. Property names and dictionary keys are unchanged.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultNamingStrategy.ResolvePropertyName(System.String)">
      <summary>
            Resolves the specified property name.
            </summary>
      <param name="name">The property name to resolve.</param>
      <returns>The resolved property name.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.DefaultSerializationBinder">
      <summary>
            The default serialization binder used when resolving and loading classes from type names.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultSerializationBinder.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.DefaultSerializationBinder" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultSerializationBinder.BindToType(System.String,System.String)">
      <summary>
            When overridden in a derived class, controls the binding of a serialized object to a type.
            </summary>
      <param name="assemblyName">Specifies the <see cref="T:System.Reflection.Assembly" /> name of the serialized object.</param>
      <param name="typeName">Specifies the <see cref="T:System.Type" /> name of the serialized object.</param>
      <returns>
            The type of the object the formatter creates a new instance of.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultSerializationBinder.BindToName(System.Type,System.String@,System.String@)">
      <summary>
            When overridden in a derived class, controls the binding of a serialized object to a type.
            </summary>
      <param name="serializedType">The type of the object the formatter creates a new instance of.</param>
      <param name="assemblyName">Specifies the <see cref="T:System.Reflection.Assembly" /> name of the serialized object.</param>
      <param name="typeName">Specifies the <see cref="T:System.Type" /> name of the serialized object.</param>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.DiagnosticsTraceWriter">
      <summary>
            Represents a trace writer that writes to the application's <see cref="T:System.Diagnostics.TraceListener" /> instances.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DiagnosticsTraceWriter.Trace(System.Diagnostics.TraceLevel,System.String,System.Exception)">
      <summary>
            Writes the specified trace level, message and optional exception.
            </summary>
      <param name="level">The <see cref="T:System.Diagnostics.TraceLevel" /> at which to write this trace.</param>
      <param name="message">The trace message.</param>
      <param name="ex">The trace exception. This parameter is optional.</param>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.DiagnosticsTraceWriter.LevelFilter">
      <summary>
            Gets the <see cref="T:System.Diagnostics.TraceLevel" /> that will be used to filter the trace messages passed to the writer.
            For example a filter level of <see cref="F:System.Diagnostics.TraceLevel.Info" /> will exclude <see cref="F:System.Diagnostics.TraceLevel.Verbose" /> messages and include <see cref="F:System.Diagnostics.TraceLevel.Info" />,
            <see cref="F:System.Diagnostics.TraceLevel.Warning" /> and <see cref="F:System.Diagnostics.TraceLevel.Error" /> messages.
            </summary>
      <value>
            The <see cref="T:System.Diagnostics.TraceLevel" /> that will be used to filter the trace messages passed to the writer.
            </value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.DynamicValueProvider">
      <summary>
            Get and set values for a <see cref="T:System.Reflection.MemberInfo" /> using dynamic methods.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DynamicValueProvider.#ctor(System.Reflection.MemberInfo)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.DynamicValueProvider" /> class.
            </summary>
      <param name="memberInfo">The member info.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DynamicValueProvider.SetValue(System.Object,System.Object)">
      <summary>
            Sets the value.
            </summary>
      <param name="target">The target to set the value on.</param>
      <param name="value">The value to set on the target.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DynamicValueProvider.GetValue(System.Object)">
      <summary>
            Gets the value.
            </summary>
      <param name="target">The target to get the value from.</param>
      <returns>The value.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.ErrorContext">
      <summary>
            Provides information surrounding an error.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.ErrorContext.Error">
      <summary>
            Gets the error.
            </summary>
      <value>The error.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.ErrorContext.OriginalObject">
      <summary>
            Gets the original object that caused the error.
            </summary>
      <value>The original object that caused the error.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.ErrorContext.Member">
      <summary>
            Gets the member that caused the error.
            </summary>
      <value>The member that caused the error.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.ErrorContext.Path">
      <summary>
            Gets the path of the JSON location where the error occurred.
            </summary>
      <value>The path of the JSON location where the error occurred.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.ErrorContext.Handled">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.ErrorContext" /> is handled.
            </summary>
      <value>
        <c>true</c> if handled; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.ErrorEventArgs">
      <summary>
            Provides data for the Error event.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.ErrorEventArgs.#ctor(System.Object,Newtonsoft.Json.Serialization.ErrorContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.ErrorEventArgs" /> class.
            </summary>
      <param name="currentObject">The current object.</param>
      <param name="errorContext">The error context.</param>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.ErrorEventArgs.CurrentObject">
      <summary>
            Gets the current object the error event is being raised against.
            </summary>
      <value>The current object the error event is being raised against.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.ErrorEventArgs.ErrorContext">
      <summary>
            Gets the error context.
            </summary>
      <value>The error context.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.ExpressionValueProvider">
      <summary>
            Get and set values for a <see cref="T:System.Reflection.MemberInfo" /> using dynamic methods.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.ExpressionValueProvider.#ctor(System.Reflection.MemberInfo)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.ExpressionValueProvider" /> class.
            </summary>
      <param name="memberInfo">The member info.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.ExpressionValueProvider.SetValue(System.Object,System.Object)">
      <summary>
            Sets the value.
            </summary>
      <param name="target">The target to set the value on.</param>
      <param name="value">The value to set on the target.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.ExpressionValueProvider.GetValue(System.Object)">
      <summary>
            Gets the value.
            </summary>
      <param name="target">The target to get the value from.</param>
      <returns>The value.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.IAttributeProvider">
      <summary>
            Provides methods to get attributes.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.IAttributeProvider.GetAttributes(System.Boolean)">
      <summary>
            Returns a collection of all of the attributes, or an empty collection if there are no attributes.
            </summary>
      <param name="inherit">When <c>true</c>, look up the hierarchy chain for the inherited custom attribute.</param>
      <returns>A collection of <see cref="T:System.Attribute" />s, or an empty collection.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.IAttributeProvider.GetAttributes(System.Type,System.Boolean)">
      <summary>
            Returns a collection of attributes, identified by type, or an empty collection if there are no attributes.
            </summary>
      <param name="attributeType">The type of the attributes.</param>
      <param name="inherit">When <c>true</c>, look up the hierarchy chain for the inherited custom attribute.</param>
      <returns>A collection of <see cref="T:System.Attribute" />s, or an empty collection.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.IContractResolver">
      <summary>
            Used by <see cref="T:Newtonsoft.Json.JsonSerializer" /> to resolve a <see cref="T:Newtonsoft.Json.Serialization.JsonContract" /> for a given <see cref="T:System.Type" />.
            </summary>
      <example>
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeContractResolverObject" title="IContractResolver Class" />
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeContractResolverExample" title="IContractResolver Example" />
      </example>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.IContractResolver.ResolveContract(System.Type)">
      <summary>
            Resolves the contract for a given type.
            </summary>
      <param name="type">The type to resolve a contract for.</param>
      <returns>The contract for a given type.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.IReferenceResolver">
      <summary>
            Used to resolve references when serializing and deserializing JSON by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.IReferenceResolver.ResolveReference(System.Object,System.String)">
      <summary>
            Resolves a reference to its object.
            </summary>
      <param name="context">The serialization context.</param>
      <param name="reference">The reference to resolve.</param>
      <returns>The object that was resolved from the reference.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.IReferenceResolver.GetReference(System.Object,System.Object)">
      <summary>
            Gets the reference for the specified object.
            </summary>
      <param name="context">The serialization context.</param>
      <param name="value">The object to get a reference for.</param>
      <returns>The reference to the object.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.IReferenceResolver.IsReferenced(System.Object,System.Object)">
      <summary>
            Determines whether the specified object is referenced.
            </summary>
      <param name="context">The serialization context.</param>
      <param name="value">The object to test for a reference.</param>
      <returns>
        <c>true</c> if the specified object is referenced; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.IReferenceResolver.AddReference(System.Object,System.String,System.Object)">
      <summary>
            Adds a reference to the specified object.
            </summary>
      <param name="context">The serialization context.</param>
      <param name="reference">The reference.</param>
      <param name="value">The object to reference.</param>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.ISerializationBinder">
      <summary>
            Allows users to control class loading and mandate what class to load.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.ISerializationBinder.BindToType(System.String,System.String)">
      <summary>
            When implemented, controls the binding of a serialized object to a type.
            </summary>
      <param name="assemblyName">Specifies the <see cref="T:System.Reflection.Assembly" /> name of the serialized object.</param>
      <param name="typeName">Specifies the <see cref="T:System.Type" /> name of the serialized object</param>
      <returns>The type of the object the formatter creates a new instance of.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.ISerializationBinder.BindToName(System.Type,System.String@,System.String@)">
      <summary>
            When implemented, controls the binding of a serialized object to a type.
            </summary>
      <param name="serializedType">The type of the object the formatter creates a new instance of.</param>
      <param name="assemblyName">Specifies the <see cref="T:System.Reflection.Assembly" /> name of the serialized object.</param>
      <param name="typeName">Specifies the <see cref="T:System.Type" /> name of the serialized object.</param>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.ITraceWriter">
      <summary>
            Represents a trace writer.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.ITraceWriter.Trace(System.Diagnostics.TraceLevel,System.String,System.Exception)">
      <summary>
            Writes the specified trace level, message and optional exception.
            </summary>
      <param name="level">The <see cref="T:System.Diagnostics.TraceLevel" /> at which to write this trace.</param>
      <param name="message">The trace message.</param>
      <param name="ex">The trace exception. This parameter is optional.</param>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.ITraceWriter.LevelFilter">
      <summary>
            Gets the <see cref="T:System.Diagnostics.TraceLevel" /> that will be used to filter the trace messages passed to the writer.
            For example a filter level of <see cref="F:System.Diagnostics.TraceLevel.Info" /> will exclude <see cref="F:System.Diagnostics.TraceLevel.Verbose" /> messages and include <see cref="F:System.Diagnostics.TraceLevel.Info" />,
            <see cref="F:System.Diagnostics.TraceLevel.Warning" /> and <see cref="F:System.Diagnostics.TraceLevel.Error" /> messages.
            </summary>
      <value>The <see cref="T:System.Diagnostics.TraceLevel" /> that will be used to filter the trace messages passed to the writer.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.IValueProvider">
      <summary>
            Provides methods to get and set values.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.IValueProvider.SetValue(System.Object,System.Object)">
      <summary>
            Sets the value.
            </summary>
      <param name="target">The target to set the value on.</param>
      <param name="value">The value to set on the target.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.IValueProvider.GetValue(System.Object)">
      <summary>
            Gets the value.
            </summary>
      <param name="target">The target to get the value from.</param>
      <returns>The value.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonArrayContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonArrayContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonArrayContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonArrayContract.CollectionItemType">
      <summary>
            Gets the <see cref="T:System.Type" /> of the collection items.
            </summary>
      <value>The <see cref="T:System.Type" /> of the collection items.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonArrayContract.IsMultidimensionalArray">
      <summary>
            Gets a value indicating whether the collection type is a multidimensional array.
            </summary>
      <value>
        <c>true</c> if the collection type is a multidimensional array; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonArrayContract.OverrideCreator">
      <summary>
            Gets or sets the function used to create the object. When set this function will override <see cref="P:Newtonsoft.Json.Serialization.JsonContract.DefaultCreator" />.
            </summary>
      <value>The function used to create the object.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonArrayContract.HasParameterizedCreator">
      <summary>
            Gets a value indicating whether the creator has a parameter with the collection values.
            </summary>
      <value>
        <c>true</c> if the creator has a parameter with the collection values; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonContainerContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonContainerContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonContainerContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContainerContract.ItemConverter">
      <summary>
            Gets or sets the default collection items <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
      <value>The converter.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContainerContract.ItemIsReference">
      <summary>
            Gets or sets a value indicating whether the collection items preserve object references.
            </summary>
      <value>
        <c>true</c> if collection items preserve object references; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContainerContract.ItemReferenceLoopHandling">
      <summary>
            Gets or sets the collection item reference loop handling.
            </summary>
      <value>The reference loop handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContainerContract.ItemTypeNameHandling">
      <summary>
            Gets or sets the collection item type name handling.
            </summary>
      <value>The type name handling.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.SerializationCallback">
      <summary>
            Handles <see cref="T:Newtonsoft.Json.JsonSerializer" /> serialization callback events.
            </summary>
      <param name="o">The object that raised the callback event.</param>
      <param name="context">The streaming context.</param>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.SerializationErrorCallback">
      <summary>
            Handles <see cref="T:Newtonsoft.Json.JsonSerializer" /> serialization error callback events.
            </summary>
      <param name="o">The object that raised the callback event.</param>
      <param name="context">The streaming context.</param>
      <param name="errorContext">The error context.</param>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.ExtensionDataSetter">
      <summary>
            Sets extension data for an object during deserialization.
            </summary>
      <param name="o">The object to set extension data on.</param>
      <param name="key">The extension data key.</param>
      <param name="value">The extension data value.</param>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.ExtensionDataGetter">
      <summary>
            Gets extension data for an object during serialization.
            </summary>
      <param name="o">The object to set extension data on.</param>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.UnderlyingType">
      <summary>
            Gets the underlying type for the contract.
            </summary>
      <value>The underlying type for the contract.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.CreatedType">
      <summary>
            Gets or sets the type created during deserialization.
            </summary>
      <value>The type created during deserialization.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.IsReference">
      <summary>
            Gets or sets whether this type contract is serialized as a reference.
            </summary>
      <value>Whether this type contract is serialized as a reference.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.Converter">
      <summary>
            Gets or sets the default <see cref="T:Newtonsoft.Json.JsonConverter" /> for this contract.
            </summary>
      <value>The converter.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnDeserializedCallbacks">
      <summary>
            Gets or sets all methods called immediately after deserialization of the object.
            </summary>
      <value>The methods called immediately after deserialization of the object.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnDeserializingCallbacks">
      <summary>
            Gets or sets all methods called during deserialization of the object.
            </summary>
      <value>The methods called during deserialization of the object.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnSerializedCallbacks">
      <summary>
            Gets or sets all methods called after serialization of the object graph.
            </summary>
      <value>The methods called after serialization of the object graph.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnSerializingCallbacks">
      <summary>
            Gets or sets all methods called before serialization of the object.
            </summary>
      <value>The methods called before serialization of the object.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnErrorCallbacks">
      <summary>
            Gets or sets all method called when an error is thrown during the serialization of the object.
            </summary>
      <value>The methods called when an error is thrown during the serialization of the object.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.DefaultCreator">
      <summary>
            Gets or sets the default creator method used to create the object.
            </summary>
      <value>The default creator method used to create the object.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.DefaultCreatorNonPublic">
      <summary>
            Gets or sets a value indicating whether the default creator is non-public.
            </summary>
      <value>
        <c>true</c> if the default object creator is non-public; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonDictionaryContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonDictionaryContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonDictionaryContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonDictionaryContract.DictionaryKeyResolver">
      <summary>
            Gets or sets the dictionary key resolver.
            </summary>
      <value>The dictionary key resolver.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonDictionaryContract.DictionaryKeyType">
      <summary>
            Gets the <see cref="T:System.Type" /> of the dictionary keys.
            </summary>
      <value>The <see cref="T:System.Type" /> of the dictionary keys.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonDictionaryContract.DictionaryValueType">
      <summary>
            Gets the <see cref="T:System.Type" /> of the dictionary values.
            </summary>
      <value>The <see cref="T:System.Type" /> of the dictionary values.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonDictionaryContract.OverrideCreator">
      <summary>
            Gets or sets the function used to create the object. When set this function will override <see cref="P:Newtonsoft.Json.Serialization.JsonContract.DefaultCreator" />.
            </summary>
      <value>The function used to create the object.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonDictionaryContract.HasParameterizedCreator">
      <summary>
            Gets a value indicating whether the creator has a parameter with the dictionary values.
            </summary>
      <value>
        <c>true</c> if the creator has a parameter with the dictionary values; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonDynamicContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonDynamicContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonDynamicContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonDynamicContract.Properties">
      <summary>
            Gets the object's properties.
            </summary>
      <value>The object's properties.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonDynamicContract.PropertyNameResolver">
      <summary>
            Gets or sets the property name resolver.
            </summary>
      <value>The property name resolver.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonISerializableContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonISerializableContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonISerializableContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonISerializableContract.ISerializableCreator">
      <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.ISerializable" /> object constructor.
            </summary>
      <value>The <see cref="T:System.Runtime.Serialization.ISerializable" /> object constructor.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonLinqContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonLinqContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonLinqContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonObjectContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonObjectContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonObjectContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.MemberSerialization">
      <summary>
            Gets or sets the object member serialization.
            </summary>
      <value>The member object serialization.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ItemRequired">
      <summary>
            Gets or sets a value that indicates whether the object's properties are required.
            </summary>
      <value>
            	A value indicating whether the object's properties are required.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ItemNullValueHandling">
      <summary>
            Gets or sets how the object's properties with null values are handled during serialization and deserialization.
            </summary>
      <value>How the object's properties with null values are handled during serialization and deserialization.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.Properties">
      <summary>
            Gets the object's properties.
            </summary>
      <value>The object's properties.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.CreatorParameters">
      <summary>
            Gets a collection of <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> instances that define the parameters used with <see cref="P:Newtonsoft.Json.Serialization.JsonObjectContract.OverrideCreator" />.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.OverrideCreator">
      <summary>
            Gets or sets the function used to create the object. When set this function will override <see cref="P:Newtonsoft.Json.Serialization.JsonContract.DefaultCreator" />.
            This function is called with a collection of arguments which are defined by the <see cref="P:Newtonsoft.Json.Serialization.JsonObjectContract.CreatorParameters" /> collection.
            </summary>
      <value>The function used to create the object.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ExtensionDataSetter">
      <summary>
            Gets or sets the extension data setter.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ExtensionDataGetter">
      <summary>
            Gets or sets the extension data getter.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ExtensionDataValueType">
      <summary>
            Gets or sets the extension data value type.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ExtensionDataNameResolver">
      <summary>
            Gets or sets the extension data name resolver.
            </summary>
      <value>The extension data name resolver.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonPrimitiveContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonProperty">
      <summary>
            Maps a JSON property to a .NET member or constructor parameter.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonProperty.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.PropertyName">
      <summary>
            Gets or sets the name of the property.
            </summary>
      <value>The name of the property.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.DeclaringType">
      <summary>
            Gets or sets the type that declared this property.
            </summary>
      <value>The type that declared this property.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Order">
      <summary>
            Gets or sets the order of serialization of a member.
            </summary>
      <value>The numeric order of serialization.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.UnderlyingName">
      <summary>
            Gets or sets the name of the underlying member or parameter.
            </summary>
      <value>The name of the underlying member or parameter.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ValueProvider">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Serialization.IValueProvider" /> that will get and set the <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> during serialization.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Serialization.IValueProvider" /> that will get and set the <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> during serialization.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.AttributeProvider">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Serialization.IAttributeProvider" /> for this property.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Serialization.IAttributeProvider" /> for this property.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.PropertyType">
      <summary>
            Gets or sets the type of the property.
            </summary>
      <value>The type of the property.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Converter">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.JsonConverter" /> for the property.
            If set this converter takes precedence over the contract converter for the property type.
            </summary>
      <value>The converter.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.MemberConverter">
      <summary>
            Gets or sets the member converter.
            </summary>
      <value>The member converter.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Ignored">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> is ignored.
            </summary>
      <value>
        <c>true</c> if ignored; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Readable">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> is readable.
            </summary>
      <value>
        <c>true</c> if readable; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Writable">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> is writable.
            </summary>
      <value>
        <c>true</c> if writable; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.HasMemberAttribute">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> has a member attribute.
            </summary>
      <value>
        <c>true</c> if has a member attribute; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.DefaultValue">
      <summary>
            Gets the default value.
            </summary>
      <value>The default value.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Required">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> is required.
            </summary>
      <value>A value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> is required.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.IsReference">
      <summary>
            Gets or sets a value indicating whether this property preserves object references.
            </summary>
      <value>
        <c>true</c> if this instance is reference; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.NullValueHandling">
      <summary>
            Gets or sets the property null value handling.
            </summary>
      <value>The null value handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.DefaultValueHandling">
      <summary>
            Gets or sets the property default value handling.
            </summary>
      <value>The default value handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ReferenceLoopHandling">
      <summary>
            Gets or sets the property reference loop handling.
            </summary>
      <value>The reference loop handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ObjectCreationHandling">
      <summary>
            Gets or sets the property object creation handling.
            </summary>
      <value>The object creation handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.TypeNameHandling">
      <summary>
            Gets or sets or sets the type name handling.
            </summary>
      <value>The type name handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ShouldSerialize">
      <summary>
            Gets or sets a predicate used to determine whether the property should be serialized.
            </summary>
      <value>A predicate used to determine whether the property should be serialized.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ShouldDeserialize">
      <summary>
            Gets or sets a predicate used to determine whether the property should be deserialized.
            </summary>
      <value>A predicate used to determine whether the property should be deserialized.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.GetIsSpecified">
      <summary>
            Gets or sets a predicate used to determine whether the property should be serialized.
            </summary>
      <value>A predicate used to determine whether the property should be serialized.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.SetIsSpecified">
      <summary>
            Gets or sets an action used to set whether the property has been deserialized.
            </summary>
      <value>An action used to set whether the property has been deserialized.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ItemConverter">
      <summary>
            Gets or sets the converter used when serializing the property's collection items.
            </summary>
      <value>The collection's items converter.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ItemIsReference">
      <summary>
            Gets or sets whether this property's collection items are serialized as a reference.
            </summary>
      <value>Whether this property's collection items are serialized as a reference.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ItemTypeNameHandling">
      <summary>
            Gets or sets the type name handling used when serializing the property's collection items.
            </summary>
      <value>The collection's items type name handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ItemReferenceLoopHandling">
      <summary>
            Gets or sets the reference loop handling used when serializing the property's collection items.
            </summary>
      <value>The collection's items reference loop handling.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonPropertyCollection">
      <summary>
            A collection of <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> objects.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonPropertyCollection" /> class.
            </summary>
      <param name="type">The type.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.GetKeyForItem(Newtonsoft.Json.Serialization.JsonProperty)">
      <summary>
            When implemented in a derived class, extracts the key from the specified element.
            </summary>
      <param name="item">The element from which to extract the key.</param>
      <returns>The key for the specified element.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.AddProperty(Newtonsoft.Json.Serialization.JsonProperty)">
      <summary>
            Adds a <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> object.
            </summary>
      <param name="property">The property to add to the collection.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.GetClosestMatchProperty(System.String)">
      <summary>
            Gets the closest matching <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> object.
            First attempts to get an exact case match of <paramref name="propertyName" /> and then
            a case insensitive match.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <returns>A matching property if found.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.GetProperty(System.String,System.StringComparison)">
      <summary>
            Gets a property by property name.
            </summary>
      <param name="propertyName">The name of the property to get.</param>
      <param name="comparisonType">Type property name string comparison.</param>
      <returns>A matching property if found.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonStringContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonStringContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonStringContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonTypeReflector.CreateJsonConverterInstance(System.Type,System.Object[])">
      <summary>
            Lookup and create an instance of the <see cref="T:Newtonsoft.Json.JsonConverter" /> type described by the argument.
            </summary>
      <param name="converterType">The <see cref="T:Newtonsoft.Json.JsonConverter" /> type to create.</param>
      <param name="converterArgs">Optional arguments to pass to an initializing constructor of the JsonConverter.
            If <c>null</c>, the default constructor is used.</param>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.MemoryTraceWriter">
      <summary>
            Represents a trace writer that writes to memory. When the trace message limit is
            reached then old trace messages will be removed as new messages are added.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.MemoryTraceWriter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.MemoryTraceWriter" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.MemoryTraceWriter.Trace(System.Diagnostics.TraceLevel,System.String,System.Exception)">
      <summary>
            Writes the specified trace level, message and optional exception.
            </summary>
      <param name="level">The <see cref="T:System.Diagnostics.TraceLevel" /> at which to write this trace.</param>
      <param name="message">The trace message.</param>
      <param name="ex">The trace exception. This parameter is optional.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.MemoryTraceWriter.GetTraceMessages">
      <summary>
            Returns an enumeration of the most recent trace messages.
            </summary>
      <returns>An enumeration of the most recent trace messages.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.MemoryTraceWriter.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> of the most recent trace messages.
            </summary>
      <returns>
            A <see cref="T:System.String" /> of the most recent trace messages.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.MemoryTraceWriter.LevelFilter">
      <summary>
            Gets the <see cref="T:System.Diagnostics.TraceLevel" /> that will be used to filter the trace messages passed to the writer.
            For example a filter level of <see cref="F:System.Diagnostics.TraceLevel.Info" /> will exclude <see cref="F:System.Diagnostics.TraceLevel.Verbose" /> messages and include <see cref="F:System.Diagnostics.TraceLevel.Info" />,
            <see cref="F:System.Diagnostics.TraceLevel.Warning" /> and <see cref="F:System.Diagnostics.TraceLevel.Error" /> messages.
            </summary>
      <value>
            The <see cref="T:System.Diagnostics.TraceLevel" /> that will be used to filter the trace messages passed to the writer.
            </value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.NamingStrategy">
      <summary>
            A base class for resolving how property names and dictionary keys are serialized.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.NamingStrategy.GetPropertyName(System.String,System.Boolean)">
      <summary>
            Gets the serialized name for a given property name.
            </summary>
      <param name="name">The initial property name.</param>
      <param name="hasSpecifiedName">A flag indicating whether the property has had a name explicitly specified.</param>
      <returns>The serialized property name.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.NamingStrategy.GetExtensionDataName(System.String)">
      <summary>
            Gets the serialized name for a given extension data name.
            </summary>
      <param name="name">The initial extension data name.</param>
      <returns>The serialized extension data name.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.NamingStrategy.GetDictionaryKey(System.String)">
      <summary>
            Gets the serialized key for a given dictionary key.
            </summary>
      <param name="key">The initial dictionary key.</param>
      <returns>The serialized dictionary key.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.NamingStrategy.ResolvePropertyName(System.String)">
      <summary>
            Resolves the specified property name.
            </summary>
      <param name="name">The property name to resolve.</param>
      <returns>The resolved property name.</returns>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.NamingStrategy.ProcessDictionaryKeys">
      <summary>
            A flag indicating whether dictionary keys should be processed.
            Defaults to <c>false</c>.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.NamingStrategy.ProcessExtensionDataNames">
      <summary>
            A flag indicating whether extension data names should be processed.
            Defaults to <c>false</c>.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.NamingStrategy.OverrideSpecifiedNames">
      <summary>
            A flag indicating whether explicitly specified property names,
            e.g. a property name customized with a <see cref="T:Newtonsoft.Json.JsonPropertyAttribute" />, should be processed.
            Defaults to <c>false</c>.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.ObjectConstructor`1">
      <summary>
            Represents a method that constructs an object.
            </summary>
      <typeparam name="T">The object type to create.</typeparam>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.OnErrorAttribute">
      <summary>
            When applied to a method, specifies that the method is called when an error occurs serializing an object.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.ReflectionAttributeProvider">
      <summary>
            Provides methods to get attributes from a <see cref="T:System.Type" />, <see cref="T:System.Reflection.MemberInfo" />, <see cref="T:System.Reflection.ParameterInfo" /> or <see cref="T:System.Reflection.Assembly" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.ReflectionAttributeProvider.#ctor(System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.ReflectionAttributeProvider" /> class.
            </summary>
      <param name="attributeProvider">The instance to get attributes for. This parameter should be a <see cref="T:System.Type" />, <see cref="T:System.Reflection.MemberInfo" />, <see cref="T:System.Reflection.ParameterInfo" /> or <see cref="T:System.Reflection.Assembly" />.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.ReflectionAttributeProvider.GetAttributes(System.Boolean)">
      <summary>
            Returns a collection of all of the attributes, or an empty collection if there are no attributes.
            </summary>
      <param name="inherit">When <c>true</c>, look up the hierarchy chain for the inherited custom attribute.</param>
      <returns>A collection of <see cref="T:System.Attribute" />s, or an empty collection.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.ReflectionAttributeProvider.GetAttributes(System.Type,System.Boolean)">
      <summary>
            Returns a collection of attributes, identified by type, or an empty collection if there are no attributes.
            </summary>
      <param name="attributeType">The type of the attributes.</param>
      <param name="inherit">When <c>true</c>, look up the hierarchy chain for the inherited custom attribute.</param>
      <returns>A collection of <see cref="T:System.Attribute" />s, or an empty collection.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.ReflectionValueProvider">
      <summary>
            Get and set values for a <see cref="T:System.Reflection.MemberInfo" /> using reflection.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.ReflectionValueProvider.#ctor(System.Reflection.MemberInfo)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.ReflectionValueProvider" /> class.
            </summary>
      <param name="memberInfo">The member info.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.ReflectionValueProvider.SetValue(System.Object,System.Object)">
      <summary>
            Sets the value.
            </summary>
      <param name="target">The target to set the value on.</param>
      <param name="value">The value to set on the target.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.ReflectionValueProvider.GetValue(System.Object)">
      <summary>
            Gets the value.
            </summary>
      <param name="target">The target to get the value from.</param>
      <returns>The value.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.SnakeCaseNamingStrategy">
      <summary>
            A snake case naming strategy.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.SnakeCaseNamingStrategy.#ctor(System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.SnakeCaseNamingStrategy" /> class.
            </summary>
      <param name="processDictionaryKeys">
            A flag indicating whether dictionary keys should be processed.
            </param>
      <param name="overrideSpecifiedNames">
            A flag indicating whether explicitly specified property names should be processed,
            e.g. a property name customized with a <see cref="T:Newtonsoft.Json.JsonPropertyAttribute" />.
            </param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.SnakeCaseNamingStrategy.#ctor(System.Boolean,System.Boolean,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.SnakeCaseNamingStrategy" /> class.
            </summary>
      <param name="processDictionaryKeys">
            A flag indicating whether dictionary keys should be processed.
            </param>
      <param name="overrideSpecifiedNames">
            A flag indicating whether explicitly specified property names should be processed,
            e.g. a property name customized with a <see cref="T:Newtonsoft.Json.JsonPropertyAttribute" />.
            </param>
      <param name="processExtensionDataNames">
            A flag indicating whether extension data names should be processed.
            </param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.SnakeCaseNamingStrategy.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.SnakeCaseNamingStrategy" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.SnakeCaseNamingStrategy.ResolvePropertyName(System.String)">
      <summary>
            Resolves the specified property name.
            </summary>
      <param name="name">The property name to resolve.</param>
      <returns>The resolved property name.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Schema.Extensions">
      <summary>
        <para>
            Contains the JSON schema extension methods.
            </para>
        <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
      </summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.Extensions.IsValid(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Schema.JsonSchema)">
      <summary>
        <para>
            Determines whether the <see cref="T:Newtonsoft.Json.Linq.JToken" /> is valid.
            </para>
        <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
      </summary>
      <param name="source">The source <see cref="T:Newtonsoft.Json.Linq.JToken" /> to test.</param>
      <param name="schema">The schema to test with.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:Newtonsoft.Json.Linq.JToken" /> is valid; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.Extensions.IsValid(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Schema.JsonSchema,System.Collections.Generic.IList{System.String}@)">
      <summary>
        <para>
            Determines whether the <see cref="T:Newtonsoft.Json.Linq.JToken" /> is valid.
            </para>
        <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
      </summary>
      <param name="source">The source <see cref="T:Newtonsoft.Json.Linq.JToken" /> to test.</param>
      <param name="schema">The schema to test with.</param>
      <param name="errorMessages">When this method returns, contains any error messages generated while validating. </param>
      <returns>
        <c>true</c> if the specified <see cref="T:Newtonsoft.Json.Linq.JToken" /> is valid; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.Extensions.Validate(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Schema.JsonSchema)">
      <summary>
        <para>
            Validates the specified <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </para>
        <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
      </summary>
      <param name="source">The source <see cref="T:Newtonsoft.Json.Linq.JToken" /> to test.</param>
      <param name="schema">The schema to test with.</param>
    </member>
    <member name="M:Newtonsoft.Json.Schema.Extensions.Validate(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Schema.JsonSchema,Newtonsoft.Json.Schema.ValidationEventHandler)">
      <summary>
        <para>
            Validates the specified <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </para>
        <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
      </summary>
      <param name="source">The source <see cref="T:Newtonsoft.Json.Linq.JToken" /> to test.</param>
      <param name="schema">The schema to test with.</param>
      <param name="validationEventHandler">The validation event handler.</param>
    </member>
    <member name="T:Newtonsoft.Json.Schema.JsonSchema">
      <summary>
        <para>
            An in-memory representation of a JSON Schema.
            </para>
        <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
      </summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.Read(Newtonsoft.Json.JsonReader)">
      <summary>
            Reads a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> containing the JSON Schema to read.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> object representing the JSON Schema.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.Read(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Schema.JsonSchemaResolver)">
      <summary>
            Reads a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> containing the JSON Schema to read.</param>
      <param name="resolver">The <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver" /> to use when resolving schema references.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> object representing the JSON Schema.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.Parse(System.String)">
      <summary>
            Load a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from a string that contains JSON Schema.
            </summary>
      <param name="json">A <see cref="T:System.String" /> that contains JSON Schema.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> populated from the string that contains JSON Schema.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.Parse(System.String,Newtonsoft.Json.Schema.JsonSchemaResolver)">
      <summary>
            Load a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from a string that contains JSON Schema using the specified <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver" />.
            </summary>
      <param name="json">A <see cref="T:System.String" /> that contains JSON Schema.</param>
      <param name="resolver">The resolver.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> populated from the string that contains JSON Schema.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.WriteTo(Newtonsoft.Json.JsonWriter)">
      <summary>
            Writes this schema to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.Schema.JsonSchemaResolver)">
      <summary>
            Writes this schema to a <see cref="T:Newtonsoft.Json.JsonWriter" /> using the specified <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
      <param name="resolver">The resolver used.</param>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Id">
      <summary>
            Gets or sets the id.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Title">
      <summary>
            Gets or sets the title.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Required">
      <summary>
            Gets or sets whether the object is required.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.ReadOnly">
      <summary>
            Gets or sets whether the object is read-only.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Hidden">
      <summary>
            Gets or sets whether the object is visible to users.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Transient">
      <summary>
            Gets or sets whether the object is transient.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Description">
      <summary>
            Gets or sets the description of the object.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Type">
      <summary>
            Gets or sets the types of values allowed by the object.
            </summary>
      <value>The type.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Pattern">
      <summary>
            Gets or sets the pattern.
            </summary>
      <value>The pattern.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.MinimumLength">
      <summary>
            Gets or sets the minimum length.
            </summary>
      <value>The minimum length.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.MaximumLength">
      <summary>
            Gets or sets the maximum length.
            </summary>
      <value>The maximum length.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.DivisibleBy">
      <summary>
            Gets or sets a number that the value should be divisible by.
            </summary>
      <value>A number that the value should be divisible by.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Minimum">
      <summary>
            Gets or sets the minimum.
            </summary>
      <value>The minimum.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Maximum">
      <summary>
            Gets or sets the maximum.
            </summary>
      <value>The maximum.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.ExclusiveMinimum">
      <summary>
            Gets or sets a flag indicating whether the value can not equal the number defined by the <c>minimum</c> attribute (<see cref="P:Newtonsoft.Json.Schema.JsonSchema.Minimum" />).
            </summary>
      <value>A flag indicating whether the value can not equal the number defined by the <c>minimum</c> attribute (<see cref="P:Newtonsoft.Json.Schema.JsonSchema.Minimum" />).</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.ExclusiveMaximum">
      <summary>
            Gets or sets a flag indicating whether the value can not equal the number defined by the <c>maximum</c> attribute (<see cref="P:Newtonsoft.Json.Schema.JsonSchema.Maximum" />).
            </summary>
      <value>A flag indicating whether the value can not equal the number defined by the <c>maximum</c> attribute (<see cref="P:Newtonsoft.Json.Schema.JsonSchema.Maximum" />).</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.MinimumItems">
      <summary>
            Gets or sets the minimum number of items.
            </summary>
      <value>The minimum number of items.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.MaximumItems">
      <summary>
            Gets or sets the maximum number of items.
            </summary>
      <value>The maximum number of items.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Items">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of items.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of items.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.PositionalItemsValidation">
      <summary>
            Gets or sets a value indicating whether items in an array are validated using the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> instance at their array position from <see cref="P:Newtonsoft.Json.Schema.JsonSchema.Items" />.
            </summary>
      <value>
        <c>true</c> if items are validated using their array position; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.AdditionalItems">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of additional items.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of additional items.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.AllowAdditionalItems">
      <summary>
            Gets or sets a value indicating whether additional items are allowed.
            </summary>
      <value>
        <c>true</c> if additional items are allowed; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.UniqueItems">
      <summary>
            Gets or sets whether the array items must be unique.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Properties">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of properties.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of properties.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.AdditionalProperties">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of additional properties.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of additional properties.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.PatternProperties">
      <summary>
            Gets or sets the pattern properties.
            </summary>
      <value>The pattern properties.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.AllowAdditionalProperties">
      <summary>
            Gets or sets a value indicating whether additional properties are allowed.
            </summary>
      <value>
        <c>true</c> if additional properties are allowed; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Requires">
      <summary>
            Gets or sets the required property if this property is present.
            </summary>
      <value>The required property if this property is present.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Enum">
      <summary>
            Gets or sets the a collection of valid enum values allowed.
            </summary>
      <value>A collection of valid enum values allowed.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Disallow">
      <summary>
            Gets or sets disallowed types.
            </summary>
      <value>The disallowed types.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Default">
      <summary>
            Gets or sets the default value.
            </summary>
      <value>The default value.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Extends">
      <summary>
            Gets or sets the collection of <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> that this schema extends.
            </summary>
      <value>The collection of <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> that this schema extends.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Format">
      <summary>
            Gets or sets the format.
            </summary>
      <value>The format.</value>
    </member>
    <member name="T:Newtonsoft.Json.Schema.JsonSchemaException">
      <summary>
        <para>
            Returns detailed information about the schema exception.
            </para>
        <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
      </summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException" /> class
            with a specified error message.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or <c>null</c> if no inner exception is specified.</param>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is <c>null</c>.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is <c>null</c> or <see cref="P:System.Exception.HResult" /> is zero (0).</exception>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchemaException.LineNumber">
      <summary>
            Gets the line number indicating where the error occurred.
            </summary>
      <value>The line number indicating where the error occurred.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchemaException.LinePosition">
      <summary>
            Gets the line position indicating where the error occurred.
            </summary>
      <value>The line position indicating where the error occurred.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchemaException.Path">
      <summary>
            Gets the path to the JSON where the error occurred.
            </summary>
      <value>The path to the JSON where the error occurred.</value>
    </member>
    <member name="T:Newtonsoft.Json.Schema.JsonSchemaGenerator">
      <summary>
        <para>
            Generates a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from a specified <see cref="T:System.Type" />.
            </para>
        <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
      </summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type)">
      <summary>
            Generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from the specified type.
            </summary>
      <param name="type">The type to generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> generated from the specified type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type,Newtonsoft.Json.Schema.JsonSchemaResolver)">
      <summary>
            Generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from the specified type.
            </summary>
      <param name="type">The type to generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from.</param>
      <param name="resolver">The <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver" /> used to resolve schema references.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> generated from the specified type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type,System.Boolean)">
      <summary>
            Generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from the specified type.
            </summary>
      <param name="type">The type to generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from.</param>
      <param name="rootSchemaNullable">Specify whether the generated root <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> will be nullable.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> generated from the specified type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type,Newtonsoft.Json.Schema.JsonSchemaResolver,System.Boolean)">
      <summary>
            Generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from the specified type.
            </summary>
      <param name="type">The type to generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from.</param>
      <param name="resolver">The <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver" /> used to resolve schema references.</param>
      <param name="rootSchemaNullable">Specify whether the generated root <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> will be nullable.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> generated from the specified type.</returns>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchemaGenerator.UndefinedSchemaIdHandling">
      <summary>
            Gets or sets how undefined schemas are handled by the serializer.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchemaGenerator.ContractResolver">
      <summary>
            Gets or sets the contract resolver.
            </summary>
      <value>The contract resolver.</value>
    </member>
    <member name="T:Newtonsoft.Json.Schema.JsonSchemaResolver">
      <summary>
        <para>
            Resolves <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from an id.
            </para>
        <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
      </summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaResolver.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaResolver.GetSchema(System.String)">
      <summary>
            Gets a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> for the specified reference.
            </summary>
      <param name="reference">The id.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> for the specified reference.</returns>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchemaResolver.LoadedSchemas">
      <summary>
            Gets or sets the loaded schemas.
            </summary>
      <value>The loaded schemas.</value>
    </member>
    <member name="T:Newtonsoft.Json.Schema.JsonSchemaType">
      <summary>
        <para>
            The value types allowed by the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" />.
            </para>
        <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
      </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.None">
      <summary>
            No type specified.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.String">
      <summary>
            String type.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Float">
      <summary>
            Float type.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Integer">
      <summary>
            Integer type.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Boolean">
      <summary>
            Boolean type.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Object">
      <summary>
            Object type.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Array">
      <summary>
            Array type.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Null">
      <summary>
            Null type.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Any">
      <summary>
            Any type.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Schema.UndefinedSchemaIdHandling">
      <summary>
        <para>
            Specifies undefined schema Id handling options for the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaGenerator" />.
            </para>
        <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
      </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.UndefinedSchemaIdHandling.None">
      <summary>
            Do not infer a schema Id.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.UndefinedSchemaIdHandling.UseTypeName">
      <summary>
            Use the .NET type name as the schema Id.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.UndefinedSchemaIdHandling.UseAssemblyQualifiedName">
      <summary>
            Use the assembly qualified .NET type name as the schema Id.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Schema.ValidationEventArgs">
      <summary>
        <para>
            Returns detailed information related to the <see cref="T:Newtonsoft.Json.Schema.ValidationEventHandler" />.
            </para>
        <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
      </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.ValidationEventArgs.Exception">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException" /> associated with the validation error.
            </summary>
      <value>The JsonSchemaException associated with the validation error.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.ValidationEventArgs.Path">
      <summary>
            Gets the path of the JSON location where the validation error occurred.
            </summary>
      <value>The path of the JSON location where the validation error occurred.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.ValidationEventArgs.Message">
      <summary>
            Gets the text description corresponding to the validation error.
            </summary>
      <value>The text description.</value>
    </member>
    <member name="T:Newtonsoft.Json.Schema.ValidationEventHandler">
      <summary>
        <para>
            Represents the callback method that will handle JSON schema validation events and the <see cref="T:Newtonsoft.Json.Schema.ValidationEventArgs" />.
            </para>
        <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
      </summary>
    </member>
    <member name="T:Newtonsoft.Json.Linq.CommentHandling">
      <summary>
            Specifies how JSON comments are handled when loading JSON.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.CommentHandling.Ignore">
      <summary>
            Ignore comments.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.CommentHandling.Load">
      <summary>
            Load comments as a <see cref="T:Newtonsoft.Json.Linq.JValue" /> with type <see cref="F:Newtonsoft.Json.Linq.JTokenType.Comment" />.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Linq.Extensions">
      <summary>
            Contains the LINQ to JSON extension methods.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Returns a collection of tokens that contains the ancestors of every token in the source collection.
            </summary>
      <typeparam name="T">The type of the objects in source, constrained to <see cref="T:Newtonsoft.Json.Linq.JToken" />.</typeparam>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the ancestors of every token in the source collection.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.AncestorsAndSelf``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Returns a collection of tokens that contains every token in the source collection, and the ancestors of every token in the source collection.
            </summary>
      <typeparam name="T">The type of the objects in source, constrained to <see cref="T:Newtonsoft.Json.Linq.JToken" />.</typeparam>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains every token in the source collection, the ancestors of every token in the source collection.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Returns a collection of tokens that contains the descendants of every token in the source collection.
            </summary>
      <typeparam name="T">The type of the objects in source, constrained to <see cref="T:Newtonsoft.Json.Linq.JContainer" />.</typeparam>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the descendants of every token in the source collection.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.DescendantsAndSelf``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Returns a collection of tokens that contains every token in the source collection, and the descendants of every token in the source collection.
            </summary>
      <typeparam name="T">The type of the objects in source, constrained to <see cref="T:Newtonsoft.Json.Linq.JContainer" />.</typeparam>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains every token in the source collection, and the descendants of every token in the source collection.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Properties(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JObject})">
      <summary>
            Returns a collection of child properties of every object in the source collection.
            </summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JObject" /> that contains the source collection.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JProperty" /> that contains the properties of every object in the source collection.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Values(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken},System.Object)">
      <summary>
            Returns a collection of child values of every object in the source collection with the given key.
            </summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <param name="key">The token key.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the values of every token in the source collection with the given key.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Values(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})">
      <summary>
            Returns a collection of child values of every object in the source collection.
            </summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the values of every token in the source collection.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Values``1(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken},System.Object)">
      <summary>
            Returns a collection of converted child values of every object in the source collection with the given key.
            </summary>
      <typeparam name="U">The type to convert the values to.</typeparam>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <param name="key">The token key.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the converted values of every token in the source collection with the given key.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Values``1(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})">
      <summary>
            Returns a collection of converted child values of every object in the source collection.
            </summary>
      <typeparam name="U">The type to convert the values to.</typeparam>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the converted values of every token in the source collection.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Value``1(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})">
      <summary>
            Converts the value.
            </summary>
      <typeparam name="U">The type to convert the value to.</typeparam>
      <param name="value">A <see cref="T:Newtonsoft.Json.Linq.JToken" /> cast as a <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
      <returns>A converted value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Value``2(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Converts the value.
            </summary>
      <typeparam name="T">The source collection type.</typeparam>
      <typeparam name="U">The type to convert the value to.</typeparam>
      <param name="value">A <see cref="T:Newtonsoft.Json.Linq.JToken" /> cast as a <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
      <returns>A converted value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Children``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Returns a collection of child tokens of every array in the source collection.
            </summary>
      <typeparam name="T">The source collection type.</typeparam>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the values of every token in the source collection.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Children``2(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Returns a collection of converted child tokens of every array in the source collection.
            </summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <typeparam name="U">The type to convert the values to.</typeparam>
      <typeparam name="T">The source collection type.</typeparam>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the converted values of every token in the source collection.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.AsJEnumerable(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})">
      <summary>
            Returns the input typed as <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" />.
            </summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <returns>The input typed as <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.AsJEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Returns the input typed as <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" />.
            </summary>
      <typeparam name="T">The source collection type.</typeparam>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <returns>The input typed as <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" />.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Linq.IJEnumerable`1">
      <summary>
            Represents a collection of <see cref="T:Newtonsoft.Json.Linq.JToken" /> objects.
            </summary>
      <typeparam name="T">The type of token.</typeparam>
    </member>
    <member name="P:Newtonsoft.Json.Linq.IJEnumerable`1.Item(System.Object)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.
            </summary>
      <value>
      </value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JArray">
      <summary>
            Represents a JSON array.
            </summary>
      <example>
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParseArray" title="Parsing a JSON Array from Text" />
      </example>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.WriteToAsync(Newtonsoft.Json.JsonWriter,System.Threading.CancellationToken,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" /> asynchronously.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests.</param>
      <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous write operation.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.LoadAsync(Newtonsoft.Json.JsonReader,System.Threading.CancellationToken)">
      <summary>
            Asynchronously loads a <see cref="T:Newtonsoft.Json.Linq.JArray" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />. 
            </summary>
      <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JArray" />.
            If this is <c>null</c>, default load settings will be used.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> representing the asynchronous load. The <see cref="P:System.Threading.Tasks.Task`1.Result" /> property contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.LoadAsync(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Linq.JsonLoadSettings,System.Threading.CancellationToken)">
      <summary>
            Asynchronously loads a <see cref="T:Newtonsoft.Json.Linq.JArray" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />. 
            </summary>
      <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JArray" />.</param>
      <param name="settings">The <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings" /> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> representing the asynchronous load. The <see cref="P:System.Threading.Tasks.Task`1.Result" /> property contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JArray" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.#ctor(Newtonsoft.Json.Linq.JArray)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JArray" /> class from another <see cref="T:Newtonsoft.Json.Linq.JArray" /> object.
            </summary>
      <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JArray" /> object to copy from.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.#ctor(System.Object[])">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JArray" /> class with the specified content.
            </summary>
      <param name="content">The contents of the array.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.#ctor(System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JArray" /> class with the specified content.
            </summary>
      <param name="content">The contents of the array.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.Load(Newtonsoft.Json.JsonReader)">
      <summary>
            Loads an <see cref="T:Newtonsoft.Json.Linq.JArray" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />. 
            </summary>
      <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JArray" />.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JArray" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.Load(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Linq.JsonLoadSettings)">
      <summary>
            Loads an <see cref="T:Newtonsoft.Json.Linq.JArray" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />. 
            </summary>
      <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JArray" />.</param>
      <param name="settings">The <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings" /> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JArray" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.Parse(System.String)">
      <summary>
            Load a <see cref="T:Newtonsoft.Json.Linq.JArray" /> from a string that contains JSON.
            </summary>
      <param name="json">A <see cref="T:System.String" /> that contains JSON.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JArray" /> populated from the string that contains JSON.</returns>
      <example>
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParseArray" title="Parsing a JSON Array from Text" />
      </example>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.Parse(System.String,Newtonsoft.Json.Linq.JsonLoadSettings)">
      <summary>
            Load a <see cref="T:Newtonsoft.Json.Linq.JArray" /> from a string that contains JSON.
            </summary>
      <param name="json">A <see cref="T:System.String" /> that contains JSON.</param>
      <param name="settings">The <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings" /> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JArray" /> populated from the string that contains JSON.</returns>
      <example>
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParseArray" title="Parsing a JSON Array from Text" />
      </example>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.FromObject(System.Object)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JArray" /> from an object.
            </summary>
      <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JArray" />.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JArray" /> with the values of the specified object.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.FromObject(System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JArray" /> from an object.
            </summary>
      <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JArray" />.</param>
      <param name="jsonSerializer">The <see cref="T:Newtonsoft.Json.JsonSerializer" /> that will be used to read the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JArray" /> with the values of the specified object.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
      <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.IndexOf(Newtonsoft.Json.Linq.JToken)">
      <summary>
            Determines the index of a specific item in the <see cref="T:Newtonsoft.Json.Linq.JArray" />.
            </summary>
      <param name="item">The object to locate in the <see cref="T:Newtonsoft.Json.Linq.JArray" />.</param>
      <returns>
            The index of <paramref name="item" /> if found in the list; otherwise, -1.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.Insert(System.Int32,Newtonsoft.Json.Linq.JToken)">
      <summary>
            Inserts an item to the <see cref="T:Newtonsoft.Json.Linq.JArray" /> at the specified index.
            </summary>
      <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
      <param name="item">The object to insert into the <see cref="T:Newtonsoft.Json.Linq.JArray" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:Newtonsoft.Json.Linq.JArray" />.
            </exception>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.RemoveAt(System.Int32)">
      <summary>
            Removes the <see cref="T:Newtonsoft.Json.Linq.JArray" /> item at the specified index.
            </summary>
      <param name="index">The zero-based index of the item to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:Newtonsoft.Json.Linq.JArray" />.
            </exception>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.Add(Newtonsoft.Json.Linq.JToken)">
      <summary>
            Adds an item to the <see cref="T:Newtonsoft.Json.Linq.JArray" />.
            </summary>
      <param name="item">The object to add to the <see cref="T:Newtonsoft.Json.Linq.JArray" />.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.Clear">
      <summary>
            Removes all items from the <see cref="T:Newtonsoft.Json.Linq.JArray" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.Contains(Newtonsoft.Json.Linq.JToken)">
      <summary>
            Determines whether the <see cref="T:Newtonsoft.Json.Linq.JArray" /> contains a specific value.
            </summary>
      <param name="item">The object to locate in the <see cref="T:Newtonsoft.Json.Linq.JArray" />.</param>
      <returns>
        <c>true</c> if <paramref name="item" /> is found in the <see cref="T:Newtonsoft.Json.Linq.JArray" />; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.CopyTo(Newtonsoft.Json.Linq.JToken[],System.Int32)">
      <summary>
            Copies the elements of the <see cref="T:Newtonsoft.Json.Linq.JArray" /> to an array, starting at a particular array index.
            </summary>
      <param name="array">The array.</param>
      <param name="arrayIndex">Index of the array.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.Remove(Newtonsoft.Json.Linq.JToken)">
      <summary>
            Removes the first occurrence of a specific object from the <see cref="T:Newtonsoft.Json.Linq.JArray" />.
            </summary>
      <param name="item">The object to remove from the <see cref="T:Newtonsoft.Json.Linq.JArray" />.</param>
      <returns>
        <c>true</c> if <paramref name="item" /> was successfully removed from the <see cref="T:Newtonsoft.Json.Linq.JArray" />; otherwise, <c>false</c>. This method also returns <c>false</c> if <paramref name="item" /> is not found in the original <see cref="T:Newtonsoft.Json.Linq.JArray" />.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JArray.ChildrenTokens">
      <summary>
            Gets the container's children tokens.
            </summary>
      <value>The container's children tokens.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JArray.Type">
      <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <value>The type.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JArray.Item(System.Object)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JArray.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> at the specified index.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JArray.IsReadOnly">
      <summary>
            Gets a value indicating whether the <see cref="T:Newtonsoft.Json.Linq.JArray" /> is read-only.
            </summary>
      <returns>
        <c>true</c> if the <see cref="T:Newtonsoft.Json.Linq.JArray" /> is read-only; otherwise, <c>false</c>.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JConstructor">
      <summary>
            Represents a JSON constructor.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JConstructor.WriteToAsync(Newtonsoft.Json.JsonWriter,System.Threading.CancellationToken,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" /> asynchronously.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests.</param>
      <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous write operation.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JConstructor.LoadAsync(Newtonsoft.Json.JsonReader,System.Threading.CancellationToken)">
      <summary>
            Asynchronously loads a <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
      <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" />.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>
            A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous load. The <see cref="P:System.Threading.Tasks.Task`1.Result" />
            property returns a <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JConstructor.LoadAsync(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Linq.JsonLoadSettings,System.Threading.CancellationToken)">
      <summary>
            Asynchronously loads a <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
      <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" />.</param>
      <param name="settings">The <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings" /> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>
            A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous load. The <see cref="P:System.Threading.Tasks.Task`1.Result" />
            property returns a <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor(Newtonsoft.Json.Linq.JConstructor)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> class from another <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> object.
            </summary>
      <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> object to copy from.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor(System.String,System.Object[])">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> class with the specified name and content.
            </summary>
      <param name="name">The constructor name.</param>
      <param name="content">The contents of the constructor.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor(System.String,System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> class with the specified name and content.
            </summary>
      <param name="name">The constructor name.</param>
      <param name="content">The contents of the constructor.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> class with the specified name.
            </summary>
      <param name="name">The constructor name.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JConstructor.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
      <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JConstructor.Load(Newtonsoft.Json.JsonReader)">
      <summary>
            Loads a <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
      <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" />.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JConstructor.Load(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Linq.JsonLoadSettings)">
      <summary>
            Loads a <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
      <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" />.</param>
      <param name="settings">The <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings" /> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JConstructor.ChildrenTokens">
      <summary>
            Gets the container's children tokens.
            </summary>
      <value>The container's children tokens.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JConstructor.Name">
      <summary>
            Gets or sets the name of this constructor.
            </summary>
      <value>The constructor name.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JConstructor.Type">
      <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <value>The type.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JConstructor.Item(System.Object)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.</value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JContainer">
      <summary>
            Represents a token that can contain other tokens.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.OnAddingNew(System.ComponentModel.AddingNewEventArgs)">
      <summary>
            Raises the <see cref="E:Newtonsoft.Json.Linq.JContainer.AddingNew" /> event.
            </summary>
      <param name="e">The <see cref="T:System.ComponentModel.AddingNewEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
      <summary>
            Raises the <see cref="E:Newtonsoft.Json.Linq.JContainer.ListChanged" /> event.
            </summary>
      <param name="e">The <see cref="T:System.ComponentModel.ListChangedEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <summary>
            Raises the <see cref="E:Newtonsoft.Json.Linq.JContainer.CollectionChanged" /> event.
            </summary>
      <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.Children">
      <summary>
            Returns a collection of the child tokens of this token, in document order.
            </summary>
      <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the child tokens of this <see cref="T:Newtonsoft.Json.Linq.JToken" />, in document order.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.Values``1">
      <summary>
            Returns a collection of the child values of this token, in document order.
            </summary>
      <typeparam name="T">The type to convert the values to.</typeparam>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing the child values of this <see cref="T:Newtonsoft.Json.Linq.JToken" />, in document order.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.Descendants">
      <summary>
            Returns a collection of the descendant tokens for this token in document order.
            </summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the descendant tokens of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.DescendantsAndSelf">
      <summary>
            Returns a collection of the tokens that contain this token, and all descendant tokens of this token, in document order.
            </summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing this token, and all the descendant tokens of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.Add(System.Object)">
      <summary>
            Adds the specified content as children of this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="content">The content to be added.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.AddFirst(System.Object)">
      <summary>
            Adds the specified content as the first children of this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="content">The content to be added.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.CreateWriter">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.JsonWriter" /> that can be used to add tokens to the <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <returns>A <see cref="T:Newtonsoft.Json.JsonWriter" /> that is ready to have content written to it.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.ReplaceAll(System.Object)">
      <summary>
            Replaces the child nodes of this token with the specified content.
            </summary>
      <param name="content">The content.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.RemoveAll">
      <summary>
            Removes the child nodes from this token.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.Merge(System.Object)">
      <summary>
            Merge the specified content into this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="content">The content to be merged.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.Merge(System.Object,Newtonsoft.Json.Linq.JsonMergeSettings)">
      <summary>
            Merge the specified content into this <see cref="T:Newtonsoft.Json.Linq.JToken" /> using <see cref="T:Newtonsoft.Json.Linq.JsonMergeSettings" />.
            </summary>
      <param name="content">The content to be merged.</param>
      <param name="settings">The <see cref="T:Newtonsoft.Json.Linq.JsonMergeSettings" /> used to merge the content.</param>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JContainer.ChildrenTokens">
      <summary>
            Gets the container's children tokens.
            </summary>
      <value>The container's children tokens.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JContainer.HasValues">
      <summary>
            Gets a value indicating whether this token has child tokens.
            </summary>
      <value>
        <c>true</c> if this token has child values; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JContainer.First">
      <summary>
            Get the first child token of this token.
            </summary>
      <value>
            A <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the first child token of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JContainer.Last">
      <summary>
            Get the last child token of this token.
            </summary>
      <value>
            A <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the last child token of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JContainer.Count">
      <summary>
            Gets the count of child JSON tokens.
            </summary>
      <value>The count of child JSON tokens.</value>
    </member>
    <member name="E:Newtonsoft.Json.Linq.JContainer.ListChanged">
      <summary>
            Occurs when the list changes or an item in the list changes.
            </summary>
    </member>
    <member name="E:Newtonsoft.Json.Linq.JContainer.AddingNew">
      <summary>
            Occurs before an item is added to the collection.
            </summary>
    </member>
    <member name="E:Newtonsoft.Json.Linq.JContainer.CollectionChanged">
      <summary>
            Occurs when the items list of the collection has changed, or the collection is reset.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JEnumerable`1">
      <summary>
            Represents a collection of <see cref="T:Newtonsoft.Json.Linq.JToken" /> objects.
            </summary>
      <typeparam name="T">The type of token.</typeparam>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JEnumerable`1.Empty">
      <summary>
            An empty collection of <see cref="T:Newtonsoft.Json.Linq.JToken" /> objects.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1" /> struct.
            </summary>
      <param name="enumerable">The enumerable.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.GetEnumerator">
      <summary>
            Returns an enumerator that can be used to iterate through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.Equals(Newtonsoft.Json.Linq.JEnumerable{`0})">
      <summary>
            Determines whether the specified <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1" /> is equal to this instance.
            </summary>
      <param name="other">The <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1" /> to compare with this instance.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
      <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JEnumerable`1.Item(System.Object)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.
            </summary>
      <value>
      </value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JObject">
      <summary>
            Represents a JSON object.
            </summary>
      <example>
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParse" title="Parsing a JSON Object from Text" />
      </example>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.WriteToAsync(Newtonsoft.Json.JsonWriter,System.Threading.CancellationToken,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" /> asynchronously.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests.</param>
      <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous write operation.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.LoadAsync(Newtonsoft.Json.JsonReader,System.Threading.CancellationToken)">
      <summary>
            Asynchronously loads a <see cref="T:Newtonsoft.Json.Linq.JObject" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
      <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JObject" />.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>
            A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous load. The <see cref="P:System.Threading.Tasks.Task`1.Result" />
            property returns a <see cref="T:Newtonsoft.Json.Linq.JObject" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.LoadAsync(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Linq.JsonLoadSettings,System.Threading.CancellationToken)">
      <summary>
            Asynchronously loads a <see cref="T:Newtonsoft.Json.Linq.JObject" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
      <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JObject" />.</param>
      <param name="settings">The <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings" /> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>
            A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous load. The <see cref="P:System.Threading.Tasks.Task`1.Result" />
            property returns a <see cref="T:Newtonsoft.Json.Linq.JObject" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JObject" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.#ctor(Newtonsoft.Json.Linq.JObject)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JObject" /> class from another <see cref="T:Newtonsoft.Json.Linq.JObject" /> object.
            </summary>
      <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JObject" /> object to copy from.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.#ctor(System.Object[])">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JObject" /> class with the specified content.
            </summary>
      <param name="content">The contents of the object.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.#ctor(System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JObject" /> class with the specified content.
            </summary>
      <param name="content">The contents of the object.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.Properties">
      <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JProperty" /> of this object's properties.
            </summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JProperty" /> of this object's properties.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.Property(System.String)">
      <summary>
            Gets a <see cref="T:Newtonsoft.Json.Linq.JProperty" /> the specified name.
            </summary>
      <param name="name">The property name.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JProperty" /> with the specified name or <c>null</c>.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.PropertyValues">
      <summary>
            Gets a <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> of this object's property values.
            </summary>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> of this object's property values.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.Load(Newtonsoft.Json.JsonReader)">
      <summary>
            Loads a <see cref="T:Newtonsoft.Json.Linq.JObject" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
      <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JObject" />.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JObject" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
      <exception cref="T:Newtonsoft.Json.JsonReaderException">
        <paramref name="reader" /> is not valid JSON.
            </exception>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.Load(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Linq.JsonLoadSettings)">
      <summary>
            Loads a <see cref="T:Newtonsoft.Json.Linq.JObject" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
      <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JObject" />.</param>
      <param name="settings">The <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings" /> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JObject" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
      <exception cref="T:Newtonsoft.Json.JsonReaderException">
        <paramref name="reader" /> is not valid JSON.
            </exception>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.Parse(System.String)">
      <summary>
            Load a <see cref="T:Newtonsoft.Json.Linq.JObject" /> from a string that contains JSON.
            </summary>
      <param name="json">A <see cref="T:System.String" /> that contains JSON.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JObject" /> populated from the string that contains JSON.</returns>
      <exception cref="T:Newtonsoft.Json.JsonReaderException">
        <paramref name="json" /> is not valid JSON.
            </exception>
      <example>
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParse" title="Parsing a JSON Object from Text" />
      </example>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.Parse(System.String,Newtonsoft.Json.Linq.JsonLoadSettings)">
      <summary>
            Load a <see cref="T:Newtonsoft.Json.Linq.JObject" /> from a string that contains JSON.
            </summary>
      <param name="json">A <see cref="T:System.String" /> that contains JSON.</param>
      <param name="settings">The <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings" /> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JObject" /> populated from the string that contains JSON.</returns>
      <exception cref="T:Newtonsoft.Json.JsonReaderException">
        <paramref name="json" /> is not valid JSON.
            </exception>
      <example>
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParse" title="Parsing a JSON Object from Text" />
      </example>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.FromObject(System.Object)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JObject" /> from an object.
            </summary>
      <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JObject" />.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JObject" /> with the values of the specified object.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.FromObject(System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JObject" /> from an object.
            </summary>
      <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JObject" />.</param>
      <param name="jsonSerializer">The <see cref="T:Newtonsoft.Json.JsonSerializer" /> that will be used to read the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JObject" /> with the values of the specified object.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
      <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.GetValue(System.String)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified property name.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified property name.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.GetValue(System.String,System.StringComparison)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified property name.
            The exact property name will be searched for first and if no matching property is found then
            the <see cref="T:System.StringComparison" /> will be used to match a property.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <param name="comparison">One of the enumeration values that specifies how the strings will be compared.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified property name.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.TryGetValue(System.String,System.StringComparison,Newtonsoft.Json.Linq.JToken@)">
      <summary>
            Tries to get the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified property name.
            The exact property name will be searched for first and if no matching property is found then
            the <see cref="T:System.StringComparison" /> will be used to match a property.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <param name="value">The value.</param>
      <param name="comparison">One of the enumeration values that specifies how the strings will be compared.</param>
      <returns>
        <c>true</c> if a value was successfully retrieved; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.Add(System.String,Newtonsoft.Json.Linq.JToken)">
      <summary>
            Adds the specified property name.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.ContainsKey(System.String)">
      <summary>
            Determines whether the JSON object has the specified property name.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <returns>
        <c>true</c> if the JSON object has the specified property name; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.Remove(System.String)">
      <summary>
            Removes the property with the specified name.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <returns>
        <c>true</c> if item was successfully removed; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.TryGetValue(System.String,Newtonsoft.Json.Linq.JToken@)">
      <summary>
            Tries to get the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified property name.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <param name="value">The value.</param>
      <returns>
        <c>true</c> if a value was successfully retrieved; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.GetEnumerator">
      <summary>
            Returns an enumerator that can be used to iterate through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.OnPropertyChanged(System.String)">
      <summary>
            Raises the <see cref="E:Newtonsoft.Json.Linq.JObject.PropertyChanged" /> event with the provided arguments.
            </summary>
      <param name="propertyName">Name of the property.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.OnPropertyChanging(System.String)">
      <summary>
            Raises the <see cref="E:Newtonsoft.Json.Linq.JObject.PropertyChanging" /> event with the provided arguments.
            </summary>
      <param name="propertyName">Name of the property.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>
            Returns the <see cref="T:System.Dynamic.DynamicMetaObject" /> responsible for binding operations performed on this object.
            </summary>
      <param name="parameter">The expression tree representation of the runtime value.</param>
      <returns>
            The <see cref="T:System.Dynamic.DynamicMetaObject" /> to bind this object.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JObject.ChildrenTokens">
      <summary>
            Gets the container's children tokens.
            </summary>
      <value>The container's children tokens.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JObject.Type">
      <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <value>The type.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JObject.Item(System.Object)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JObject.Item(System.String)">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified property name.
            </summary>
      <value>
      </value>
    </member>
    <member name="E:Newtonsoft.Json.Linq.JObject.PropertyChanged">
      <summary>
            Occurs when a property value changes.
            </summary>
    </member>
    <member name="E:Newtonsoft.Json.Linq.JObject.PropertyChanging">
      <summary>
            Occurs when a property value is changing.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JProperty">
      <summary>
            Represents a JSON property.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JProperty.WriteToAsync(Newtonsoft.Json.JsonWriter,System.Threading.CancellationToken,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" /> asynchronously.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests.</param>
      <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous write operation.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JProperty.LoadAsync(Newtonsoft.Json.JsonReader,System.Threading.CancellationToken)">
      <summary>
            Asynchronously loads a <see cref="T:Newtonsoft.Json.Linq.JProperty" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
      <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JProperty" />.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> representing the asynchronous creation. The <see cref="P:System.Threading.Tasks.Task`1.Result" />
            property returns a <see cref="T:Newtonsoft.Json.Linq.JProperty" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JProperty.LoadAsync(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Linq.JsonLoadSettings,System.Threading.CancellationToken)">
      <summary>
            Asynchronously loads a <see cref="T:Newtonsoft.Json.Linq.JProperty" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
      <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JProperty" />.</param>
      <param name="settings">The <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings" /> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> representing the asynchronous creation. The <see cref="P:System.Threading.Tasks.Task`1.Result" />
            property returns a <see cref="T:Newtonsoft.Json.Linq.JProperty" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JProperty.#ctor(Newtonsoft.Json.Linq.JProperty)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JProperty" /> class from another <see cref="T:Newtonsoft.Json.Linq.JProperty" /> object.
            </summary>
      <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JProperty" /> object to copy from.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JProperty.#ctor(System.String,System.Object[])">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JProperty" /> class.
            </summary>
      <param name="name">The property name.</param>
      <param name="content">The property content.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JProperty.#ctor(System.String,System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JProperty" /> class.
            </summary>
      <param name="name">The property name.</param>
      <param name="content">The property content.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JProperty.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
      <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JProperty.Load(Newtonsoft.Json.JsonReader)">
      <summary>
            Loads a <see cref="T:Newtonsoft.Json.Linq.JProperty" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
      <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JProperty" />.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JProperty" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JProperty.Load(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Linq.JsonLoadSettings)">
      <summary>
            Loads a <see cref="T:Newtonsoft.Json.Linq.JProperty" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
      <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JProperty" />.</param>
      <param name="settings">The <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings" /> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JProperty" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JProperty.ChildrenTokens">
      <summary>
            Gets the container's children tokens.
            </summary>
      <value>The container's children tokens.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JProperty.Name">
      <summary>
            Gets the property name.
            </summary>
      <value>The property name.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JProperty.Value">
      <summary>
            Gets or sets the property value.
            </summary>
      <value>The property value.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JProperty.Type">
      <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <value>The type.</value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JPropertyDescriptor">
      <summary>
            Represents a view of a <see cref="T:Newtonsoft.Json.Linq.JProperty" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JPropertyDescriptor" /> class.
            </summary>
      <param name="name">The name.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.CanResetValue(System.Object)">
      <summary>
            When overridden in a derived class, returns whether resetting an object changes its value.
            </summary>
      <returns>
        <c>true</c> if resetting the component changes its value; otherwise, <c>false</c>.
            </returns>
      <param name="component">The component to test for reset capability.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.GetValue(System.Object)">
      <summary>
            When overridden in a derived class, gets the current value of the property on a component.
            </summary>
      <returns>
            The value of a property for a given component.
            </returns>
      <param name="component">The component with the property for which to retrieve the value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.ResetValue(System.Object)">
      <summary>
            When overridden in a derived class, resets the value for this property of the component to the default value.
            </summary>
      <param name="component">The component with the property value that is to be reset to the default value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.SetValue(System.Object,System.Object)">
      <summary>
            When overridden in a derived class, sets the value of the component to a different value.
            </summary>
      <param name="component">The component with the property value that is to be set.</param>
      <param name="value">The new value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.ShouldSerializeValue(System.Object)">
      <summary>
            When overridden in a derived class, determines a value indicating whether the value of this property needs to be persisted.
            </summary>
      <returns>
        <c>true</c> if the property should be persisted; otherwise, <c>false</c>.
            </returns>
      <param name="component">The component with the property to be examined for persistence.</param>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JPropertyDescriptor.ComponentType">
      <summary>
            When overridden in a derived class, gets the type of the component this property is bound to.
            </summary>
      <returns>
            A <see cref="T:System.Type" /> that represents the type of component this property is bound to.
            When the <see cref="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)" /> or
            <see cref="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)" />
            methods are invoked, the object specified might be an instance of this type.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JPropertyDescriptor.IsReadOnly">
      <summary>
            When overridden in a derived class, gets a value indicating whether this property is read-only.
            </summary>
      <returns>
        <c>true</c> if the property is read-only; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JPropertyDescriptor.PropertyType">
      <summary>
            When overridden in a derived class, gets the type of the property.
            </summary>
      <returns>
            A <see cref="T:System.Type" /> that represents the type of the property.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JPropertyDescriptor.NameHashCode">
      <summary>
            Gets the hash code for the name of the member.
            </summary>
      <value>
      </value>
      <returns>
            The hash code for the name of the member.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JRaw">
      <summary>
            Represents a raw JSON string.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JRaw.CreateAsync(Newtonsoft.Json.JsonReader,System.Threading.CancellationToken)">
      <summary>
            Asynchronously creates an instance of <see cref="T:Newtonsoft.Json.Linq.JRaw" /> with the content of the reader's current token.
            </summary>
      <param name="reader">The reader.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> representing the asynchronous creation. The <see cref="P:System.Threading.Tasks.Task`1.Result" />
            property returns an instance of <see cref="T:Newtonsoft.Json.Linq.JRaw" /> with the content of the reader's current token.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JRaw.#ctor(Newtonsoft.Json.Linq.JRaw)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JRaw" /> class from another <see cref="T:Newtonsoft.Json.Linq.JRaw" /> object.
            </summary>
      <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JRaw" /> object to copy from.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JRaw.#ctor(System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JRaw" /> class.
            </summary>
      <param name="rawJson">The raw json.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JRaw.Create(Newtonsoft.Json.JsonReader)">
      <summary>
            Creates an instance of <see cref="T:Newtonsoft.Json.Linq.JRaw" /> with the content of the reader's current token.
            </summary>
      <param name="reader">The reader.</param>
      <returns>An instance of <see cref="T:Newtonsoft.Json.Linq.JRaw" /> with the content of the reader's current token.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JsonLoadSettings">
      <summary>
            Specifies the settings used when loading JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JsonLoadSettings.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings" /> class.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JsonLoadSettings.CommentHandling">
      <summary>
            Gets or sets how JSON comments are handled when loading JSON.
            </summary>
      <value>The JSON comment handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JsonLoadSettings.LineInfoHandling">
      <summary>
            Gets or sets how JSON line info is handled when loading JSON.
            </summary>
      <value>The JSON line info handling.</value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JsonMergeSettings">
      <summary>
            Specifies the settings used when merging JSON.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JsonMergeSettings.MergeArrayHandling">
      <summary>
            Gets or sets the method used when merging JSON arrays.
            </summary>
      <value>The method used when merging JSON arrays.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JsonMergeSettings.MergeNullValueHandling">
      <summary>
            Gets or sets how null value properties are merged.
            </summary>
      <value>How null value properties are merged.</value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JToken">
      <summary>
            Represents an abstract JSON token.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.WriteToAsync(Newtonsoft.Json.JsonWriter,System.Threading.CancellationToken,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" /> asynchronously.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests.</param>
      <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous write operation.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.WriteToAsync(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" /> asynchronously.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
      <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous write operation.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.ReadFromAsync(Newtonsoft.Json.JsonReader,System.Threading.CancellationToken)">
      <summary>
            Asynchronously creates a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
      <param name="reader">An <see cref="T:Newtonsoft.Json.JsonReader" /> positioned at the token to read into this <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>
            A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous creation. The
            <see cref="P:System.Threading.Tasks.Task`1.Result" /> property returns a <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains 
            the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.ReadFromAsync(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Linq.JsonLoadSettings,System.Threading.CancellationToken)">
      <summary>
            Asynchronously creates a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
      <param name="reader">An <see cref="T:Newtonsoft.Json.JsonReader" /> positioned at the token to read into this <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
      <param name="settings">The <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings" /> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>
            A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous creation. The
            <see cref="P:System.Threading.Tasks.Task`1.Result" /> property returns a <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains 
            the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.LoadAsync(Newtonsoft.Json.JsonReader,System.Threading.CancellationToken)">
      <summary>
            Asynchronously creates a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
      <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> positioned at the token to read into this <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>
            A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous creation. The <see cref="P:System.Threading.Tasks.Task`1.Result" />
            property returns a <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.LoadAsync(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Linq.JsonLoadSettings,System.Threading.CancellationToken)">
      <summary>
            Asynchronously creates a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
      <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> positioned at the token to read into this <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
      <param name="settings">The <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings" /> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests. The default value is <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <returns>
            A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous creation. The <see cref="P:System.Threading.Tasks.Task`1.Result" />
            property returns a <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.DeepEquals(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Linq.JToken)">
      <summary>
            Compares the values of two tokens, including the values of all descendant tokens.
            </summary>
      <param name="t1">The first <see cref="T:Newtonsoft.Json.Linq.JToken" /> to compare.</param>
      <param name="t2">The second <see cref="T:Newtonsoft.Json.Linq.JToken" /> to compare.</param>
      <returns>
        <c>true</c> if the tokens are equal; otherwise <c>false</c>.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.AddAfterSelf(System.Object)">
      <summary>
            Adds the specified content immediately after this token.
            </summary>
      <param name="content">A content object that contains simple content or a collection of content objects to be added after this token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.AddBeforeSelf(System.Object)">
      <summary>
            Adds the specified content immediately before this token.
            </summary>
      <param name="content">A content object that contains simple content or a collection of content objects to be added before this token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Ancestors">
      <summary>
            Returns a collection of the ancestor tokens of this token.
            </summary>
      <returns>A collection of the ancestor tokens of this token.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.AncestorsAndSelf">
      <summary>
            Returns a collection of tokens that contain this token, and the ancestors of this token.
            </summary>
      <returns>A collection of tokens that contain this token, and the ancestors of this token.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.AfterSelf">
      <summary>
            Returns a collection of the sibling tokens after this token, in document order.
            </summary>
      <returns>A collection of the sibling tokens after this tokens, in document order.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.BeforeSelf">
      <summary>
            Returns a collection of the sibling tokens before this token, in document order.
            </summary>
      <returns>A collection of the sibling tokens before this token, in document order.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Value``1(System.Object)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key converted to the specified type.
            </summary>
      <typeparam name="T">The type to convert the token to.</typeparam>
      <param name="key">The token key.</param>
      <returns>The converted token value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Children">
      <summary>
            Returns a collection of the child tokens of this token, in document order.
            </summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the child tokens of this <see cref="T:Newtonsoft.Json.Linq.JToken" />, in document order.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Children``1">
      <summary>
            Returns a collection of the child tokens of this token, in document order, filtered by the specified type.
            </summary>
      <typeparam name="T">The type to filter the child tokens on.</typeparam>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1" /> containing the child tokens of this <see cref="T:Newtonsoft.Json.Linq.JToken" />, in document order.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Values``1">
      <summary>
            Returns a collection of the child values of this token, in document order.
            </summary>
      <typeparam name="T">The type to convert the values to.</typeparam>
      <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing the child values of this <see cref="T:Newtonsoft.Json.Linq.JToken" />, in document order.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Remove">
      <summary>
            Removes this token from its parent.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Replace(Newtonsoft.Json.Linq.JToken)">
      <summary>
            Replaces this token with the specified token.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
      <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.ToString">
      <summary>
            Returns the indented JSON for this token.
            </summary>
      <returns>
            The indented JSON for this token.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.ToString(Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Returns the JSON for this token using the given formatting and converters.
            </summary>
      <param name="formatting">Indicates how the output should be formatted.</param>
      <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" />s which will be used when writing the token.</param>
      <returns>The JSON for this token using the given formatting and converters.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Boolean">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Boolean" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.DateTimeOffset">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.DateTimeOffset" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Boolean}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Int64">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int64" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.DateTime}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.DateTimeOffset}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Decimal}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Double}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Char}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Char" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Int32">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Int32" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Int16">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Int16" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.UInt16">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.UInt16" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Char">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Char" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Byte">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Byte" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.SByte">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.SByte" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Int32}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" /> .
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Int16}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int16" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.UInt16}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt16" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Byte}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Byte" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.SByte}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.SByte" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.DateTime">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Int64}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int64" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Single}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Single" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Decimal">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Decimal" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.UInt32}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt32" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.UInt64}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt64" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Double">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Double" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Single">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Single" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.String">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.String" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.UInt32">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.UInt32" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.UInt64">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.UInt64" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Byte[]">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Byte" />[].
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Guid">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Guid" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Guid}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Guid" /> .
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.TimeSpan">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.TimeSpan" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.TimeSpan}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" /> of <see cref="T:System.TimeSpan" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Uri">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Uri" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Boolean)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Boolean" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.DateTimeOffset)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.DateTimeOffset" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Byte)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Byte" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Byte})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> of <see cref="T:System.Byte" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.SByte)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.SByte" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.SByte})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> of <see cref="T:System.SByte" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Boolean})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Int64)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int64" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.DateTime})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.DateTimeOffset})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Decimal})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Double})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Int16)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Int16" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.UInt16)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.UInt16" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Int32)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Int32" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int32})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.DateTime)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.DateTime" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int64})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int64" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Single})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> of <see cref="T:System.Single" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Decimal)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Decimal" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int16})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int16" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt16})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt16" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt32})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt32" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt64})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt64" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Double)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Double" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Single)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Single" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.String)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.String" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.UInt32)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.UInt32" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.UInt64)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.UInt64" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Byte[])~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Byte" />[] to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Uri)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Uri" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.TimeSpan)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.TimeSpan" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.TimeSpan})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> of <see cref="T:System.TimeSpan" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Guid)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Guid" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Guid})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> of <see cref="T:System.Guid" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.CreateReader">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.JsonReader" /> for this token.
            </summary>
      <returns>A <see cref="T:Newtonsoft.Json.JsonReader" /> that can be used to read this token and its descendants.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.FromObject(System.Object)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from an object.
            </summary>
      <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the value of the specified object.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.FromObject(System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from an object using the specified <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
      <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
      <param name="jsonSerializer">The <see cref="T:Newtonsoft.Json.JsonSerializer" /> that will be used when reading the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the value of the specified object.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.ToObject``1">
      <summary>
            Creates an instance of the specified .NET type from the <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <typeparam name="T">The object type that the token will be deserialized to.</typeparam>
      <returns>The new object created from the JSON value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.ToObject(System.Type)">
      <summary>
            Creates an instance of the specified .NET type from the <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="objectType">The object type that the token will be deserialized to.</param>
      <returns>The new object created from the JSON value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.ToObject``1(Newtonsoft.Json.JsonSerializer)">
      <summary>
            Creates an instance of the specified .NET type from the <see cref="T:Newtonsoft.Json.Linq.JToken" /> using the specified <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
      <typeparam name="T">The object type that the token will be deserialized to.</typeparam>
      <param name="jsonSerializer">The <see cref="T:Newtonsoft.Json.JsonSerializer" /> that will be used when creating the object.</param>
      <returns>The new object created from the JSON value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.ToObject(System.Type,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Creates an instance of the specified .NET type from the <see cref="T:Newtonsoft.Json.Linq.JToken" /> using the specified <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
      <param name="objectType">The object type that the token will be deserialized to.</param>
      <param name="jsonSerializer">The <see cref="T:Newtonsoft.Json.JsonSerializer" /> that will be used when creating the object.</param>
      <returns>The new object created from the JSON value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.ReadFrom(Newtonsoft.Json.JsonReader)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
      <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> positioned at the token to read into this <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
      <returns>
            A <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.ReadFrom(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Linq.JsonLoadSettings)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
      <param name="reader">An <see cref="T:Newtonsoft.Json.JsonReader" /> positioned at the token to read into this <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
      <param name="settings">The <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings" /> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.</param>
      <returns>
            A <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Parse(System.String)">
      <summary>
            Load a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from a string that contains JSON.
            </summary>
      <param name="json">A <see cref="T:System.String" /> that contains JSON.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JToken" /> populated from the string that contains JSON.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Parse(System.String,Newtonsoft.Json.Linq.JsonLoadSettings)">
      <summary>
            Load a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from a string that contains JSON.
            </summary>
      <param name="json">A <see cref="T:System.String" /> that contains JSON.</param>
      <param name="settings">The <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings" /> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JToken" /> populated from the string that contains JSON.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Load(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Linq.JsonLoadSettings)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
      <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> positioned at the token to read into this <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
      <param name="settings">The <see cref="T:Newtonsoft.Json.Linq.JsonLoadSettings" /> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.</param>
      <returns>
            A <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Load(Newtonsoft.Json.JsonReader)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
      <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> positioned at the token to read into this <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
      <returns>
            A <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.SelectToken(System.String)">
      <summary>
            Selects a <see cref="T:Newtonsoft.Json.Linq.JToken" /> using a JPath expression. Selects the token that matches the object path.
            </summary>
      <param name="path">
            A <see cref="T:System.String" /> that contains a JPath expression.
            </param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JToken" />, or <c>null</c>.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.SelectToken(System.String,System.Boolean)">
      <summary>
            Selects a <see cref="T:Newtonsoft.Json.Linq.JToken" /> using a JPath expression. Selects the token that matches the object path.
            </summary>
      <param name="path">
            A <see cref="T:System.String" /> that contains a JPath expression.
            </param>
      <param name="errorWhenNoMatch">A flag to indicate whether an error should be thrown if no tokens are found when evaluating part of the expression.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JToken" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.SelectTokens(System.String)">
      <summary>
            Selects a collection of elements using a JPath expression.
            </summary>
      <param name="path">
            A <see cref="T:System.String" /> that contains a JPath expression.
            </param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the selected elements.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.SelectTokens(System.String,System.Boolean)">
      <summary>
            Selects a collection of elements using a JPath expression.
            </summary>
      <param name="path">
            A <see cref="T:System.String" /> that contains a JPath expression.
            </param>
      <param name="errorWhenNoMatch">A flag to indicate whether an error should be thrown if no tokens are found when evaluating part of the expression.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the selected elements.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>
            Returns the <see cref="T:System.Dynamic.DynamicMetaObject" /> responsible for binding operations performed on this object.
            </summary>
      <param name="parameter">The expression tree representation of the runtime value.</param>
      <returns>
            The <see cref="T:System.Dynamic.DynamicMetaObject" /> to bind this object.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.DeepClone">
      <summary>
            Creates a new instance of the <see cref="T:Newtonsoft.Json.Linq.JToken" />. All child tokens are recursively cloned.
            </summary>
      <returns>A new instance of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.AddAnnotation(System.Object)">
      <summary>
            Adds an object to the annotation list of this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="annotation">The annotation to add.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Annotation``1">
      <summary>
            Get the first annotation object of the specified type from this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <typeparam name="T">The type of the annotation to retrieve.</typeparam>
      <returns>The first annotation object that matches the specified type, or <c>null</c> if no annotation is of the specified type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Annotation(System.Type)">
      <summary>
            Gets the first annotation object of the specified type from this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="type">The <see cref="P:Newtonsoft.Json.Linq.JToken.Type" /> of the annotation to retrieve.</param>
      <returns>The first annotation object that matches the specified type, or <c>null</c> if no annotation is of the specified type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Annotations``1">
      <summary>
            Gets a collection of annotations of the specified type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <typeparam name="T">The type of the annotations to retrieve.</typeparam>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the annotations for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Annotations(System.Type)">
      <summary>
            Gets a collection of annotations of the specified type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="type">The <see cref="P:Newtonsoft.Json.Linq.JToken.Type" /> of the annotations to retrieve.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Object" /> that contains the annotations that match the specified type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.RemoveAnnotations``1">
      <summary>
            Removes the annotations of the specified type from this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <typeparam name="T">The type of annotations to remove.</typeparam>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.RemoveAnnotations(System.Type)">
      <summary>
            Removes the annotations of the specified type from this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="type">The <see cref="P:Newtonsoft.Json.Linq.JToken.Type" /> of annotations to remove.</param>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.EqualityComparer">
      <summary>
            Gets a comparer that can compare two tokens for value equality.
            </summary>
      <value>A <see cref="T:Newtonsoft.Json.Linq.JTokenEqualityComparer" /> that can compare two nodes for value equality.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Parent">
      <summary>
            Gets or sets the parent.
            </summary>
      <value>The parent.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Root">
      <summary>
            Gets the root <see cref="T:Newtonsoft.Json.Linq.JToken" /> of this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <value>The root <see cref="T:Newtonsoft.Json.Linq.JToken" /> of this <see cref="T:Newtonsoft.Json.Linq.JToken" />.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Type">
      <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <value>The type.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.HasValues">
      <summary>
            Gets a value indicating whether this token has child tokens.
            </summary>
      <value>
        <c>true</c> if this token has child values; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Next">
      <summary>
            Gets the next sibling token of this node.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the next sibling token.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Previous">
      <summary>
            Gets the previous sibling token of this node.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the previous sibling token.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Path">
      <summary>
            Gets the path of the JSON token. 
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Item(System.Object)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.First">
      <summary>
            Get the first child token of this token.
            </summary>
      <value>A <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the first child token of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Last">
      <summary>
            Get the last child token of this token.
            </summary>
      <value>A <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the last child token of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.</value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JTokenEqualityComparer">
      <summary>
            Compares tokens to determine whether they are equal.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenEqualityComparer.Equals(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Linq.JToken)">
      <summary>
            Determines whether the specified objects are equal.
            </summary>
      <param name="x">The first object of type <see cref="T:Newtonsoft.Json.Linq.JToken" /> to compare.</param>
      <param name="y">The second object of type <see cref="T:Newtonsoft.Json.Linq.JToken" /> to compare.</param>
      <returns>
        <c>true</c> if the specified objects are equal; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenEqualityComparer.GetHashCode(Newtonsoft.Json.Linq.JToken)">
      <summary>
            Returns a hash code for the specified object.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> for which a hash code is to be returned.</param>
      <returns>A hash code for the specified object.</returns>
      <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj" /> is a reference type and <paramref name="obj" /> is <c>null</c>.</exception>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JTokenReader">
      <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized JSON data.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenReader.#ctor(Newtonsoft.Json.Linq.JToken)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JTokenReader" /> class.
            </summary>
      <param name="token">The token to read from.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenReader.Read">
      <summary>
            Reads the next JSON token from the underlying <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <returns>
        <c>true</c> if the next token was read successfully; <c>false</c> if there are no more tokens to read.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JTokenReader.CurrentToken">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> at the reader's current position.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JTokenReader.Path">
      <summary>
            Gets the path of the current JSON token. 
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JTokenType">
      <summary>
            Specifies the type of token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.None">
      <summary>
            No token type has been set.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Object">
      <summary>
            A JSON object.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Array">
      <summary>
            A JSON array.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Constructor">
      <summary>
            A JSON constructor.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Property">
      <summary>
            A JSON object property.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Comment">
      <summary>
            A comment.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Integer">
      <summary>
            An integer value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Float">
      <summary>
            A float value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.String">
      <summary>
            A string value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Boolean">
      <summary>
            A boolean value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Null">
      <summary>
            A null value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Undefined">
      <summary>
            An undefined value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Date">
      <summary>
            A date value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Raw">
      <summary>
            A raw JSON value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Bytes">
      <summary>
            A collection of bytes value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Guid">
      <summary>
            A Guid value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Uri">
      <summary>
            A Uri value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.TimeSpan">
      <summary>
            A TimeSpan value.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JTokenWriter">
      <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating JSON data.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.#ctor(Newtonsoft.Json.Linq.JContainer)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JTokenWriter" /> class writing to the given <see cref="T:Newtonsoft.Json.Linq.JContainer" />.
            </summary>
      <param name="container">The container being written to.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JTokenWriter" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.Flush">
      <summary>
            Flushes whatever is in the buffer to the underlying <see cref="T:Newtonsoft.Json.Linq.JContainer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.Close">
      <summary>
            Closes this writer.
            If <see cref="P:Newtonsoft.Json.JsonWriter.AutoCompleteOnClose" /> is set to <c>true</c>, the JSON is auto-completed.
            </summary>
      <remarks>
            Setting <see cref="P:Newtonsoft.Json.JsonWriter.CloseOutput" /> to <c>true</c> has no additional effect, since the underlying <see cref="T:Newtonsoft.Json.Linq.JContainer" /> is a type that cannot be closed.
            </remarks>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteStartObject">
      <summary>
            Writes the beginning of a JSON object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteStartArray">
      <summary>
            Writes the beginning of a JSON array.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteStartConstructor(System.String)">
      <summary>
            Writes the start of a constructor with the given name.
            </summary>
      <param name="name">The name of the constructor.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteEnd(Newtonsoft.Json.JsonToken)">
      <summary>
            Writes the end.
            </summary>
      <param name="token">The token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WritePropertyName(System.String)">
      <summary>
            Writes the property name of a name/value pair on a JSON object.
            </summary>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Object)">
      <summary>
            Writes a <see cref="T:System.Object" /> value.
            An error will be raised if the value cannot be written as a single JSON token.
            </summary>
      <param name="value">The <see cref="T:System.Object" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteNull">
      <summary>
            Writes a null value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteUndefined">
      <summary>
            Writes an undefined value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteRaw(System.String)">
      <summary>
            Writes raw JSON.
            </summary>
      <param name="json">The raw JSON to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteComment(System.String)">
      <summary>
            Writes a comment <c>/*...*/</c> containing the specified text.
            </summary>
      <param name="text">Text to place inside the comment.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.String)">
      <summary>
            Writes a <see cref="T:System.String" /> value.
            </summary>
      <param name="value">The <see cref="T:System.String" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Int32)">
      <summary>
            Writes a <see cref="T:System.Int32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int32" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.UInt32)">
      <summary>
            Writes a <see cref="T:System.UInt32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt32" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Int64)">
      <summary>
            Writes a <see cref="T:System.Int64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int64" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.UInt64)">
      <summary>
            Writes a <see cref="T:System.UInt64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt64" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Single)">
      <summary>
            Writes a <see cref="T:System.Single" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Single" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Double)">
      <summary>
            Writes a <see cref="T:System.Double" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Double" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Boolean)">
      <summary>
            Writes a <see cref="T:System.Boolean" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Boolean" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Int16)">
      <summary>
            Writes a <see cref="T:System.Int16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int16" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.UInt16)">
      <summary>
            Writes a <see cref="T:System.UInt16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt16" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Char)">
      <summary>
            Writes a <see cref="T:System.Char" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Char" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Byte)">
      <summary>
            Writes a <see cref="T:System.Byte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Byte" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.SByte)">
      <summary>
            Writes a <see cref="T:System.SByte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.SByte" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Decimal)">
      <summary>
            Writes a <see cref="T:System.Decimal" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Decimal" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.DateTime)">
      <summary>
            Writes a <see cref="T:System.DateTime" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTime" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.DateTimeOffset)">
      <summary>
            Writes a <see cref="T:System.DateTimeOffset" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTimeOffset" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Byte[])">
      <summary>
            Writes a <see cref="T:System.Byte" />[] value.
            </summary>
      <param name="value">The <see cref="T:System.Byte" />[] value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.TimeSpan)">
      <summary>
            Writes a <see cref="T:System.TimeSpan" /> value.
            </summary>
      <param name="value">The <see cref="T:System.TimeSpan" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Guid)">
      <summary>
            Writes a <see cref="T:System.Guid" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Guid" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Uri)">
      <summary>
            Writes a <see cref="T:System.Uri" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Uri" /> value to write.</param>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JTokenWriter.CurrentToken">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> at the writer's current position.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JTokenWriter.Token">
      <summary>
            Gets the token being written.
            </summary>
      <value>The token being written.</value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JValue">
      <summary>
            Represents a value in JSON (string, integer, date, etc).
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.WriteToAsync(Newtonsoft.Json.JsonWriter,System.Threading.CancellationToken,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" /> asynchronously.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
      <param name="cancellationToken">The token to monitor for cancellation requests.</param>
      <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
      <returns>A <see cref="T:System.Threading.Tasks.Task" /> that represents the asynchronous write operation.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(Newtonsoft.Json.Linq.JValue)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class from another <see cref="T:Newtonsoft.Json.Linq.JValue" /> object.
            </summary>
      <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JValue" /> object to copy from.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Int64)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Decimal)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Char)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.UInt64)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.DateTime)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.DateTimeOffset)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Guid)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Uri)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.TimeSpan)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.CreateComment(System.String)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JValue" /> comment with the given value.
            </summary>
      <param name="value">The value.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JValue" /> comment with the given value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.CreateString(System.String)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JValue" /> string with the given value.
            </summary>
      <param name="value">The value.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JValue" /> string with the given value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.CreateNull">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JValue" /> null value.
            </summary>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JValue" /> null value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.CreateUndefined">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JValue" /> undefined value.
            </summary>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JValue" /> undefined value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
      <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" />s which will be used when writing the token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.Equals(Newtonsoft.Json.Linq.JValue)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <returns>
        <c>true</c> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <c>false</c>.
            </returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.GetHashCode">
      <summary>
            Serves as a hash function for a particular type.
            </summary>
      <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.ToString(System.String)">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <param name="format">The format.</param>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.ToString(System.IFormatProvider)">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <param name="formatProvider">The format provider.</param>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.ToString(System.String,System.IFormatProvider)">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <param name="format">The format.</param>
      <param name="formatProvider">The format provider.</param>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>
            Returns the <see cref="T:System.Dynamic.DynamicMetaObject" /> responsible for binding operations performed on this object.
            </summary>
      <param name="parameter">The expression tree representation of the runtime value.</param>
      <returns>
            The <see cref="T:System.Dynamic.DynamicMetaObject" /> to bind this object.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.CompareTo(Newtonsoft.Json.Linq.JValue)">
      <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
      <param name="obj">An object to compare with this instance.</param>
      <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings:
            Value
            Meaning
            Less than zero
            This instance is less than <paramref name="obj" />.
            Zero
            This instance is equal to <paramref name="obj" />.
            Greater than zero
            This instance is greater than <paramref name="obj" />.
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is not of the same type as this instance.
            </exception>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JValue.HasValues">
      <summary>
            Gets a value indicating whether this token has child tokens.
            </summary>
      <value>
        <c>true</c> if this token has child values; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JValue.Type">
      <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <value>The type.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JValue.Value">
      <summary>
            Gets or sets the underlying token value.
            </summary>
      <value>The underlying token value.</value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.LineInfoHandling">
      <summary>
            Specifies how line information is handled when loading JSON.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.LineInfoHandling.Ignore">
      <summary>
            Ignore line information.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.LineInfoHandling.Load">
      <summary>
            Load line information.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Linq.MergeArrayHandling">
      <summary>
            Specifies how JSON arrays are merged together.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.MergeArrayHandling.Concat">
      <summary>Concatenate arrays.</summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.MergeArrayHandling.Union">
      <summary>Union arrays, skipping items that already exist.</summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.MergeArrayHandling.Replace">
      <summary>Replace all array items.</summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.MergeArrayHandling.Merge">
      <summary>Merge array items together, matched by index.</summary>
    </member>
    <member name="T:Newtonsoft.Json.Linq.MergeNullValueHandling">
      <summary>
            Specifies how null value properties are merged.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.MergeNullValueHandling.Ignore">
      <summary>
            The content's null value properties will be ignored during merging.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.MergeNullValueHandling.Merge">
      <summary>
            The content's null value properties will be merged.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Converters.BinaryConverter">
      <summary>
            Converts a binary value to and from a base 64 string value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.BinaryConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.BinaryConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.BinaryConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.BsonObjectIdConverter">
      <summary>
            Converts a <see cref="T:Newtonsoft.Json.Bson.BsonObjectId" /> to and from JSON and BSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.BsonObjectIdConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.BsonObjectIdConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.BsonObjectIdConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.CustomCreationConverter`1">
      <summary>
            Creates a custom object.
            </summary>
      <typeparam name="T">The object type to convert.</typeparam>
    </member>
    <member name="M:Newtonsoft.Json.Converters.CustomCreationConverter`1.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.CustomCreationConverter`1.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.CustomCreationConverter`1.Create(System.Type)">
      <summary>
            Creates an object which will then be populated by the serializer.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>The created object.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.CustomCreationConverter`1.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Converters.CustomCreationConverter`1.CanWrite">
      <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON.
            </summary>
      <value>
        <c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:Newtonsoft.Json.Converters.DataSetConverter">
      <summary>
            Converts a <see cref="T:System.Data.DataSet" /> to and from JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DataSetConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DataSetConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DataSetConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified value type.
            </summary>
      <param name="valueType">Type of the value.</param>
      <returns>
        <c>true</c> if this instance can convert the specified value type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.DataTableConverter">
      <summary>
            Converts a <see cref="T:System.Data.DataTable" /> to and from JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DataTableConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DataTableConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DataTableConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified value type.
            </summary>
      <param name="valueType">Type of the value.</param>
      <returns>
        <c>true</c> if this instance can convert the specified value type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.DateTimeConverterBase">
      <summary>
            Provides a base class for converting a <see cref="T:System.DateTime" /> to and from JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DateTimeConverterBase.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.DiscriminatedUnionConverter">
      <summary>
            Converts a F# discriminated union type to and from JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DiscriminatedUnionConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DiscriminatedUnionConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DiscriminatedUnionConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.EntityKeyMemberConverter">
      <summary>
            Converts an Entity Framework <see cref="T:System.Data.EntityKeyMember" /> to and from JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.EntityKeyMemberConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.EntityKeyMemberConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.EntityKeyMemberConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.ExpandoObjectConverter">
      <summary>
            Converts an <see cref="T:System.Dynamic.ExpandoObject" /> to and from JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.ExpandoObjectConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.ExpandoObjectConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.ExpandoObjectConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Converters.ExpandoObjectConverter.CanWrite">
      <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON.
            </summary>
      <value>
        <c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:Newtonsoft.Json.Converters.IsoDateTimeConverter">
      <summary>
            Converts a <see cref="T:System.DateTime" /> to and from the ISO 8601 date format (e.g. <c>"2008-04-12T12:53Z"</c>).
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.IsoDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.IsoDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="P:Newtonsoft.Json.Converters.IsoDateTimeConverter.DateTimeStyles">
      <summary>
            Gets or sets the date time styles used when converting a date to and from JSON.
            </summary>
      <value>The date time styles used when converting a date to and from JSON.</value>
    </member>
    <member name="P:Newtonsoft.Json.Converters.IsoDateTimeConverter.DateTimeFormat">
      <summary>
            Gets or sets the date time format used when converting a date to and from JSON.
            </summary>
      <value>The date time format used when converting a date to and from JSON.</value>
    </member>
    <member name="P:Newtonsoft.Json.Converters.IsoDateTimeConverter.Culture">
      <summary>
            Gets or sets the culture used when converting a date to and from JSON.
            </summary>
      <value>The culture used when converting a date to and from JSON.</value>
    </member>
    <member name="T:Newtonsoft.Json.Converters.JavaScriptDateTimeConverter">
      <summary>
            Converts a <see cref="T:System.DateTime" /> to and from a JavaScript <c>Date</c> constructor (e.g. <c>new Date(52231943)</c>).
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing property value of the JSON that is being converted.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.KeyValuePairConverter">
      <summary>
            Converts a <see cref="T:System.Collections.Generic.KeyValuePair`2" /> to and from JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.KeyValuePairConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.KeyValuePairConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.KeyValuePairConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.RegexConverter">
      <summary>
            Converts a <see cref="T:System.Text.RegularExpressions.Regex" /> to and from JSON and BSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.RegexConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.RegexConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.RegexConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.StringEnumConverter">
      <summary>
            Converts an <see cref="T:System.Enum" /> to and from its name string value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Converters.StringEnumConverter" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Converters.StringEnumConverter" /> class.
            </summary>
      <param name="camelCaseText">
        <c>true</c> if the written enum text will be camel case; otherwise, <c>false</c>.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Converters.StringEnumConverter.CamelCaseText">
      <summary>
            Gets or sets a value indicating whether the written enum text should be camel case.
            The default value is <c>false</c>.
            </summary>
      <value>
        <c>true</c> if the written enum text will be camel case; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Newtonsoft.Json.Converters.StringEnumConverter.AllowIntegerValues">
      <summary>
            Gets or sets a value indicating whether integer values are allowed when deserializing.
            The default value is <c>true</c>.
            </summary>
      <value>
        <c>true</c> if integers are allowed when deserializing; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Newtonsoft.Json.Converters.UnixDateTimeConverter">
      <summary>
            Converts a <see cref="T:System.DateTime" /> to and from Unix epoch time
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.UnixDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.UnixDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing property value of the JSON that is being converted.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.VersionConverter">
      <summary>
            Converts a <see cref="T:System.Version" /> to and from a string (e.g. <c>"1.2.3.4"</c>).
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.VersionConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.VersionConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing property value of the JSON that is being converted.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.VersionConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.XmlNodeConverter">
      <summary>
            Converts XML to and from JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.XmlNodeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="serializer">The calling serializer.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.XmlNodeConverter.IsNamespaceAttribute(System.String,System.String@)">
      <summary>
            Checks if the <paramref name="attributeName" /> is a namespace attribute.
            </summary>
      <param name="attributeName">Attribute name to test.</param>
      <param name="prefix">The attribute name prefix if it has one, otherwise an empty string.</param>
      <returns>
        <c>true</c> if attribute name is for a namespace attribute, otherwise <c>false</c>.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.XmlNodeConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified value type.
            </summary>
      <param name="valueType">Type of the value.</param>
      <returns>
        <c>true</c> if this instance can convert the specified value type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeRootElementName">
      <summary>
            Gets or sets the name of the root element to insert when deserializing to XML if the JSON structure has produced multiple root elements.
            </summary>
      <value>The name of the deserialized root element.</value>
    </member>
    <member name="P:Newtonsoft.Json.Converters.XmlNodeConverter.WriteArrayAttribute">
      <summary>
            Gets or sets a flag to indicate whether to write the Json.NET array attribute.
            This attribute helps preserve arrays when converting the written XML back to JSON.
            </summary>
      <value>
        <c>true</c> if the array attribute is written to the XML; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Newtonsoft.Json.Converters.XmlNodeConverter.OmitRootObject">
      <summary>
            Gets or sets a value indicating whether to write the root JSON object.
            </summary>
      <value>
        <c>true</c> if the JSON root object is omitted; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Newtonsoft.Json.Bson.BsonObjectId">
      <summary>
            Represents a BSON Oid (object id).
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonObjectId.#ctor(System.Byte[])">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonObjectId" /> class.
            </summary>
      <param name="value">The Oid value.</param>
    </member>
    <member name="P:Newtonsoft.Json.Bson.BsonObjectId.Value">
      <summary>
            Gets or sets the value of the Oid.
            </summary>
      <value>The value of the Oid.</value>
    </member>
    <member name="T:Newtonsoft.Json.Bson.BsonReader">
      <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized BSON data.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonReader" /> class.
            </summary>
      <param name="stream">The <see cref="T:System.IO.Stream" /> containing the BSON data to read.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.BinaryReader)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonReader" /> class.
            </summary>
      <param name="reader">The <see cref="T:System.IO.BinaryReader" /> containing the BSON data to read.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.Stream,System.Boolean,System.DateTimeKind)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonReader" /> class.
            </summary>
      <param name="stream">The <see cref="T:System.IO.Stream" /> containing the BSON data to read.</param>
      <param name="readRootValueAsArray">if set to <c>true</c> the root object will be read as a JSON array.</param>
      <param name="dateTimeKindHandling">The <see cref="T:System.DateTimeKind" /> used when reading <see cref="T:System.DateTime" /> values from BSON.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.BinaryReader,System.Boolean,System.DateTimeKind)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonReader" /> class.
            </summary>
      <param name="reader">The <see cref="T:System.IO.BinaryReader" /> containing the BSON data to read.</param>
      <param name="readRootValueAsArray">if set to <c>true</c> the root object will be read as a JSON array.</param>
      <param name="dateTimeKindHandling">The <see cref="T:System.DateTimeKind" /> used when reading <see cref="T:System.DateTime" /> values from BSON.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.Read">
      <summary>
            Reads the next JSON token from the underlying <see cref="T:System.IO.Stream" />.
            </summary>
      <returns>
        <c>true</c> if the next token was read successfully; <c>false</c> if there are no more tokens to read.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.Close">
      <summary>
            Changes the reader's state to <see cref="F:Newtonsoft.Json.JsonReader.State.Closed" />.
            If <see cref="P:Newtonsoft.Json.JsonReader.CloseInput" /> is set to <c>true</c>, the underlying <see cref="T:System.IO.Stream" /> is also closed.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Bson.BsonReader.JsonNet35BinaryCompatibility">
      <summary>
            Gets or sets a value indicating whether binary data reading should be compatible with incorrect Json.NET 3.5 written binary.
            </summary>
      <value>
        <c>true</c> if binary data reading will be compatible with incorrect Json.NET 3.5 written binary; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Bson.BsonReader.ReadRootValueAsArray">
      <summary>
            Gets or sets a value indicating whether the root object will be read as a JSON array.
            </summary>
      <value>
        <c>true</c> if the root object will be read as a JSON array; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Bson.BsonReader.DateTimeKindHandling">
      <summary>
            Gets or sets the <see cref="T:System.DateTimeKind" /> used when reading <see cref="T:System.DateTime" /> values from BSON.
            </summary>
      <value>The <see cref="T:System.DateTimeKind" /> used when reading <see cref="T:System.DateTime" /> values from BSON.</value>
    </member>
    <member name="T:Newtonsoft.Json.Bson.BsonWriter">
      <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating BSON data.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonWriter" /> class.
            </summary>
      <param name="stream">The <see cref="T:System.IO.Stream" /> to write to.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.#ctor(System.IO.BinaryWriter)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonWriter" /> class.
            </summary>
      <param name="writer">The <see cref="T:System.IO.BinaryWriter" /> to write to.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.Flush">
      <summary>
            Flushes whatever is in the buffer to the underlying <see cref="T:System.IO.Stream" /> and also flushes the underlying stream.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteEnd(Newtonsoft.Json.JsonToken)">
      <summary>
            Writes the end.
            </summary>
      <param name="token">The token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteComment(System.String)">
      <summary>
            Writes a comment <c>/*...*/</c> containing the specified text.
            </summary>
      <param name="text">Text to place inside the comment.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteStartConstructor(System.String)">
      <summary>
            Writes the start of a constructor with the given name.
            </summary>
      <param name="name">The name of the constructor.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteRaw(System.String)">
      <summary>
            Writes raw JSON.
            </summary>
      <param name="json">The raw JSON to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteRawValue(System.String)">
      <summary>
            Writes raw JSON where a value is expected and updates the writer's state.
            </summary>
      <param name="json">The raw JSON to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteStartArray">
      <summary>
            Writes the beginning of a JSON array.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteStartObject">
      <summary>
            Writes the beginning of a JSON object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WritePropertyName(System.String)">
      <summary>
            Writes the property name of a name/value pair on a JSON object.
            </summary>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.Close">
      <summary>
            Closes this writer.
            If <see cref="P:Newtonsoft.Json.JsonWriter.CloseOutput" /> is set to <c>true</c>, the underlying <see cref="T:System.IO.Stream" /> is also closed.
            If <see cref="P:Newtonsoft.Json.JsonWriter.AutoCompleteOnClose" /> is set to <c>true</c>, the JSON is auto-completed.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Object)">
      <summary>
            Writes a <see cref="T:System.Object" /> value.
            An error will raised if the value cannot be written as a single JSON token.
            </summary>
      <param name="value">The <see cref="T:System.Object" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteNull">
      <summary>
            Writes a null value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteUndefined">
      <summary>
            Writes an undefined value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.String)">
      <summary>
            Writes a <see cref="T:System.String" /> value.
            </summary>
      <param name="value">The <see cref="T:System.String" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Int32)">
      <summary>
            Writes a <see cref="T:System.Int32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int32" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.UInt32)">
      <summary>
            Writes a <see cref="T:System.UInt32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt32" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Int64)">
      <summary>
            Writes a <see cref="T:System.Int64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int64" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.UInt64)">
      <summary>
            Writes a <see cref="T:System.UInt64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt64" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Single)">
      <summary>
            Writes a <see cref="T:System.Single" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Single" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Double)">
      <summary>
            Writes a <see cref="T:System.Double" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Double" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Boolean)">
      <summary>
            Writes a <see cref="T:System.Boolean" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Boolean" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Int16)">
      <summary>
            Writes a <see cref="T:System.Int16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int16" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.UInt16)">
      <summary>
            Writes a <see cref="T:System.UInt16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt16" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Char)">
      <summary>
            Writes a <see cref="T:System.Char" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Char" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Byte)">
      <summary>
            Writes a <see cref="T:System.Byte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Byte" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.SByte)">
      <summary>
            Writes a <see cref="T:System.SByte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.SByte" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Decimal)">
      <summary>
            Writes a <see cref="T:System.Decimal" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Decimal" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.DateTime)">
      <summary>
            Writes a <see cref="T:System.DateTime" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTime" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.DateTimeOffset)">
      <summary>
            Writes a <see cref="T:System.DateTimeOffset" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTimeOffset" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Byte[])">
      <summary>
            Writes a <see cref="T:System.Byte" />[] value.
            </summary>
      <param name="value">The <see cref="T:System.Byte" />[] value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Guid)">
      <summary>
            Writes a <see cref="T:System.Guid" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Guid" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.TimeSpan)">
      <summary>
            Writes a <see cref="T:System.TimeSpan" /> value.
            </summary>
      <param name="value">The <see cref="T:System.TimeSpan" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Uri)">
      <summary>
            Writes a <see cref="T:System.Uri" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Uri" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteObjectId(System.Byte[])">
      <summary>
            Writes a <see cref="T:System.Byte" />[] value that represents a BSON object id.
            </summary>
      <param name="value">The Object ID value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteRegex(System.String,System.String)">
      <summary>
            Writes a BSON regex.
            </summary>
      <param name="pattern">The regex pattern.</param>
      <param name="options">The regex options.</param>
    </member>
    <member name="P:Newtonsoft.Json.Bson.BsonWriter.DateTimeKindHandling">
      <summary>
            Gets or sets the <see cref="T:System.DateTimeKind" /> used when writing <see cref="T:System.DateTime" /> values to BSON.
            When set to <see cref="F:System.DateTimeKind.Unspecified" /> no conversion will occur.
            </summary>
      <value>The <see cref="T:System.DateTimeKind" /> used when writing <see cref="T:System.DateTime" /> values to BSON.</value>
    </member>
    <member name="T:System.Linq.ImmutableArrayExtensions">
      <summary>LINQ extension method overrides that offer greater efficiency for <see cref="T:System.Collections.Immutable.ImmutableArray`1"></see> than the standard LINQ methods  
NuGet package: System.Collections.Immutable (about immutable collections and how to install)</summary>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Select``2(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1})">
      <summary>Projects each element of a sequence into a new form.</summary>
      <param name="immutableArray">The immutable array to select items from.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="T">The type of element contained by the collection.</typeparam>
      <typeparam name="TResult">The type of the result element.</typeparam>
      <returns>An <see cref="System.Collections.Generic.IEnumerable`1"></see> whose elements are the result of invoking the transform function on each element of source.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SelectMany``3(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary>Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1"></see>,             flattens the resulting sequences into one sequence, and invokes a result             selector function on each element therein.</summary>
      <param name="immutableArray">The immutable array.</param>
      <param name="collectionSelector">A transform function to apply to each element of the input sequence.</param>
      <param name="resultSelector">A transform function to apply to each element of the intermediate sequence.</param>
      <typeparam name="TSource">The type of the elements of immutableArray.</typeparam>
      <typeparam name="TCollection">The type of the intermediate elements collected by collectionSelector.</typeparam>
      <typeparam name="TResult">The type of the elements of the resulting sequence.</typeparam>
      <returns>An <see cref="System.Collections.Generic.IEnumerable`1"></see> whose elements are the result             of invoking the one-to-many transform function <paramref name="collectionSelector">collectionSelector</paramref> on each             element of <paramref name="immutableArray">immutableArray</paramref> and then mapping each of those sequence elements and their             corresponding source element to a result element.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Where``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>Filters a sequence of values based on a predicate.</summary>
      <param name="immutableArray">The array to filter.</param>
      <param name="predicate">The condition to use for filtering the array content.</param>
      <typeparam name="T">The type of element contained by the collection.</typeparam>
      <returns>Returns <see cref="System.Collections.Generic.IEnumerable`1"></see> that contains elements that meet the condition.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Gets a value indicating whether the array contains any elements.</summary>
      <param name="immutableArray">The array to check for elements.</param>
      <typeparam name="T">The type of element contained by the collection.</typeparam>
      <returns>true if the array contains an elements; otherwise, false.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>Gets a value indicating whether the array contains any elements that match a specified condition.</summary>
      <param name="immutableArray">The array to check for elements.</param>
      <param name="predicate">The delegate that defines the condition to match to an element.</param>
      <typeparam name="T">The type of element contained by the collection.</typeparam>
      <returns>true if an element matches the specified condition; otherwise, false.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.All``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>Gets a value indicating whether all elements in this array match a given condition.</summary>
      <param name="immutableArray">The array to check for matches.</param>
      <param name="predicate">The predicate.</param>
      <typeparam name="T">The type of element contained by the collection.</typeparam>
      <returns>true if every element of the source sequence passes the test in the specified predicate; otherwise, false.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Immutable.ImmutableArray{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Determines whether two sequences are equal according to an equality comparer.</summary>
      <param name="immutableArray">The array to use for comparison.</param>
      <param name="items">The items to use for comparison.</param>
      <param name="comparer">The comparer to use to check for equality.</param>
      <typeparam name="TDerived">The type of element in the compared array.</typeparam>
      <typeparam name="TBase">The type of element contained by the collection.</typeparam>
      <returns>true to indicate the sequences are equal; otherwise, false.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Determines whether two sequences are equal according to an equality comparer.</summary>
      <param name="immutableArray">The array to use for comparison.</param>
      <param name="items">The items to use for comparison.</param>
      <param name="comparer">The comparer to use to check for equality.</param>
      <typeparam name="TDerived">The type of element in the compared array.</typeparam>
      <typeparam name="TBase">The type of element contained by the collection.</typeparam>
      <returns>true to indicate the sequences are equal; otherwise, false.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SequenceEqual``2(System.Collections.Immutable.ImmutableArray{``1},System.Collections.Immutable.ImmutableArray{``0},System.Func{``1,``1,System.Boolean})">
      <summary>Determines whether two sequences are equal according to an equality comparer.</summary>
      <param name="immutableArray">The array to use for comparison.</param>
      <param name="items">The items to use for comparison.</param>
      <param name="predicate">The comparer to use to check for equality.</param>
      <typeparam name="TDerived">The type of element in the compared array.</typeparam>
      <typeparam name="TBase">The type of element contained by the collection.</typeparam>
      <returns>true to indicate the sequences are equal; otherwise, false.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Aggregate``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``0,``0})">
      <summary>Applies a function to a sequence of elements in a cumulative way.</summary>
      <param name="immutableArray">The collection to apply the function to.</param>
      <param name="func">A function to be invoked on each element, in a cumulative way.</param>
      <typeparam name="T">The type of element contained by the collection.</typeparam>
      <returns>The final value after the cumulative function has been applied to all elements.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Aggregate``2(System.Collections.Immutable.ImmutableArray{``1},``0,System.Func{``0,``1,``0})">
      <summary>Applies a function to a sequence of elements in a cumulative way.</summary>
      <param name="immutableArray">The collection to apply the function to.</param>
      <param name="seed">The initial accumulator value.</param>
      <param name="func">A function to be invoked on each element, in a cumulative way.</param>
      <typeparam name="TAccumulate">The type of the accumulated value.</typeparam>
      <typeparam name="T">The type of element contained by the collection.</typeparam>
      <returns>The final accumulator value.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Aggregate``3(System.Collections.Immutable.ImmutableArray{``2},``0,System.Func{``0,``2,``0},System.Func{``0,``1})">
      <summary>Applies a function to a sequence of elements in a cumulative way.</summary>
      <param name="immutableArray">The collection to apply the function to.</param>
      <param name="seed">The initial accumulator value.</param>
      <param name="func">A function to be invoked on each element, in a cumulative way.</param>
      <param name="resultSelector">
      </param>
      <typeparam name="TAccumulate">The type of the accumulated value.</typeparam>
      <typeparam name="TResult">The type of result returned by the result selector.</typeparam>
      <typeparam name="T">The type of element contained by the collection.</typeparam>
      <returns>The final accumulator value.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ElementAt``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32)">
      <summary>Returns the element at a specified index in the array.</summary>
      <param name="immutableArray">The array to find an element in.</param>
      <param name="index">The index for the element to retrieve.</param>
      <typeparam name="T">The type of element contained by the collection.</typeparam>
      <returns>The item at the specified index.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ElementAtOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32)">
      <summary>Returns the element at a specified index in a sequence or a default value if the index is out of range.</summary>
      <param name="immutableArray">The array to find an element in.</param>
      <param name="index">The index for the element to retrieve.</param>
      <typeparam name="T">The type of element contained by the collection.</typeparam>
      <returns>The item at the specified index, or the default value if the index is not found.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>Returns the first element in a sequence that satisfies a specified condition.</summary>
      <param name="immutableArray">The array to get an item from.</param>
      <param name="predicate">The delegate that defines the conditions of the element to search for.</param>
      <typeparam name="T">The type of element contained by the collection.</typeparam>
      <returns>The first item in the list if it meets the condition specified by <paramref name="predicate">predicate</paramref>.</returns>
      <exception cref="T:System.InvalidOperationException">If the array is empty.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Returns the first element in an array.</summary>
      <param name="immutableArray">The array to get an item from.</param>
      <typeparam name="T">The type of element contained by the collection.</typeparam>
      <returns>The first item in the array.</returns>
      <exception cref="T:System.InvalidOperationException">If the array is empty.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Returns the first element of a sequence, or a default value if the sequence contains no elements.</summary>
      <param name="immutableArray">The array to retrieve items from.</param>
      <typeparam name="T">The type of element contained by the collection.</typeparam>
      <returns>The first item in the list, if found; otherwise the default value for the item type.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>Returns the first element of the sequence that satisfies a condition or a default value if no such element is found.</summary>
      <param name="immutableArray">The array to retrieve elments from.</param>
      <param name="predicate">The delegate that defines the conditions of the element to search for.</param>
      <typeparam name="T">The type of element contained by the collection.</typeparam>
      <returns>The first item in the list, if found; otherwise the default value for the item type.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Returns the last element of the array.</summary>
      <param name="immutableArray">The array to retrieve items from.</param>
      <typeparam name="T">The type of element contained by the array.</typeparam>
      <returns>The last element in the array.</returns>
      <exception cref="T:System.InvalidOperationException">Thrown if the collection is empty.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>Returns the last element of a sequence that satisfies a specified condition.</summary>
      <param name="immutableArray">The array to retrieve elements from.</param>
      <param name="predicate">The delegate that defines the conditions of the element to retrieve.</param>
      <typeparam name="T">The type of element contained by the collection.</typeparam>
      <returns>The last element of the array that satisfies the <paramref name="predicate">predicate</paramref> condition.</returns>
      <exception cref="T:System.InvalidOperationException">Thrown if the collection is empty.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Returns the last element of a sequence, or a default value if the sequence contains no elements.</summary>
      <param name="immutableArray">The array to retrieve items from.</param>
      <typeparam name="T">The type of element contained by the collection.</typeparam>
      <returns>The last element of a sequence, or a default value if the sequence contains no elements.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>Returns the last element of a sequence that satisfies a condition or a default value if no such element is found.</summary>
      <param name="immutableArray">The array to retrieve an element from.</param>
      <param name="predicate">The delegate that defines the conditions of the element to search for.</param>
      <typeparam name="T">The type of element contained by the collection.</typeparam>
      <returns>The last element of a sequence, or a default value if the sequence contains no elements.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Single``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.</summary>
      <param name="immutableArray">The array to retrieve the element from.</param>
      <typeparam name="T">The type of element contained by the collection.</typeparam>
      <returns>The element in the sequence.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Single``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.</summary>
      <param name="immutableArray">
      </param>
      <param name="predicate">
      </param>
      <typeparam name="T">The type of element contained by the collection.</typeparam>
      <returns>Returns <see cref="System.Boolean"></see>.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SingleOrDefault``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Returns the only element of the array, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.</summary>
      <param name="immutableArray">
      </param>
      <typeparam name="T">The type of element contained by the collection.</typeparam>
      <returns>The element in the array, or the default value if the array is empty.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.SingleOrDefault``1(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,System.Boolean})">
      <summary>Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.</summary>
      <param name="immutableArray">The array to get the element from.</param>
      <param name="predicate">The condition the element must satisfy.</param>
      <typeparam name="T">The type of element contained by the collection.</typeparam>
      <returns>The element if it satisfies the specified condition; otherwise the default element.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``2(System.Collections.Immutable.ImmutableArray{``1},System.Func{``1,``0})">
      <summary>Creates a dictionary based on the contents of this array.</summary>
      <param name="immutableArray">The array to create a dictionary from.</param>
      <param name="keySelector">The key selector.</param>
      <typeparam name="TKey">The type of the key.</typeparam>
      <typeparam name="T">The type of element contained by the collection.</typeparam>
      <returns>The newly initialized dictionary.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``3(System.Collections.Immutable.ImmutableArray{``2},System.Func{``2,``0},System.Func{``2,``1})">
      <summary>Creates a dictionary based on the contents of this array.</summary>
      <param name="immutableArray">The array to create a dictionary from.</param>
      <param name="keySelector">The key selector.</param>
      <param name="elementSelector">The element selector.</param>
      <typeparam name="TKey">The type of the key.</typeparam>
      <typeparam name="TElement">The type of the element.</typeparam>
      <typeparam name="T">The type of element contained by the collection.</typeparam>
      <returns>The newly initialized dictionary.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``2(System.Collections.Immutable.ImmutableArray{``1},System.Func{``1,``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Creates a dictionary based on the contents of this array.</summary>
      <param name="immutableArray">The array to create a dictionary from.</param>
      <param name="keySelector">The key selector.</param>
      <param name="comparer">The comparer to initialize the dictionary with.</param>
      <typeparam name="TKey">The type of the key.</typeparam>
      <typeparam name="T">The type of element contained by the collection.</typeparam>
      <returns>The newly initialized dictionary.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToDictionary``3(System.Collections.Immutable.ImmutableArray{``2},System.Func{``2,``0},System.Func{``2,``1},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Creates a dictionary based on the contents of this array.</summary>
      <param name="immutableArray">The array to create a dictionary from.</param>
      <param name="keySelector">The key selector.</param>
      <param name="elementSelector">The element selector.</param>
      <param name="comparer">The comparer to initialize the dictionary with.</param>
      <typeparam name="TKey">The type of the key.</typeparam>
      <typeparam name="TElement">The type of the element.</typeparam>
      <typeparam name="T">The type of element contained by the collection.</typeparam>
      <returns>The newly initialized dictionary.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.ToArray``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Copies the contents of this array to a mutable array.</summary>
      <param name="immutableArray">
      </param>
      <typeparam name="T">The type of element contained by the collection.</typeparam>
      <returns>The newly instantiated array.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.First``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary>Returns the first element in the collection.</summary>
      <param name="builder">The builder to retrieve an item from.</param>
      <typeparam name="T">The type of items in the array.</typeparam>
      <returns>The first item in the list.</returns>
      <exception cref="T:System.InvalidOperationException">If the array is empty.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.FirstOrDefault``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary>Returns the first element in the collection, or the default value if the collection is empty.</summary>
      <param name="builder">The builder to retrieve an element from.</param>
      <typeparam name="T">The type of item in the builder.</typeparam>
      <returns>The first item in the list, if found; otherwise the default value for the item type.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Last``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary>Returns the last element in the collection.</summary>
      <param name="builder">The builder to retrieve elements from.</param>
      <typeparam name="T">The type of item in the builder.</typeparam>
      <returns>The last element in the builder.</returns>
      <exception cref="T:System.InvalidOperationException">Thrown if the collection is empty.</exception>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.LastOrDefault``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary>Returns the last element in the collection, or the default value if the collection is empty.</summary>
      <param name="builder">The builder to retrieve an element from.</param>
      <typeparam name="T">The type of item in the builder.</typeparam>
      <returns>The last element of a sequence, or a default value if the sequence contains no elements.</returns>
    </member>
    <member name="M:System.Linq.ImmutableArrayExtensions.Any``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary>Returns a value indicating whether this collection contains any elements.</summary>
      <param name="builder">The builder to check for matches.</param>
      <typeparam name="T">The type of elements in the array.</typeparam>
      <returns>true if the array builder contains any elements; otherwise, false.</returns>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableDictionary`2">
      <summary>Represents an immutable collection of key/value pairs.  
 NuGet package: System.Collections.Immutable (about immutable collections and how to install)</summary>
      <typeparam name="TKey">The type of keys in the dictionary.</typeparam>
      <typeparam name="TValue">The type of values in the dictionary.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Clear">
      <summary>Retrieves an empty dictionary that has the same ordering and key/value comparison rules as this dictionary instance.</summary>
      <returns>An empty dictionary with equivalent ordering and key/value comparison rules.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Add(`0,`1)">
      <summary>Adds an element with the specified key and value to the dictionary.</summary>
      <param name="key">The key of the element to add.</param>
      <param name="value">The value of the element to add.</param>
      <returns>A new immutable dictionary that contains the additional key/value pair.</returns>
      <exception cref="T:System.ArgumentException">The given key already exists in the dictionary but has a different value.</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>Adds the specified key/value pairs to the dictionary.</summary>
      <param name="pairs">The key/value pairs to add.</param>
      <returns>A new immutable dictionary that contains the additional key/value pairs.</returns>
      <exception cref="T:System.ArgumentException">One of the given keys already exists in the dictionary but has a different value.</exception>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.SetItem(`0,`1)">
      <summary>Sets the specified key and value in the immutable dictionary, possibly overwriting an existing value for the key.</summary>
      <param name="key">The key of the entry to add.</param>
      <param name="value">The key value to set.</param>
      <returns>A new immutable dictionary that contains the specified key/value pair.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>Sets the specified key/value pairs in the immutable dictionary, possibly overwriting existing values for the keys.</summary>
      <param name="items">The key/value pairs to set in the dictionary. If any of the keys already exist in the dictionary, this method will overwrite their previous values.</param>
      <returns>A new immutable dictionary that contains the specified key/value pairs.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Removes the elements with the specified keys from the immutable dictionary.</summary>
      <param name="keys">The keys of the elements to remove.</param>
      <returns>A new immutable dictionary with the specified keys removed; or this instance if the specified keys cannot be found in the dictionary.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Remove(`0)">
      <summary>Removes the element with the specified key from the immutable dictionary.</summary>
      <param name="key">The key of the element to remove.</param>
      <returns>A new immutable dictionary with the specified element removed; or this instance if the specified key cannot be found in the dictionary.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Determines whether the immutable dictionary contains the specified key/value pair.</summary>
      <param name="pair">The key/value pair to locate.</param>
      <returns>true if the specified key/value pair is found in the dictionary; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableDictionary`2.TryGetKey(`0,`0@)">
      <summary>Determines whether this dictionary contains a specified key.</summary>
      <param name="equalKey">The key to search for.</param>
      <param name="actualKey">The matching key located in the dictionary if found, or equalkey if no match is found.</param>
      <returns>true if a match for <paramref name="equalKey">equalKey</paramref> is found; otherwise, false.</returns>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableList`1">
      <summary>Represents a list of elements that cannot be modified.  
 NuGet package: System.Collections.Immutable (about immutable collections and how to install)</summary>
      <typeparam name="T">The type of elements in the list.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Clear">
      <summary>Creates  a list with all the items removed, but with the same sorting and ordering semantics as this list.</summary>
      <returns>An empty list that has the same sorting and ordering semantics as this instance.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:System.Collections.Immutable.IImmutableList`1"></see> that starts at the specified index and contains the specified number of elements.</summary>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Immutable.IImmutableList`1"></see>. This value can be null for reference types.</param>
      <param name="index">The zero-based starting indes of the search. 0 (zero) is valid in an empty list.</param>
      <param name="count">The number of elements in the section to search.</param>
      <param name="equalityComparer">The equality comparer to use to locate item.</param>
      <returns>The zero-based index of the first occurrence of <paramref name="item">item</paramref> within the range of elements in the <see cref="System.Collections.Immutable.IImmutableList`1"></see> that starts at <paramref name="index">index</paramref> and contains <paramref name="count">count</paramref> number of elements if found; otherwise -1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the <see cref="T:System.Collections.Immutable.IImmutableList`1"></see> that contains the specified number of elements and ends at the specified index.</summary>
      <param name="item">The object to locate in the list. The value can be null for reference types.</param>
      <param name="index">The zero-based starting index of the search. 0 (zero) is valid in an empty list.</param>
      <param name="count">The number of elements in the section to search.</param>
      <param name="equalityComparer">The equality comparer to match item.</param>
      <returns>Returns <see cref="System.Int32"></see>.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Add(`0)">
      <summary>Makes a copy of the list, and adds the specified object to the end of the  copied list.</summary>
      <param name="value">The object to add to the list.</param>
      <returns>A new list with the object added, or this list if the object is already in the list.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Makes a copy of the list and adds the specified objects to the end of the copied list.</summary>
      <param name="items">The objects to add to the list.</param>
      <returns>A new list with the elements added, or this list if the elements already exist in the list.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Insert(System.Int32,`0)">
      <summary>Inserts the specified element at the specified index in the immutable list.</summary>
      <param name="index">The zero-based index at which to insert the value.</param>
      <param name="element">The object to insert.</param>
      <returns>A new immutable list that includes the specified element.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>Inserts the specified elements at the specified index in the immutable list.</summary>
      <param name="index">The zero-based index at which the new elements should be inserted.</param>
      <param name="items">The elements to insert.</param>
      <returns>A new immutable list that includes the specified elements.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Removes the first occurrence of a specified object from this immutable list.</summary>
      <param name="value">The object to remove from the list.</param>
      <param name="equalityComparer">The equality comparer to use to locate value.</param>
      <returns>Returns a new list with the specified object removed.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveAll(System.Predicate{`0})">
      <summary>Removes all the elements that match the conditions defined by the specified predicate.</summary>
      <param name="match">The delegate that defines the conditions of the elements to remove.</param>
      <returns>A new immutable list with the elements removed.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Removes the specified object from the list.</summary>
      <param name="items">The objects to remove from the list.</param>
      <param name="equalityComparer">The equality comparer to use to determine if items match any objects in the list.</param>
      <returns>A new immutable list with the specified objects removed, if <paramref name="items">items</paramref> matched objects in the list.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveRange(System.Int32,System.Int32)">
      <summary>Removes a range of elements from the <see cref="T:System.Collections.Immutable.IImmutableList`1"></see>.</summary>
      <param name="index">The zero-based starting index of the range of elements to remove.</param>
      <param name="count">The number of elements to remove.</param>
      <returns>A new immutable list with the elements removed.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.RemoveAt(System.Int32)">
      <summary>Removes the element at the specified index of the immutable list.</summary>
      <param name="index">The index of the element to remove.</param>
      <returns>A new list with the element removed.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.SetItem(System.Int32,`0)">
      <summary>Replaces an element in the list at a given position with the specified element.</summary>
      <param name="index">The position in the list of the element to replace.</param>
      <param name="value">The element to replace the old element with.</param>
      <returns>A new list that contains the new element, even if the element at the specified location is the same as the new element.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableList`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Returns a new list with the first matching element in the list replaced with the specified element.</summary>
      <param name="oldValue">The element to be replaced.</param>
      <param name="newValue">The element to replace the  the first occurrence of oldValue with</param>
      <param name="equalityComparer">The equality comparer to use for matching oldValue.</param>
      <returns>A new list that contains <paramref name="newValue">newValue</paramref>, even if <paramref name="oldvalue">oldvalue</paramref> is the same as <paramref name="newValue">newValue</paramref>.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldValue">oldValue</paramref> does not exist in the list.</exception>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableQueue`1">
      <summary>Represents an immutable first-in, first-out collection of objects.  
 NuGet package: System.Collections.Immutable (about immutable collections and how to install)</summary>
      <typeparam name="T">The type of elements in the queue.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Clear">
      <summary>Returns a new queue with all the elements removed.</summary>
      <returns>An empty immutable queue.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Peek">
      <summary>Returns the element at the beginning of the immutable queue without removing it.</summary>
      <returns>The element at the beginning of the queue.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Enqueue(`0)">
      <summary>Adds an element to the end of the immutable queue, and returns the new queue.</summary>
      <param name="value">The element to add.</param>
      <returns>The new immutable queue with the specified element added.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableQueue`1.Dequeue">
      <summary>Removes the first element in the immutable queue, and returns the new queue.</summary>
      <returns>The new immutable queue with the first element removed. This value is never null.</returns>
    </member>
    <member name="P:System.Collections.Immutable.IImmutableQueue`1.IsEmpty">
      <summary>Gets a value that indicates whether this immutable queue is empty.</summary>
      <returns>true if this queue is empty; otherwise, false.</returns>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableSet`1">
      <summary>Represents a set of elements that can only be modified by creating a new instance of the set.  
 NuGet package: System.Collections.Immutable (about immutable collections and how to install)</summary>
      <typeparam name="T">The type of element stored in the set.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Clear">
      <summary>Retrieves an empty immutable set that has the same sorting and ordering semantics as this instance.</summary>
      <returns>An empty set that has the same sorting and ordering semantics as this instance.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Contains(`0)">
      <summary>Determines whether this immutable set contains a specified element.</summary>
      <param name="value">The element to locate in the set.</param>
      <returns>true if the set contains the specified value; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Add(`0)">
      <summary>Adds the specified element to this immutable set.</summary>
      <param name="value">The element to add.</param>
      <returns>A new set with the element added, or this set if the element is already in the set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Remove(`0)">
      <summary>Removes the specified element from this immutable set.</summary>
      <param name="value">The element to remove.</param>
      <returns>A new set with the specified element removed, or the current set if the element cannot be found in the set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.TryGetValue(`0,`0@)">
      <summary>Determines whether the set contains a specified value.</summary>
      <param name="equalValue">The value to search for.</param>
      <param name="actualValue">The matching value from the set, if found, or equalvalue if there are no matches.</param>
      <returns>true if a matching value was found; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary>Creates an immutable set that contains only elements that exist in this set and the specified set.</summary>
      <param name="other">The collection to compare to the current <see cref="T:System.Collections.Immutable.IImmutableSet`1"></see>.</param>
      <returns>A new immutable set that contains elements that exist in both sets.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Except(System.Collections.Generic.IEnumerable{`0})">
      <summary>Removes the elements in the specified collection from the current immutable set.</summary>
      <param name="other">The collection of items to remove from this set.</param>
      <returns>A new set with the items removed; or the original set if none of the items were in the set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary>Creates an immutable set that contains only elements that are present either in the current set or in the specified collection, but not both.</summary>
      <param name="other">The collection to compare to the current set.</param>
      <returns>A new set that contains the elements that are present only in the current set or in the specified collection, but not both.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Union(System.Collections.Generic.IEnumerable{`0})">
      <summary>Creates a new immutable set that contains all elements that are present in either the current set or in the specified collection.</summary>
      <param name="other">The collection to add elements from.</param>
      <returns>A new immutable set with the items added; or the original set if all the items were already in the set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determines whether the current immutable set and the specified collection contain the same elements.</summary>
      <param name="other">The collection to compare to the current set.</param>
      <returns>true if the sets are equal; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determines whether the current immutable set is a proper (strict) subset of the specified collection.</summary>
      <param name="other">The collection to compare to the current set.</param>
      <returns>true if the current set is a proper subset of the specified collection; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determines whether the current immutable set is a proper (strict) superset of the specified collection.</summary>
      <param name="other">The collection to compare to the current set.</param>
      <returns>true if the current set is a proper superset of the specified collection; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determines whether the current immutable set is a subset of a specified collection.</summary>
      <param name="other">The collection to compare to the current set.</param>
      <returns>true if the current set is a subset of the specified collection; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determines whether the current immutable set is a superset of a specified collection.</summary>
      <param name="other">The collection to compare to the current set.</param>
      <returns>true if the current set is a superset of the specified collection; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determines whether the current immutable set overlaps with the specified collection.</summary>
      <param name="other">The collection to compare to the current set.</param>
      <returns>true if the current set and the specified collection share at least one common element; otherwise, false.</returns>
    </member>
    <member name="T:System.Collections.Immutable.IImmutableStack`1">
      <summary>Represents an immutable last-in-first-out (LIFO) collection.  
 NuGet package: System.Collections.Immutable (about immutable collections and how to install)</summary>
      <typeparam name="T">The type of elements in the stack.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Clear">
      <summary>Removes all objects from the immutable stack.</summary>
      <returns>An empty immutable stack.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Push(`0)">
      <summary>Inserts an element at the top of the immutable stack and returns the new stack.</summary>
      <param name="value">The element to push onto the stack.</param>
      <returns>The new stack.</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Pop">
      <summary>Removes the element at the top of the immutable stack and returns the new stack.</summary>
      <returns>The new stack; never null</returns>
    </member>
    <member name="M:System.Collections.Immutable.IImmutableStack`1.Peek">
      <summary>Returns the element at the top of the immutable stack without removing it.</summary>
      <returns>The element at the top of the stack.</returns>
    </member>
    <member name="P:System.Collections.Immutable.IImmutableStack`1.IsEmpty">
      <summary>Gets a value that indicates whether this immutable stack is empty.</summary>
      <returns>true if this stack is empty; otherwise,false.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet`1">
      <summary>Represents an immutable, unordered hash set.  
 NuGet package: System.Collections.Immutable (about immutable collections and how to install)</summary>
      <typeparam name="T">The type of elements in the hash set.</typeparam>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet`1.Builder">
      <summary>Represents a hash set that mutates with little or no memory allocations and that can produce or build on immutable hash set instances very efficiently.  
 NuGet package: System.Collections.Immutable (about immutable collections and how to install)</summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.GetEnumerator">
      <summary>Returns an enumerator that iterates through the immutable hash set.</summary>
      <returns>An enumerator that can be used to iterate through the set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.ToImmutable">
      <summary>Creates an immutable hash set based on the contents of this instance.</summary>
      <returns>An immutable set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Builder.Clear">
      <summary>Removes all items from the immutable hash set.</summary>
      <exception cref="T:System.NotSupportedException">The hash set is read-only.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Builder.Count">
      <summary>Gets the number of elements contained in the immutable hash set.</summary>
      <returns>The number of elements contained in the immutable hash set.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Builder.KeyComparer">
      <summary>Gets or sets the key comparer.</summary>
      <returns>The key comparer.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet`1.Enumerator">
      <summary>Enumerates the contents of the immutable hash set without allocating any memory.  
 NuGet package: System.Collections.Immutable (about immutable collections and how to install)</summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.MoveNext">
      <summary>Advances the enumerator to the next element of the immutable hash set.</summary>
      <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the hash set.</returns>
      <exception cref="T:System.InvalidOperationException">The hash set was modified after the enumerator was created.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.Reset">
      <summary>Sets the enumerator to its initial position, which is before the first element in the hash set.</summary>
      <exception cref="T:System.InvalidOperationException">The hash set was modified after the enumerator was created.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.Dispose">
      <summary>Releases the resources used by the current instance of the <see cref="T:System.Collections.Immutable.ImmutableHashSet`1.Enumerator"></see> class.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Enumerator.Current">
      <summary>Gets the element at the current position of the enumerator.</summary>
      <returns>The element at the current position of the enumerator.</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableHashSet`1.Empty">
      <summary>Gets an immutable hash set for this type that uses the default <see cref="T:System.Collections.Generic.IEqualityComparer`1"></see>.</summary>
      <returns>
      </returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Clear">
      <summary>Retrieves an empty immutable hash set that has the same sorting and ordering semantics as this instance.</summary>
      <returns>An empty hash set that has the same sorting and ordering semantics as this instance.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.ToBuilder">
      <summary>Creates an immutable hash set that has the same contents as this set and can be efficiently mutated across multiple operations by using standard mutable interfaces.</summary>
      <returns>A set with the same contents as this set that can be efficiently mutated across multiple operations by using standard mutable interfaces.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Add(`0)">
      <summary>Adds the specified element to the hash set.</summary>
      <param name="item">The element to add to the set.</param>
      <returns>A hash set that contains the added value and any values previously held by the  <see cref="System.Collections.Immutable.ImmutableHashSet`1"></see> object.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Remove(`0)">
      <summary>Removes the specified element from this immutable hash set.</summary>
      <param name="item">The element to remove.</param>
      <returns>A new set with the specified element removed, or the current set if the element cannot be found in the set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.TryGetValue(`0,`0@)">
      <summary>Searches the set for a given value and returns the equal value it finds, if any.</summary>
      <param name="equalValue">The value to search for.</param>
      <param name="actualValue">The value from the set that the search found, or the original value if the search yielded no match.</param>
      <returns>A value indicating whether the search was successful.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Union(System.Collections.Generic.IEnumerable{`0})">
      <summary>Creates a new immutable hash set that contains all elements that are present in either the current set or in the specified collection.</summary>
      <param name="other">The collection to add elements from.</param>
      <returns>A new immutable hash set with the items added; or the original set if all the items were already in the set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary>Creates an immutable hash set that contains elements that exist in both this set and the specified set.</summary>
      <param name="other">The collection to compare to the current set.</param>
      <returns>A new immutable set that contains any elements that exist in both sets.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Except(System.Collections.Generic.IEnumerable{`0})">
      <summary>Removes the elements in the specified collection from the current immutable hash set.</summary>
      <param name="other">The collection of items to remove from this set.</param>
      <returns>A new set with the items removed; or the original set if none of the items were in the set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary>Creates an immutable hash set that contains only elements that are present either in the current set or in the specified collection, but not both.</summary>
      <param name="other">The collection to compare to the current set.</param>
      <returns>A new set that contains the elements that are present only in the current set or in the specified collection, but not both.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determines whether the current immutable hash set and the specified collection contain the same elements.</summary>
      <param name="other">The collection to compare to the current set.</param>
      <returns>true if the sets are equal; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determines whether the current immutable hash set is a proper (strict) subset of a specified collection.</summary>
      <param name="other">The collection to compare to the current set.</param>
      <returns>true if the current set is a proper subset of the specified collection; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determines whether the current immutable hash set is a proper (strict) superset of a specified collection.</summary>
      <param name="other">The collection to compare to the current set.</param>
      <returns>true if the current set is a proper superset of the specified collection; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determines whether the current immutable hash set is a subset of a specified collection.</summary>
      <param name="other">The collection to compare to the current set.</param>
      <returns>true if the current set is a subset of the specified collection; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determines whether the current immutable hash set is a superset of a specified collection.</summary>
      <param name="other">The collection to compare to the current set.</param>
      <returns>true if the current set is a superset of the specified collection; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determines whether the current immutable hash set overlaps with the specified collection.</summary>
      <param name="other">The collection to compare to the current set.</param>
      <returns>true if the current set and the specified collection share at least one common element; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.Contains(`0)">
      <summary>Determines whether this immutable hash set contains the specified element.</summary>
      <param name="item">The object to locate in the immutable hash set.</param>
      <returns>true if <paramref name="item">item</paramref> is found in the <see cref="System.Collections.Immutable.ImmutableHashSet`1"></see>; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.WithComparer(System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Gets an instance of the immutable hash set that uses the specified equality comparer for its search methods.</summary>
      <param name="equalityComparer">The equality comparer to use.</param>
      <returns>An instance of this immutable hash set that uses the given comparer.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet`1.GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.Count">
      <summary>Gets the number of elements in the immutable hash set.</summary>
      <returns>The number of elements in the hash set.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.IsEmpty">
      <summary>Gets a value that indicates whether the current immutable hash set is empty.</summary>
      <returns>true if this instance is empty; otherwise, false.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableHashSet`1.KeyComparer">
      <summary>Gets the object that is used to obtain hash codes for the keys and to check the equality of values in the immutable hash set.</summary>
      <returns>The comparer used to obtain hash codes for the keys and check equality.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray">
      <summary>Provides methods for creating an array that is immutable; meaning it cannot be changed once it is created.  
NuGet package: System.Collections.Immutable (about immutable collections and how to install)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1">
      <summary>Creates an empty immutable array.</summary>
      <typeparam name="T">The type of elements stored in the array.</typeparam>
      <returns>An empty immutable array.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0)">
      <summary>Creates an immutable array that contains the specified object.</summary>
      <param name="item">The object to store in the array.</param>
      <typeparam name="T">The type of elements stored in the array.</typeparam>
      <returns>Returns an immutable array that contains the specified object.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0,``0)">
      <summary>Creates an immutable array that contains the specified objects.</summary>
      <param name="item1">The first object to store in the array.</param>
      <param name="item2">The second object to store in the array.</param>
      <typeparam name="T">The type of elements stored in the array.</typeparam>
      <returns>Returns an immutable array that contains the specified objects.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0,``0,``0)">
      <summary>Creates an immutable array that contains the specified objects.</summary>
      <param name="item1">The first object to store in the array.</param>
      <param name="item2">The second object to store in the array.</param>
      <param name="item3">The third object to store in the array.</param>
      <typeparam name="T">The type of elements stored in the array.</typeparam>
      <returns>An immutable array that contains the specified objects.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0,``0,``0,``0)">
      <summary>Creates an immutable array that contains the specified objects.</summary>
      <param name="item1">The first object to store in the array.</param>
      <param name="item2">The second object to store in the array.</param>
      <param name="item3">The third object to store in the array.</param>
      <param name="item4">The fourth object to store in the array.</param>
      <typeparam name="T">The type of elements stored in the array.</typeparam>
      <returns>An immutable array that contains the specified objects.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Creates a new <see cref="T:System.Collections.Immutable.ImmutableArray`1"></see> populated with the specified items.</summary>
      <param name="items">The elements to add to the array.</param>
      <typeparam name="T">The type of element stored in the array.</typeparam>
      <returns>An immutable array that contains the specified items.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0[])">
      <summary>Creates an immutable array from the specified array of objects.</summary>
      <param name="items">The array of objects to populate the array with.</param>
      <typeparam name="T">The type of elements stored in the array.</typeparam>
      <returns>An immutable array that contains the array of items.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(``0[],System.Int32,System.Int32)">
      <summary>Creates an immutable array with specified objects from another array.</summary>
      <param name="items">The source array of objects.</param>
      <param name="start">The index of the first element to copy from items.</param>
      <param name="length">The number of elements from items to include in this immutable array.</param>
      <typeparam name="T">The type of elements stored in the array.</typeparam>
      <returns>An immutable array that contains the specified objects from the source array.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.Create``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32)">
      <summary>Creates an immutable array with the specified objects from another immutable array.</summary>
      <param name="items">The source array of objects.</param>
      <param name="start">The index of the first element to copy from items.</param>
      <param name="length">The number of elements from items to include in this immutable array.</param>
      <typeparam name="T">The type of elements stored in the array.</typeparam>
      <returns>An immutable array that contains the specified objects from the source array.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``2(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1})">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Immutable.ImmutableArray`1"></see> struct.</summary>
      <param name="items">The source array to initialize the resulting array with.</param>
      <param name="selector">The function to apply to each element from the source array.</param>
      <typeparam name="TSource">
      </typeparam>
      <typeparam name="TResult">
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``2(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,System.Func{``0,``1})">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Immutable.ImmutableArray`1"></see> struct.</summary>
      <param name="items">The source array to initialize the resulting array with.</param>
      <param name="start">The index of the first element in the source array to include in the resulting array.</param>
      <param name="length">The number of elements from the source array to include in the resulting array.</param>
      <param name="selector">The function to apply to each element from the source array included in the resulting array.</param>
      <typeparam name="TSource">
      </typeparam>
      <typeparam name="TResult">
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``3(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1,``2},``1)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Immutable.ImmutableArray`1"></see> struct.</summary>
      <param name="items">The source array to initialize the resulting array with.</param>
      <param name="selector">The function to apply to each element from the source array.</param>
      <param name="arg">An argument to be passed to the selector mapping function.</param>
      <typeparam name="TSource">
      </typeparam>
      <typeparam name="TArg">
      </typeparam>
      <typeparam name="TResult">
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateRange``3(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,System.Func{``0,``1,``2},``1)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Immutable.ImmutableArray`1"></see> struct.</summary>
      <param name="items">The source array to initialize the resulting array with.</param>
      <param name="start">The index of the first element in the source array to include in the resulting array.</param>
      <param name="length">The number of elements from the source array to include in the resulting array.</param>
      <param name="selector">The function to apply to each element from the source array included in the resulting array.</param>
      <param name="arg">An argument to be passed to the selector mapping function.</param>
      <typeparam name="TSource">
      </typeparam>
      <typeparam name="TArg">
      </typeparam>
      <typeparam name="TResult">
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateBuilder``1">
      <summary>Creates a mutable array that can be converted to an <see cref="T:System.Collections.Immutable.ImmutableArray"></see> without allocating new memory.</summary>
      <typeparam name="T">The type of elements stored in the builder.</typeparam>
      <returns>A mutable array of the specified type that can be efficiently converted to an immutable array.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.CreateBuilder``1(System.Int32)">
      <summary>Creates a mutable array that can be converted to an <see cref="T:System.Collections.Immutable.ImmutableArray"></see> without allocating new memory.</summary>
      <param name="initialCapacity">The initial capacity of the builder.</param>
      <typeparam name="T">The type of elements stored in the builder.</typeparam>
      <returns>A mutable array of the specified type that can be efficiently converted to an immutable array.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.ToImmutableArray``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Creates an immutable array from the specified collection.</summary>
      <param name="items">The collection of objects to copy to the immutable array.</param>
      <typeparam name="TSource">The type of elements contained in items.</typeparam>
      <returns>An immutable array that contains the specified collection of objects.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},``0)">
      <summary>Searches the sorted immutable array for a specified element using the default comparer and returns the zero-based index of the element, if it’s found.</summary>
      <param name="array">The sorted array to search.</param>
      <param name="value">The object to search for.</param>
      <typeparam name="T">The type of element stored in the array.</typeparam>
      <returns>The zero-based index of the item in the array, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <paramref name="value">value</paramref> or, if there is no larger element, the bitwise complement of <see cref="System.Collections.Generic.ICollection`1.Count"></see>.</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value">value</paramref> does not implement <see cref="System.IComparable"></see> or the search encounters an element that does not implement <see cref="System.IComparable"></see>.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},``0,System.Collections.Generic.IComparer{``0})">
      <summary>Searches a sorted immutable array for a specified element and returns the zero-based index of the element, if it’s found.</summary>
      <param name="array">The sorted array to search.</param>
      <param name="value">The object to search for.</param>
      <param name="comparer">The comparer implementation to use when comparing elements, or null to use the default comparer.</param>
      <typeparam name="T">The type of element stored in the array.</typeparam>
      <returns>The zero-based index of the item in the array, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <paramref name="value">value</paramref> or, if there is no larger element, the bitwise complement of <see cref="System.Collections.Generic.ICollection`1.Count"></see>.</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer">comparer</paramref> is null and <paramref name="value">value</paramref> does not implement <see cref="System.IComparable"></see> or the search encounters an element that does not implement <see cref="System.IComparable"></see>.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,``0)">
      <summary>Searches a sorted immutable array for a specified element and returns the zero-based index of the element, if it’s found.</summary>
      <param name="array">The sorted array to search.</param>
      <param name="index">The starting index of the range to search.</param>
      <param name="length">The length of the range to search.</param>
      <param name="value">The object to search for.</param>
      <typeparam name="T">The type of element stored in the array.</typeparam>
      <returns>The zero-based index of the item in the array, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <paramref name="value">value</paramref> or, if there is no larger element, the bitwise complement of <see cref="System.Collections.Generic.ICollection`1.Count"></see>.</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value">value</paramref> does not implement <see cref="System.IComparable"></see> or the search encounters an element that does not implement <see cref="System.IComparable"></see>.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})">
      <summary>Searches a sorted immutable array for a specified element and returns the zero-based index of the element.</summary>
      <param name="array">The sorted array to search.</param>
      <param name="index">The starting index of the range to search.</param>
      <param name="length">The length of the range to search.</param>
      <param name="value">The object to search for.</param>
      <param name="comparer">The comparer to use when comparing elements for equality or null to use the default comparer.</param>
      <typeparam name="T">The type of element stored in the array.</typeparam>
      <returns>The zero-based index of the item in the array, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <paramref name="value">value</paramref> or, if there is no larger element, the bitwise complement of <see cref="System.Collections.Generic.ICollection`1.Count"></see>.</returns>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer">comparer</paramref> is null and <paramref name="value">value</paramref> does not implement <see cref="System.IComparable"></see> or the search encounters an element that does not implement <see cref="System.IComparable"></see>.</exception>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray`1">
      <summary>Represents an array that is immutable; meaning it cannot be changed once it is created.  
 NuGet package: System.Collections.Immutable (about immutable collections and how to install)</summary>
      <typeparam name="T">The type of element stored by the array.</typeparam>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray`1.Builder">
      <summary>A writable array accessor that can be converted into an <see cref="T:System.Collections.Immutable.ImmutableArray`1"></see> instance without allocating extra memory.  
NuGet package: System.Collections.Immutable (about immutable collections and how to install)</summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.ToImmutable">
      <summary>Returns an immutable array that contains the current contents of this <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder"></see>.</summary>
      <returns>An immutable array that contains the current contents of this <see cref="System.Collections.Immutable.ImmutableArray`1.Builder"></see>.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.MoveToImmutable">
      <summary>Extracts the internal array as an <see cref="T:System.Collections.Immutable.ImmutableArray`1"></see> and replaces it              with a zero length array.</summary>
      <returns>
      </returns>
      <exception cref="T:System.InvalidOperationException">When <see cref="System.Collections.Immutable.ImmutableArray`1.Builder.Count"></see> doesn&amp;#39;t              equal <see cref="System.Collections.Immutable.ImmutableArray`1.Builder.Capacity"></see>.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Clear">
      <summary>Removes all items from the array.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange``1(``0[])">
      <summary>Adds the specified items that derive from the type currently in the array, to the end of the array.</summary>
      <param name="items">The items to add to end of the array.</param>
      <typeparam name="TDerived">The type that derives from the type of item already in the array.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Adds the specified items that derive from the type currently in the array, to the end of the array</summary>
      <param name="items">The items to add to the end of the array.</param>
      <typeparam name="TDerived">The type that derives from the type of item already in the array.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.AddRange``1(System.Collections.Immutable.ImmutableArray{``0}.Builder)">
      <summary>Adds the specified items that derive from the type currently in the array, to the end of the array.</summary>
      <param name="items">The items to add to the end of the array.</param>
      <typeparam name="TDerived">The type that derives from the type of item already in the array.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.RemoveAt(System.Int32)">
      <summary>Removes the item at the specified index from the array.</summary>
      <param name="index">The zero-based index of the item to remove.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.ToArray">
      <summary>Creates a new array with the current contents of this <see cref="T:System.Collections.Immutable.ImmutableArray`1.Builder"></see>.</summary>
      <returns>A new array with the contents of this <see cref="System.Collections.Immutable.ImmutableArray`1.Builder"></see>.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Reverse">
      <summary>Reverses the order of elements in the collection.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.Sort">
      <summary>Sorts the contents of the array.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Builder.GetEnumerator">
      <summary>Gets an object that can be used to iterate through the collection.</summary>
      <returns>An object that can be used to iterate through the collection.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.Capacity">
      <summary>Get and sets the length of the internal array.  When set the internal array is             reallocated to the given capacity if it is not already the specified length.</summary>
      <returns>
      </returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.Count">
      <summary>Gets or sets the number of items in the array.</summary>
      <returns>The number of items in the array.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Builder.Item(System.Int32)">
      <summary>Gets or sets the item at the specified index.</summary>
      <param name="index">The index of the item to get or set.</param>
      <returns>The item at the specified index.</returns>
      <exception cref="T:System.IndexOutOfRangeException">The specified index is not in the array.</exception>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableArray`1.Enumerator">
      <summary>An array enumerator.  
 NuGet package: System.Collections.Immutable (about immutable collections and how to install)</summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Enumerator.MoveNext">
      <summary>Advances to the next value in the array.</summary>
      <returns>true if another item exists in the array; otherwise, false.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Enumerator.Current">
      <summary>Gets the currently item.</summary>
      <returns>The current item.</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableArray`1.Empty">
      <summary>Gets an empty immutable array.</summary>
      <returns>
      </returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0)">
      <summary>Searches the array for the specified item.</summary>
      <param name="item">The item to search for.</param>
      <returns>The zero-based index position of the item if it is found, or -1 if it is not.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Searches the array for the specified item.</summary>
      <param name="item">The item to search for.</param>
      <param name="startIndex">The index at which to begin the search.</param>
      <param name="equalityComparer">The equality comparer to use in the search.</param>
      <returns>The zero-based index position of the item if it is found, or -1 if it is not.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32)">
      <summary>Searches the array for the specified item.</summary>
      <param name="item">The item to search for.</param>
      <param name="startIndex">The index at which to begin the search.</param>
      <returns>The zero-based index position of the item if it is found, or -1 if it is not.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Int32)">
      <summary>Searches the array for the specified item.</summary>
      <param name="item">The item to search for.</param>
      <param name="startIndex">The index at which to begin the search.</param>
      <param name="count">The number of elements to search.</param>
      <returns>The zero-based index position of the item if it is found, or -1 if it is not.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Searches the array for the specified item.</summary>
      <param name="item">The item to search for.</param>
      <param name="startIndex">The index at which to begin the search.</param>
      <param name="count">The number of elements to search.</param>
      <param name="equalityComparer">The equality comparer to use in the search.</param>
      <returns>The zero-based index position of the item if it is found, or -1 if it is not.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0)">
      <summary>Searches the array for the specified item; starting at the end of the array.</summary>
      <param name="item">The item to search for.</param>
      <returns>The 0-based index into the array where the item was found; or -1 if it could not be found.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32)">
      <summary>Searches the array for the specified item; starting at the end of the array.</summary>
      <param name="item">The item to search for.</param>
      <param name="startIndex">The index at which to begin the search.</param>
      <returns>The 0-based index into the array where the item was found; or -1 if it could not be found.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32,System.Int32)">
      <summary>Searches the array for the specified item; starting at the end of the array.</summary>
      <param name="item">The item to search for.</param>
      <param name="startIndex">The index at which to begin the search.</param>
      <param name="count">The number of elements to search.</param>
      <returns>The 0-based index into the array where the item was found; or -1 if it could not be found.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Searches the array for the specified item; starting at the end of the array.</summary>
      <param name="item">The item to search for.</param>
      <param name="startIndex">The index at which to begin the search.</param>
      <param name="count">The number of elements to search.</param>
      <param name="equalityComparer">The equality comparer to use in the search.</param>
      <returns>The 0-based index into the array where the item was found; or -1 if it could not be found.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Contains(`0)">
      <summary>Determines whether the specified item exists in the array.</summary>
      <param name="item">The item to search for.</param>
      <returns>true if the specified item was found in the array; otherwise false.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Insert(System.Int32,`0)">
      <summary>Returns a new array with the specified value inserted at the specified position.</summary>
      <param name="index">The 0-based index into the array at which the new item should be added.</param>
      <param name="item">The item to insert at the start of the array.</param>
      <returns>A new array with the item inserted at the specified index.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>Inserts the specified values at the specified index.</summary>
      <param name="index">The index at which to insert the value.</param>
      <param name="items">The elements to insert.</param>
      <returns>A new immutable array with the items inserted at the specified index.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.InsertRange(System.Int32,System.Collections.Immutable.ImmutableArray{`0})">
      <summary>Inserts the specified values at the specified index.</summary>
      <param name="index">The index at which to insert the value.</param>
      <param name="items">The elements to insert.</param>
      <returns>A new immutable array with the items inserted at the specified index.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Add(`0)">
      <summary>Returns a copy of the original array with the specified item added to the end.</summary>
      <param name="item">The item to be added to the end of the array.</param>
      <returns>A new array with the specified item added to the end.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Returns a copy of the original array with the specified elements added to the end of the array.</summary>
      <param name="items">The elements to add to the array.</param>
      <returns>A new array with the elements added.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.AddRange(System.Collections.Immutable.ImmutableArray{`0})">
      <summary>Returns a copy of the original array with the specified elements added to the end of the array.</summary>
      <param name="items">The elements to add to the array.</param>
      <returns>A new array with the elements added.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.SetItem(System.Int32,`0)">
      <summary>Replaces the item at the specified index with the specified item.</summary>
      <param name="index">The index of the item to replace.</param>
      <param name="item">The item to add to the list.</param>
      <returns>The new array that contains <paramref name="item">item</paramref> at the specified index.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Replace(`0,`0)">
      <summary>Finds the first element in the array equal to the specified value and replaces the value with the specified new value.</summary>
      <param name="oldValue">The value to find and replace in the array.</param>
      <param name="newValue">The value to replace the oldvalue with.</param>
      <returns>A new array that contains <paramref name="newValue">newValue</paramref> even if the new and old values are the same.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldValue">oldValue</paramref> is not found in the array.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Finds the first element in the array equal to the specified value and replaces the value with the specified new value.</summary>
      <param name="oldValue">The value to find and replace in the array.</param>
      <param name="newValue">The value to replace the oldvalue with.</param>
      <param name="equalityComparer">The equality comparer to use to compare values.</param>
      <returns>A new array that contains <paramref name="newValue">newValue</paramref> even if the new and old values are the same.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldValue">oldValue</paramref> is not found in the array.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Remove(`0)">
      <summary>Returns an array with the first occurrence of the specified element removed from the array. If no match is found, the current array is returned.</summary>
      <param name="item">The item to remove.</param>
      <returns>A new array with the item removed.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Returns an array with the first occurrence of the specified element removed from the array.  
 If no match is found, the current array is returned.</summary>
      <param name="item">The item to remove.</param>
      <param name="equalityComparer">The equality comparer to use in the search.</param>
      <returns>A new array with the specified item removed.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveAt(System.Int32)">
      <summary>Returns an array with the element at the specified position removed.</summary>
      <param name="index">The 0-based index of the element to remove from the returned array.</param>
      <returns>A new array with the item at the specified index removed.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Int32,System.Int32)">
      <summary>Returns an array with the elements at the specified position removed.</summary>
      <param name="index">The 0-based index of the starting element to remove from the array.</param>
      <param name="length">The number of elements to remove from the array.</param>
      <returns>The new array with the specified elements removed.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Removes the specified items from this array.</summary>
      <param name="items">The items to remove if matches are found in this list.</param>
      <returns>A new array with the elements removed.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Removes the specified items from this array.</summary>
      <param name="items">The items to remove if matches are found in this list.</param>
      <param name="equalityComparer">The equality comparer to use in the search.</param>
      <returns>A new array with the elements removed.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Immutable.ImmutableArray{`0})">
      <summary>Removes the specified values from this list.</summary>
      <param name="items">The items to remove if matches are found in this list.</param>
      <returns>A new list with the elements removed.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveRange(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Removes the specified items from this list.</summary>
      <param name="items">The items to remove if matches are found in this list.</param>
      <param name="equalityComparer">The equality comparer to use in the search.</param>
      <returns>A new array with the elements removed.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.RemoveAll(System.Predicate{`0})">
      <summary>Removes all the items from the array that meet the specified condition.</summary>
      <param name="match">The delegate that defines the conditions of the elements to remove.</param>
      <returns>A new array with items that meet the specified condition removed.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Clear">
      <summary>Returns an array with all the elements removed.</summary>
      <returns>An array with all of the elements removed.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort">
      <summary>Sorts the elements in the immutable array using the default comparer.</summary>
      <returns>A new immutable array that contains the items in this array, in sorted order.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort(System.Comparison{`0})">
      <summary>Sorts the elements in the entire <see cref="T:System.Collections.Immutable.ImmutableArray`1"></see> using             the specified <see cref="T:System.Comparison`1"></see>.</summary>
      <param name="comparison">The <see cref="T:System.Comparison`1"></see> to use when comparing elements.</param>
      <returns>The sorted list.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="comparison">comparison</paramref> is null.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort(System.Collections.Generic.IComparer{`0})">
      <summary>Sorts the elements in the immutable array using the specified comparer.</summary>
      <param name="comparer">The implementation to use when comparing elements, or null to use the default comparer</param>
      <returns>A new immutable array that contains the items in this array, in sorted order.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary>Sorts the specified elements in the immutable array using the specified comparer.</summary>
      <param name="index">The index of the first element to sort.</param>
      <param name="count">The number of elements to include in the sort.</param>
      <param name="comparer">The implementation to use when comparing elements, or null to use the default comparer</param>
      <returns>A new immutable array that contains the items in this array, in sorted order.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.OfType``1">
      <summary>Filters the elements of this array to those assignable to the specified type.</summary>
      <typeparam name="TResult">The type to filter the elements of the sequence on.</typeparam>
      <returns>An <see cref="System.Collections.IEnumerable"></see> that contains elements from the input sequence of type of <paramref name="TResult">TResult</paramref>.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Equality(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Immutable.ImmutableArray{`0})">
      <summary>Returns a value that indicates if two arrays are equal.</summary>
      <param name="left">The array to the left of the operator.</param>
      <param name="right">The array to the right of the operator.</param>
      <returns>true if the arrays are equal; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Inequality(System.Collections.Immutable.ImmutableArray{`0},System.Collections.Immutable.ImmutableArray{`0})">
      <summary>Returns a value that indicates whether two arrays are not equal.</summary>
      <param name="left">The array to the left of the operator.</param>
      <param name="right">The array to the right of the operator.</param>
      <returns>true if the arrays are not equal; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Equality(System.Nullable{System.Collections.Immutable.ImmutableArray{`0}},System.Nullable{System.Collections.Immutable.ImmutableArray{`0}})">
      <summary>Returns a value that indicates if two arrays are equal.</summary>
      <param name="left">The array to the left of the operator.</param>
      <param name="right">The array to the right of the operator.</param>
      <returns>true if the arrays are equal; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.op_Inequality(System.Nullable{System.Collections.Immutable.ImmutableArray{`0}},System.Nullable{System.Collections.Immutable.ImmutableArray{`0}})">
      <summary>Checks for inequality between two array.</summary>
      <param name="left">The object to the left of the operator.</param>
      <param name="right">The object to the right of the operator.</param>
      <returns>true if the two arrays are not equal; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CopyTo(`0[])">
      <summary>Copies the contents of this array to the specified array.</summary>
      <param name="destination">The array to copy to.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CopyTo(`0[],System.Int32)">
      <summary>Copies the contents of this array to the specified array starting at the specified destination index.</summary>
      <param name="destination">The array to copy to.</param>
      <param name="destinationIndex">The index in array where copying begins.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
      <summary>Copies the specified items in this array to the specified array at the specified starting index.</summary>
      <param name="sourceIndex">The index of this array where copying begins.</param>
      <param name="destination">The array to copy to.</param>
      <param name="destinationIndex">The index in array where copying begins.</param>
      <param name="length">The number of elements to copy from this array.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.ToBuilder">
      <summary>Creates a mutable array that has the same contents as this array and can be efficiently mutated across multiple operations using standard mutable interfaces.</summary>
      <returns>The new builder with the same contents as this array.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.GetEnumerator">
      <summary>Returns an enumerator that iterates through the contents of the array.</summary>
      <returns>An enumerator.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.GetHashCode">
      <summary>Returns a hash code for this instance.</summary>
      <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Equals(System.Object)">
      <summary>Determines if this array is equal to the specified object.</summary>
      <param name="obj">The <see cref="T:System.Object"></see> to compare with this array.</param>
      <returns>true if this array is equal to <paramref name="obj">obj</paramref>; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.Equals(System.Collections.Immutable.ImmutableArray{`0})">
      <summary>Indicates whether specified array is equal to this array.</summary>
      <param name="other">An object to compare with this object.</param>
      <returns>true if <paramref name="other">other</paramref> is equal to this array; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CastUp``1(System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Immutable.ImmutableArray`1"></see> struct based on the contents             of an existing instance, allowing a covariant static cast to efficiently reuse the existing array.</summary>
      <param name="items">The array to initialize the array with. No copy is made.</param>
      <typeparam name="TDerived">
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.CastArray``1">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Immutable.ImmutableArray`1"></see> struct by casting the underlying             array to an array of type <paramref name="TOther">TOther</paramref>.</summary>
      <typeparam name="TOther">
      </typeparam>
      <returns>
      </returns>
      <exception cref="T:System.InvalidCastException">Thrown if the cast is illegal.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableArray`1.As``1">
      <summary>Returns a new immutable array that contains the elements of this array cast to a different type.</summary>
      <typeparam name="TOther">The type of array element to return.</typeparam>
      <returns>An immutable array that contains the elements of this array, cast to a different type. If the cast fails, returns an array whose <see cref="System.Collections.Immutable.ImmutableArray`1.IsDefault"></see> property returns true.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Item(System.Int32)">
      <summary>Gets the element at the specified index in the immutable array.</summary>
      <param name="index">The zero-based index of the element to get.</param>
      <returns>The element at the specified index in the immutable array.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.IsEmpty">
      <summary>Gets a value indicating whether this <see cref="T:System.Collections.Immutable.ImmutableArray`1"></see> is empty.</summary>
      <returns>true to indicate the <see cref="System.Collections.Immutable.ImmutableArray`1"></see> is empty; otherwise, false.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.Length">
      <summary>Gets the number of elements in the array.</summary>
      <returns>The number of elements in the array</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.IsDefault">
      <summary>Gets a value indicating whether this array was declared but not initialized.</summary>
      <returns>true to indicate the <see cref="System.Collections.Immutable.ImmutableArray`1"></see> is null; otherwise, false.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableArray`1.IsDefaultOrEmpty">
      <summary>Gets a value indicating whether this <see cref="T:System.Collections.Immutable.ImmutableArray`1"></see> is empty or is not initialized.</summary>
      <returns>true to indicate the <see cref="System.Collections.Immutable.ImmutableArray`1"></see> is null or <see cref="System.Collections.Immutable.ImmutableArray`1.Empty"></see>; otherwise, false.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary">
      <summary>Provides a set of initialization methods for instances of the <see cref="T:System.Collections.Immutable.ImmutableDictionary`2"></see> class.  
 NuGet package: System.Collections.Immutable (about immutable collections and how to install)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Create``2">
      <summary>Creates an empty immutable dictionary.</summary>
      <typeparam name="TKey">The type of keys stored by the dictionary.</typeparam>
      <typeparam name="TValue">The type of values stored by the dictionary.</typeparam>
      <returns>An empty immutable dictionary.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Create``2(System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Creates an empty immutable dictionary that uses the specified key comparer.</summary>
      <param name="keyComparer">The implementation to use to determine the equality of keys in the dictionary.</param>
      <typeparam name="TKey">The type of keys stored by the dictionary.</typeparam>
      <typeparam name="TValue">The type of values stored by the dictionary.</typeparam>
      <returns>An empty immutable dictionary.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Create``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Creates an empty immutable dictionary that uses the specified key and value comparers.</summary>
      <param name="keyComparer">The implementation to use to determine the equality of keys in the dictionary.</param>
      <param name="valueComparer">The implementation to use to determine the equality of values in the dictionary.</param>
      <typeparam name="TKey">The type of keys stored by the dictionary.</typeparam>
      <typeparam name="TValue">The type of values stored by the dictionary.</typeparam>
      <returns>An empty immutable dictionary.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateRange``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>Creates a new immutable dictionary that contains the specified items.</summary>
      <param name="items">The items used to populate the dictionary before it’s immutable.</param>
      <typeparam name="TKey">The type of keys in the dictionary.</typeparam>
      <typeparam name="TValue">The type of values in the dictionary.</typeparam>
      <returns>A new immutable dictionary that contains the specified items.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateRange``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>Creates a new immutable dictionary that contains the specified items and uses the specified key comparer.</summary>
      <param name="keyComparer">The comparer implementation to use to compare keys for equality.</param>
      <param name="items">The items to add to the dictionary before it’s immutable.</param>
      <typeparam name="TKey">The type of keys in the dictionary.</typeparam>
      <typeparam name="TValue">The type of values in the dictionary.</typeparam>
      <returns>A new immutable dictionary that contains the specified items and uses the specified comparer.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateRange``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>Creates a new immutable dictionary that contains the specified items and uses the specified key comparer.</summary>
      <param name="keyComparer">The comparer implementation to use to compare keys for equality.</param>
      <param name="valueComparer">The comparer implementation to use to compare values for equality.</param>
      <param name="items">The items to add to the dictionary before it’s immutable.</param>
      <typeparam name="TKey">The type of keys in the dictionary.</typeparam>
      <typeparam name="TValue">The type of values in the dictionary.</typeparam>
      <returns>A new immutable dictionary that contains the specified items and uses the specified comparer.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateBuilder``2">
      <summary>Creates a new immutable dictionary builder.</summary>
      <typeparam name="TKey">The type of keys stored by the dictionary.</typeparam>
      <typeparam name="TValue">The type of values stored by the dictionary.</typeparam>
      <returns>The new builder.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateBuilder``2(System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Creates a new immutable dictionary builder.</summary>
      <param name="keyComparer">The key comparer.</param>
      <typeparam name="TKey">The type of keys stored by the dictionary.</typeparam>
      <typeparam name="TValue">The type of values stored by the dictionary.</typeparam>
      <returns>The new builder.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.CreateBuilder``2(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Creates a new immutable dictionary builder.</summary>
      <param name="keyComparer">The key comparer.</param>
      <param name="valueComparer">The value comparer.</param>
      <typeparam name="TKey">The type of keys stored by the dictionary.</typeparam>
      <typeparam name="TValue">The type of values stored by the dictionary.</typeparam>
      <returns>The new builder.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>Enumerates and transforms a sequence, and produces an immutable dictionary of its contents by using the specified key and value comparers.</summary>
      <param name="source">The sequence to enumerate to generate the dictionary.</param>
      <param name="keySelector">The function that will produce the key for the dictionary from each sequence element.</param>
      <param name="elementSelector">The function that will produce the value for the dictionary from each sequence element.</param>
      <param name="keyComparer">The key comparer to use for the dictionary.</param>
      <param name="valueComparer">The value comparer to use for the dictionary.</param>
      <typeparam name="TSource">The type of the elements in the sequence.</typeparam>
      <typeparam name="TKey">The type of the keys in the resulting dictionary.</typeparam>
      <typeparam name="TValue">The type of the values in the resulting dictionary.</typeparam>
      <returns>An immutable dictionary that contains the items in the specified sequence.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Enumerates and transforms a sequence, and produces an immutable dictionary of its contents by using the specified key comparer.</summary>
      <param name="source">The sequence to enumerate to generate the dictionary.</param>
      <param name="keySelector">The function that will produce the key for the dictionary from each sequence element.</param>
      <param name="elementSelector">The function that will produce the value for the dictionary from each sequence element.</param>
      <param name="keyComparer">The key comparer to use for the dictionary.</param>
      <typeparam name="TSource">The type of the elements in the sequence.</typeparam>
      <typeparam name="TKey">The type of the keys in the resulting dictionary.</typeparam>
      <typeparam name="TValue">The type of the values in the resulting dictionary.</typeparam>
      <returns>An immutable dictionary that contains the items in the specified sequence.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>Constructs an immutable dictionary from an existing collection of elements, applying a transformation function to the source keys.</summary>
      <param name="source">The source collection used to generate the immutable dictionary.</param>
      <param name="keySelector">The function used to transform keys for the immutable dictionary.</param>
      <typeparam name="TSource">The type of element in the source collection.</typeparam>
      <typeparam name="TKey">The type of key in the resulting immutable dictionary.</typeparam>
      <returns>The immutable dictionary that contains elements from <paramref name="source">source</paramref>, with keys transformed by applying <paramref name="keySelector">keySelector</paramref>.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Constructs an immutable dictionary based on some transformation of a sequence.</summary>
      <param name="source">The source collection used to generate the immutable dictionary.</param>
      <param name="keySelector">The function used to transform keys for the immutable dictionary.</param>
      <param name="keyComparer">The key comparer to use for the dictionary.</param>
      <typeparam name="TSource">The type of element in the source collection.</typeparam>
      <typeparam name="TKey">The type of key in the resulting immutable dictionary.</typeparam>
      <returns>The immutable dictionary that contains elements from <paramref name="source">source</paramref>, with keys transformed by applying <paramref name="keySelector">keySelector</paramref>.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>Enumerates and transforms a sequence, and produces an immutable dictionary of its contents.</summary>
      <param name="source">The sequence to enumerate to generate the dictionary.</param>
      <param name="keySelector">The function that will produce the key for the dictionary from each sequence element.</param>
      <param name="elementSelector">The function that will produce the value for the dictionary from each sequence element.</param>
      <typeparam name="TSource">The type of the elements in the sequence.</typeparam>
      <typeparam name="TKey">The type of the keys in the resulting dictionary.</typeparam>
      <typeparam name="TValue">The type of the values in the resulting dictionary.</typeparam>
      <returns>An immutable dictionary that contains the items in the specified sequence.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Enumerates a sequence of key/value pairs and produces an immutable dictionary of its contents by using the specified key and value comparers.</summary>
      <param name="source">The sequence of key/value pairs to enumerate.</param>
      <param name="keyComparer">The key comparer to use when building the immutable dictionary.</param>
      <param name="valueComparer">The value comparer to use for the immutable dictionary.</param>
      <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
      <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
      <returns>An immutable dictionary that contains the key/value pairs in the specified sequence.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Enumerates a sequence of key/value pairs and produces an immutable dictionary of its contents by using the specified key comparer.</summary>
      <param name="source">The sequence of key/value pairs to enumerate.</param>
      <param name="keyComparer">The key comparer to use when building the immutable dictionary.</param>
      <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
      <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
      <returns>An immutable dictionary that contains the key/value pairs in the specified sequence.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.ToImmutableDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>Enumerates a sequence of key/value pairs and produces an immutable dictionary of its contents.</summary>
      <param name="source">The sequence of key/value pairs to enumerate.</param>
      <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
      <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
      <returns>An immutable dictionary that contains the key/value pairs in the specified sequence.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.Contains``2(System.Collections.Immutable.IImmutableDictionary{``0,``1},``0,``1)">
      <summary>Determines whether the specified immutable dictionary contains the specified key/value pair.</summary>
      <param name="map">The immutable dictionary to search.</param>
      <param name="key">The key to locate in the immutable dictionary.</param>
      <param name="value">The value to locate on the specified key, if the key is found.</param>
      <typeparam name="TKey">The type of the keys in the immutable dictionary.</typeparam>
      <typeparam name="TValue">The type of the values in the immutable dictionary.</typeparam>
      <returns>true if this map contains the specified key/value pair; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.GetValueOrDefault``2(System.Collections.Immutable.IImmutableDictionary{``0,``1},``0)">
      <summary>Gets the value for a given key if a matching key exists in the dictionary.</summary>
      <param name="dictionary">The dictionary to retrieve the value from.</param>
      <param name="key">The key to search for.</param>
      <typeparam name="TKey">The type of the key.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
      <returns>The value for the key, or default(TValue) if no matching key was found.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary.GetValueOrDefault``2(System.Collections.Immutable.IImmutableDictionary{``0,``1},``0,``1)">
      <summary>Gets the value for a given key if a matching key exists in the dictionary.</summary>
      <param name="dictionary">The dictionary to retrieve the value from.</param>
      <param name="key">The key to search for.</param>
      <param name="defaultValue">The default value to return if no matching key is found in the dictionary.</param>
      <typeparam name="TKey">The type of the key.</typeparam>
      <typeparam name="TValue">The type of the value.</typeparam>
      <returns>The value for the key, or <paramref name="defaultValue">defaultValue</paramref> if no matching key was found.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary`2">
      <summary>Represents an immutable, unordered collection of keys and values.  
 NuGet package: System.Collections.Immutable (about immutable collections and how to install)</summary>
      <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
      <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary`2.Builder">
      <summary>Represents a hash map that mutates with little or no memory allocations and that can produce or build on immutable hash map instances very efficiently.  
 NuGet package: System.Collections.Immutable (about immutable collections and how to install)</summary>
      <typeparam name="TKey">
      </typeparam>
      <typeparam name="TValue">
      </typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.GetEnumerator">
      <summary>Returns an enumerator that iterates through the immutable dictionary.</summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.ToImmutable">
      <summary>Creates an immutable dictionary based on the contents of this instance.</summary>
      <returns>An immutable dictionary.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Builder.Clear">
      <summary>Removes all items from the immutable dictionary.</summary>
      <exception cref="T:System.NotSupportedException">The dictionary is read-only.</exception>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.KeyComparer">
      <summary>Gets or sets the key comparer.</summary>
      <returns>The key comparer.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.ValueComparer">
      <summary>Gets or sets the value comparer.</summary>
      <returns>The value comparer.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Count">
      <summary>Gets the number of elements contained in the immutable dictionary.</summary>
      <returns>The number of elements contained in the immutable dictionary.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Keys">
      <summary>Gets a collection that contains the keys of the immutable dictionary.</summary>
      <returns>A collection that contains the keys of the object that implements the immutable dictionary.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Builder.Values">
      <summary>Gets a collection that contains the values of the immutable dictionary.</summary>
      <returns>A collection that contains the values of the object that implements the dictionary.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableDictionary`2.Enumerator">
      <summary>Enumerates the contents of the immutable dictionary without allocating any memory.  
 NuGet package: System.Collections.Immutable (about immutable collections and how to install)</summary>
      <typeparam name="TKey">
      </typeparam>
      <typeparam name="TValue">
      </typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.MoveNext">
      <summary>Advances the enumerator to the next element of the immutable dictionary.</summary>
      <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the dictionary.</returns>
      <exception cref="T:System.InvalidOperationException">The dictionary was modified after the enumerator was created.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.Reset">
      <summary>Sets the enumerator to its initial position, which is before the first element in the dictionary.</summary>
      <exception cref="T:System.InvalidOperationException">The dictionary was modified after the enumerator was created.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.Dispose">
      <summary>Releases the resources used by the current instance of the <see cref="T:System.Collections.Immutable.ImmutableDictionary`2.Enumerator"></see> class.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Enumerator.Current">
      <summary>Gets the element at the current position of the enumerator.</summary>
      <returns>The element in the dictionary at the current position of the enumerator.</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableDictionary`2.Empty">
      <summary>Gets an empty immutable dictionary</summary>
      <returns>
      </returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Clear">
      <summary>Retrieves an empty immutable dictionary that has the same ordering and key/value comparison rules as this dictionary instance.</summary>
      <returns>An empty dictionary with equivalent ordering and key/value comparison rules.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.ToBuilder">
      <summary>Creates an immutable dictionary with the same contents as this dictionary that can be efficiently mutated across multiple operations by using standard mutable interfaces.</summary>
      <returns>A collection with the same contents as this dictionary that can be efficiently mutated across multiple operations by using standard mutable interfaces.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Add(`0,`1)">
      <summary>Adds an element with the specified key and value to the immutable dictionary.</summary>
      <param name="key">The key of the element to add.</param>
      <param name="value">The value of the element to add.</param>
      <returns>A new immutable dictionary that contains the additional key/value pair.</returns>
      <exception cref="T:System.ArgumentException">The given key already exists in the dictionary but has a different value.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>Adds the specified key/value pairs to the immutable dictionary.</summary>
      <param name="pairs">The key/value pairs to add.</param>
      <returns>A new immutable dictionary that contains the additional key/value pairs.</returns>
      <exception cref="T:System.ArgumentException">One of the given keys already exists in the dictionary but has a different value.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.SetItem(`0,`1)">
      <summary>Sets the specified key and value in the immutable dictionary, possibly overwriting an existing value for the key.</summary>
      <param name="key">The key of the entry to add.</param>
      <param name="value">The key value to set.</param>
      <returns>A new immutable dictionary that contains the specified key/value pair.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>Sets the specified key/value pairs in the immutable dictionary, possibly overwriting existing values for the keys.</summary>
      <param name="items">The key/value pairs to set in the dictionary. If any of the keys already exist in the dictionary, this method will overwrite their previous values.</param>
      <returns>A new immutable dictionary that contains the specified key/value pairs.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Remove(`0)">
      <summary>Removes the element with the specified key from the immutable dictionary.</summary>
      <param name="key">The key of the element to remove.</param>
      <returns>A new immutable dictionary with the specified element removed; or this instance if the specified key cannot be found in the dictionary.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Removes the elements with the specified keys from the immutable dictionary.</summary>
      <param name="keys">The keys of the elements to remove.</param>
      <returns>A new immutable dictionary with the specified keys removed; or this instance if the specified keys cannot be found in the dictionary.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.ContainsKey(`0)">
      <summary>Determines whether the immutable dictionary contains an element with the specified key.</summary>
      <param name="key">The key to locate.</param>
      <returns>true if the immutable dictionary contains an element with the specified key; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Determines whether this immutable dictionary contains the specified key/value pair.</summary>
      <param name="pair">The key/value pair to locate.</param>
      <returns>true if the specified key/value pair is found in the dictionary; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.TryGetValue(`0,`1@)">
      <summary>Gets the value associated with the specified key.</summary>
      <param name="key">The key whose value will be retrieved.</param>
      <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, contains the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
      <returns>true if the object that implements the dictionary contains an element with the specified key; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key">key</paramref> is null.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.TryGetKey(`0,`0@)">
      <summary>Determines whether this dictionary contains a specified key.</summary>
      <param name="equalKey">The key to search for.</param>
      <param name="actualKey">The matching key located in the dictionary if found, or equalkey if no match is found.</param>
      <returns>true if a match for <paramref name="equalKey">equalKey</paramref> is found; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.WithComparers(System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
      <summary>Gets an instance of the immutable dictionary that uses the specified key and value comparers.</summary>
      <param name="keyComparer">The key comparer to use.</param>
      <param name="valueComparer">The value comparer to use.</param>
      <returns>An instance of the immutable dictionary that uses the given comparers.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.WithComparers(System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Gets an instance of the immutable dictionary that uses the specified key comparer.</summary>
      <param name="keyComparer">The key comparer to use.</param>
      <returns>An instance of the immutable dictionary that uses the given comparer.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.ContainsValue(`1)">
      <summary>Determines whether the immutable dictionary contains an element with the specified value.</summary>
      <param name="value">The value to locate. The value can be null for reference types.</param>
      <returns>true if the dictionary contains an element with the specified value; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableDictionary`2.GetEnumerator">
      <summary>Returns an enumerator that iterates through the immutable dictionary.</summary>
      <returns>An enumerator that can be used to iterate through the dictionary.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Count">
      <summary>Gets the number of key/value pairs in the immutable dictionary.</summary>
      <returns>The number of key/value pairs in the dictionary.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.IsEmpty">
      <summary>Gets a value that indicates whether this instance of the immutable dictionary is empty.</summary>
      <returns>true if this instance is empty; otherwise, false.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.KeyComparer">
      <summary>Gets the key comparer for the immutable dictionary.</summary>
      <returns>The key comparer.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.ValueComparer">
      <summary>Gets the value comparer used to determine whether values are equal.</summary>
      <returns>The value comparer used to determine whether values are equal.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Keys">
      <summary>Gets the keys in the immutable dictionary.</summary>
      <returns>The keys in the immutable dictionary.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Values">
      <summary>Gets the values in the immutable dictionary.</summary>
      <returns>The values in the immutable dictionary.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableDictionary`2.Item(`0)">
      <summary>Gets the <paramref name="TValue">TValue</paramref> associated with the specified key.</summary>
      <param name="key">The type of the key.</param>
      <returns>The value associated with the specified key. If no results are found, the operation throws an exception.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableHashSet">
      <summary>Provides a set of initialization methods for instances of the <see cref="T:System.Collections.Immutable.ImmutableHashSet`1"></see> class.  
 NuGet package: System.Collections.Immutable (about immutable collections and how to install)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1">
      <summary>Creates an empty immutable hash set.</summary>
      <typeparam name="T">The type of items to be stored in the immutable hash set.</typeparam>
      <returns>An empty immutable hash set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Creates an empty immutable hash set that uses the specified equality comparer.</summary>
      <param name="equalityComparer">The object to use for comparing objects in the set for equality.</param>
      <typeparam name="T">The type of items in the immutable hash set.</typeparam>
      <returns>An empty immutable hash set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(``0)">
      <summary>Creates a new immutable hash set that contains the specified item.</summary>
      <param name="item">The item to prepopulate the hash set with.</param>
      <typeparam name="T">The type of items in the immutable hash set.</typeparam>
      <returns>A new immutable hash set that contains the specified item.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(System.Collections.Generic.IEqualityComparer{``0},``0)">
      <summary>Creates a new immutable hash set that contains the specified item and uses the specified equality comparer for the set type.</summary>
      <param name="equalityComparer">The object to use for comparing objects in the set for equality.</param>
      <param name="item">The item to prepopulate the hash set with.</param>
      <typeparam name="T">The type of items in the immutable hash set.</typeparam>
      <returns>A new immutable hash set that contains the specified item.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Creates a new immutable hash set prefilled with the specified items.</summary>
      <param name="items">The items to add to the hash set.</param>
      <typeparam name="T">The type of items stored by the collection.</typeparam>
      <returns>The new immutable hash set that contains the specified items.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateRange``1(System.Collections.Generic.IEqualityComparer{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Creates a new immutable hash set that contains the specified items and uses the specified equality comparer for the set type.</summary>
      <param name="equalityComparer">The object to use for comparing objects in the set for equality.</param>
      <param name="items">The items add to the collection before immutability is applied.</param>
      <typeparam name="T">The type of items stored in the collection.</typeparam>
      <returns>The new immutable hash set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(``0[])">
      <summary>Creates a new immutable hash set that contains the specified array of items.</summary>
      <param name="items">An array that contains the items to prepopulate the hash set with.</param>
      <typeparam name="T">The type of items in the immutable hash set.</typeparam>
      <returns>A new immutable hash set that contains the specified items.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.Create``1(System.Collections.Generic.IEqualityComparer{``0},``0[])">
      <summary>Creates a new immutable hash set that contains the items in the specified collection and uses the specified equality comparer for the set type.</summary>
      <param name="equalityComparer">The object to use for comparing objects in the set for equality.</param>
      <param name="items">An array that contains the items to prepopulate the hash set with.</param>
      <typeparam name="T">The type of items stored in the immutable hash set.</typeparam>
      <returns>A new immutable hash set that contains the specified items.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateBuilder``1">
      <summary>Creates a new immutable hash set builder.</summary>
      <typeparam name="T">The type of items stored by the collection.</typeparam>
      <returns>The immutable hash set builder.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.CreateBuilder``1(System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Creates a new immutable hash set builder.</summary>
      <param name="equalityComparer">The object to use for comparing objects in the set for equality.</param>
      <typeparam name="T">The type of items stored by the collection.</typeparam>
      <returns>The new immutable hash set builder.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Enumerates a sequence, produces an immutable hash set of its contents, and uses the specified equality comparer for the set type.</summary>
      <param name="source">The sequence to enumerate.</param>
      <param name="equalityComparer">The object to use for comparing objects in the set for equality.</param>
      <typeparam name="TSource">The type of the elements in the sequence.</typeparam>
      <returns>An immutable hash set that contains the items in the specified sequence and uses the specified equality comparer.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableHashSet.ToImmutableHashSet``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Enumerates a sequence and produces an immutable hash set of its contents.</summary>
      <param name="source">The sequence to enumerate.</param>
      <typeparam name="TSource">The type of the elements in the sequence.</typeparam>
      <returns>An immutable hash set that contains the items in the specified sequence.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableInterlocked">
      <summary>Contains interlocked exchange mechanisms for immutable collections.  
 NuGet package: System.Collections.Immutable (about immutable collections and how to install)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Update``1(``0@,System.Func{``0,``0})">
      <summary>Mutates a value in-place with optimistic locking transaction semantics             via a specified transformation function.             The transformation is retried as many times as necessary to win the optimistic locking race.</summary>
      <param name="location">The variable or field to be changed, which may be accessed by multiple threads.</param>
      <param name="transformer">A function that mutates the value. This function should be side-effect free,              as it may run multiple times when races occur with other threads.</param>
      <typeparam name="T">The type of data.</typeparam>
      <returns>true if the location&amp;#39;s value is changed by applying the result of the              <paramref name="transformer">transformer</paramref> function;             false if the location&amp;#39;s value remained the same because the last              invocation of <paramref name="transformer">transformer</paramref> returned the existing value.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Update``2(``0@,System.Func{``0,``1,``0},``1)">
      <summary>Mutates a value in-place with optimistic locking transaction semantics             via a specified transformation function.             The transformation is retried as many times as necessary to win the optimistic locking race.</summary>
      <param name="location">The variable or field to be changed, which may be accessed by multiple threads.</param>
      <param name="transformer">A function that mutates the value. This function should be side-effect free,              as it may run multiple times when races occur with other threads.</param>
      <param name="transformerArgument">The argument to pass to transformer.</param>
      <typeparam name="T">The type of data.</typeparam>
      <typeparam name="TArg">The type of argument passed to the transformer.</typeparam>
      <returns>true if the location&amp;#39;s value is changed by applying the result of the              <paramref name="transformer">transformer</paramref> function;             false if the location&amp;#39;s value remained the same because the last              invocation of <paramref name="transformer">transformer</paramref> returned the existing value.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedExchange``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Sets an array to the specified array and returns a reference to the original array, as an atomic operation.</summary>
      <param name="location">The array to set to the specified value.</param>
      <param name="value">The value to which the location parameter is set.</param>
      <typeparam name="T">The type of element stored by the array.</typeparam>
      <returns>The original value of <paramref name="location">location</paramref>.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedCompareExchange``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0},System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Compares two immutable arrays for equality and, if they are equal, replaces one of the arrays.</summary>
      <param name="location">The destination, whose value is compared with comparand and possibly replaced.</param>
      <param name="value">The value that replaces the destination value if the comparison results in equality.</param>
      <param name="comparand">The value that is compared to the value at location.</param>
      <typeparam name="T">The type of element stored by the array.</typeparam>
      <returns>The original value in <paramref name="location">location</paramref>.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.InterlockedInitialize``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0})">
      <summary>Sets an array to the specified array if the array has not been initialized.</summary>
      <param name="location">The array to set to the specified value.</param>
      <param name="value">The value to which the location parameter is set, if it’s not initialized.</param>
      <typeparam name="T">The type of element stored by the array.</typeparam>
      <returns>true if the array was assigned the specified value;  otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``3(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``2,``1},``2)">
      <summary>Gets the value for the specified key from the dictionary, or if the key was not found, adds a new value to the dictionary.</summary>
      <param name="location">The variable or field to update if the specified is not in the dictionary.</param>
      <param name="key">The key for the value to retrieve or add.</param>
      <param name="valueFactory">The function to execute to obtain the value to insert into the dictionary if the key is not found.</param>
      <param name="factoryArgument">The argument to pass to the value factory.</param>
      <typeparam name="TKey">The type of the keys contained in the collection.</typeparam>
      <typeparam name="TValue">The type of the values contained in the collection.</typeparam>
      <typeparam name="TArg">
      </typeparam>
      <returns>The value at the specified key or <paramref name="valueFactory">valueFactory</paramref> if the key was not present.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``1})">
      <summary>Gets the value for the specified key from the dictionary, or if the key was not found, adds a new value to the dictionary.</summary>
      <param name="location">The variable or field to atomically update if the specified  is not in the dictionary.</param>
      <param name="key">The key for the value to retrieve or add.</param>
      <param name="valueFactory">The function to execute to obtain the value to insert into the dictionary if the key is not found. This delegate will not be invoked more than once.</param>
      <typeparam name="TKey">The type of the keys contained in the collection.</typeparam>
      <typeparam name="TValue">The type of the values contained in the collection.</typeparam>
      <returns>The value at the specified key or <paramref name="valueFactory">valueFactory</paramref> if the key was not present.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1)">
      <summary>Gets the value for the specified key from the dictionary, or if the key was not found, adds a new value to the dictionary.</summary>
      <param name="location">The variable or field to atomically update if the specified key is not in the dictionary.</param>
      <param name="key">The key for the value to get or add.</param>
      <param name="value">The value to add to the dictionary the key is not found.</param>
      <typeparam name="TKey">The type of the keys contained in the collection.</typeparam>
      <typeparam name="TValue">The type of the values contained in the collection.</typeparam>
      <returns>The value at the specified key or <paramref name="valueFactory">valueFactory</paramref> if the key was not present.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``1},System.Func{``0,``1,``1})">
      <summary>Obtains the value from a dictionary after having added it or updated an existing entry.</summary>
      <param name="location">The variable or field to atomically update if the specified  is not in the dictionary.</param>
      <param name="key">The key for the value to add or update.</param>
      <param name="addValueFactory">The function that receives the key and returns a new value to add to the dictionary when no value previously exists.</param>
      <param name="updateValueFactory">The function that receives the key and prior value and returns the new value with which to update the dictionary.</param>
      <typeparam name="TKey">
      </typeparam>
      <typeparam name="TValue">
      </typeparam>
      <returns>The added or updated value.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1,System.Func{``0,``1,``1})">
      <summary>Obtains the value from a dictionary after having added it or updated an existing entry.</summary>
      <param name="location">The variable or field to atomically update if the specified  is not in the dictionary.</param>
      <param name="key">The key for the value to add or update.</param>
      <param name="addValue">The value to use if no previous value exists.</param>
      <param name="updateValueFactory">The function that receives the key and prior value and returns the new value with which to update the dictionary.</param>
      <typeparam name="TKey">
      </typeparam>
      <typeparam name="TValue">
      </typeparam>
      <returns>The added or updated value.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1)">
      <summary>Adds the specified key and value to the dictionary if the key is not in the dictionary.</summary>
      <param name="location">The dictionary to update with the specified key and value.</param>
      <param name="key">The key to add, if is not already defined in the dictionary.</param>
      <param name="value">The value to add.</param>
      <typeparam name="TKey">The type of the keys contained in the collection.</typeparam>
      <typeparam name="TValue">The type of the values contained in the collection.</typeparam>
      <returns>true if the key is not in the dictionary; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1,``1)">
      <summary>Sets the specified key to the specified value if the specified key already is set to a specific value.</summary>
      <param name="location">The dictionary to update.</param>
      <param name="key">The key to update.</param>
      <param name="newValue">The new value to set.</param>
      <param name="comparisonValue">The current value for key in order for the update to succeed.</param>
      <typeparam name="TKey">The type of the keys contained in the collection.</typeparam>
      <typeparam name="TValue">The type of the values contained in the collection.</typeparam>
      <returns>true if <paramref name="key">key</paramref> and <paramref name="comparisonValue">comparisonValue</paramref> are present in the dictionary and comparison was updated to <paramref name="newValue">newValue</paramref>; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryRemove``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1@)">
      <summary>Removes the element with the specified key, if the key exists.</summary>
      <param name="location">The dictionary to update.</param>
      <param name="key">The key to remove.</param>
      <param name="value">Receives the value of the removed item, if the dictionary is not empty.</param>
      <typeparam name="TKey">The type of the keys contained in the collection.</typeparam>
      <typeparam name="TValue">The type of the values contained in the collection.</typeparam>
      <returns>true if the key was found and removed; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryPop``1(System.Collections.Immutable.ImmutableStack{``0}@,``0@)">
      <summary>Removes an element from the top of the stack, if there is an element to remove.</summary>
      <param name="location">The stack to update.</param>
      <param name="value">Receives the value removed from the stack, if the stack is not empty.</param>
      <typeparam name="T">The type of items in the stack.</typeparam>
      <returns>true if an element is removed from the stack; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Push``1(System.Collections.Immutable.ImmutableStack{``0}@,``0)">
      <summary>Pushes a new element onto the stack.</summary>
      <param name="location">The stack to update.</param>
      <param name="value">The value to push on the stack.</param>
      <typeparam name="T">The type of items in the stack.</typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.TryDequeue``1(System.Collections.Immutable.ImmutableQueue{``0}@,``0@)">
      <summary>Atomically removes and returns the specified element at the head of the queue, if the queue is not empty.</summary>
      <param name="location">The variable or field to atomically update.</param>
      <param name="value">Set to the value from the head of the queue, if the queue not empty.</param>
      <typeparam name="T">The type of items in the queue.</typeparam>
      <returns>true if the queue is not empty and the head element is removed; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableInterlocked.Enqueue``1(System.Collections.Immutable.ImmutableQueue{``0}@,``0)">
      <summary>Atomically enqueues an element to the end of a queue.</summary>
      <param name="location">The variable or field to atomically update.</param>
      <param name="value">The value to enqueue.</param>
      <typeparam name="T">The type of items contained in the collection</typeparam>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList">
      <summary>Provides a set of initialization methods for instances of the <see cref="T:System.Collections.Immutable.ImmutableList`1"></see> class.  
 NuGet package: System.Collections.Immutable (about immutable collections and how to install)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Create``1">
      <summary>Creates an empty immutable list.</summary>
      <typeparam name="T">The type of items to be stored in the .</typeparam>
      <returns>An empty .</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Create``1(``0)">
      <summary>Creates a new immutable list that contains the specified item.</summary>
      <param name="item">The item to prepopulate the list with.</param>
      <typeparam name="T">The type of items in the .</typeparam>
      <returns>A new  that contains the specified item.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Creates a new immutable list that contains the specified items.</summary>
      <param name="items">The items to add to the list.</param>
      <typeparam name="T">The type of items in the .</typeparam>
      <returns>Returns an immutable list that contains the specified items.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Create``1(``0[])">
      <summary>Creates a new immutable list that contains the specified array of items.</summary>
      <param name="items">An array that contains the items to prepopulate the list with.</param>
      <typeparam name="T">The type of items in the .</typeparam>
      <returns>A new immutable list that contains the specified items.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.CreateBuilder``1">
      <summary>Creates a new immutable list builder.</summary>
      <typeparam name="T">The type of items stored by the collection.</typeparam>
      <returns>The immutable collection builder.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.ToImmutableList``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Enumerates a sequence and produces an immutable list of its contents.</summary>
      <param name="source">The sequence to enumerate.</param>
      <typeparam name="TSource">The type of the elements in the sequence.</typeparam>
      <returns>An immutable list that contains the items in the specified sequence.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Replace``1(System.Collections.Immutable.IImmutableList{``0},``0,``0)">
      <summary>Replaces the first equal element in the list with the specified element.</summary>
      <param name="list">The list to search.</param>
      <param name="oldValue">The element to replace.</param>
      <param name="newValue">The element to replace the old element with.</param>
      <typeparam name="T">The type of items in the list.</typeparam>
      <returns>The new list -- even if the value being replaced is equal to the new value for that position.</returns>
      <exception cref="T:System.ArgumentException">Thrown when the old value does not exist in the list.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.Remove``1(System.Collections.Immutable.IImmutableList{``0},``0)">
      <summary>Removes the specified value from this list.</summary>
      <param name="list">The list to search.</param>
      <param name="value">The value to remove.</param>
      <typeparam name="T">The type of items in the list.</typeparam>
      <returns>A new immutable list with the element removed, or this list if the element is not in this list.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.RemoveRange``1(System.Collections.Immutable.IImmutableList{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Removes the specified values from this list.</summary>
      <param name="list">The list to search.</param>
      <param name="items">The items to remove if matches are found in this list.</param>
      <typeparam name="T">The type of items in the list.</typeparam>
      <returns>A new immutable list with the elements removed.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0)">
      <summary>Searches for the specified object and returns the zero-based index of the first occurrence within the list.</summary>
      <param name="list">The list to search.</param>
      <param name="item">The object to locate in the list. The value can be null for reference types.</param>
      <typeparam name="T">The type of items in the list.</typeparam>
      <returns>The zero-based index of the first occurrence of item within the range of elements in the list that extends from index to the last element, if found; otherwise, –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Searches for the specified object and returns the zero-based index of the first occurrence within the list.</summary>
      <param name="list">The list to search.</param>
      <param name="item">The object to locate in the Immutable list. The value can be null for reference types.</param>
      <param name="equalityComparer">The equality comparer to use in the search.</param>
      <typeparam name="T">The type of items in the list.</typeparam>
      <returns>The zero-based index of the first occurrence of item within the range of elements in the immutable list that extends from index to the last element, if found; otherwise, –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32)">
      <summary>Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the immutable list that extends from the specified index to the last element.</summary>
      <param name="list">The list to search.</param>
      <param name="item">The object to locate in the Immutable list. The value can be null for reference types.</param>
      <param name="startIndex">The zero-based starting index of the search. 0 (zero) is valid in an empty list.</param>
      <typeparam name="T">The type of items in the list.</typeparam>
      <returns>The zero-based index of the first occurrence of item within the range of elements in the Immutable list that extends from index to the last element, if found; otherwise, –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32,System.Int32)">
      <summary>Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the immutable list that extends from the specified index to the last element.</summary>
      <param name="list">The list to search.</param>
      <param name="item">The object to locate in the Immutable list. The value can be null for reference types.</param>
      <param name="startIndex">The zero-based starting index of the search. 0 (zero) is valid in an empty list.</param>
      <param name="count">The number of elements in the section to search.</param>
      <typeparam name="T">The type of items in the list.</typeparam>
      <returns>The zero-based index of the first occurrence of item within the range of elements in the Immutable list that extends from index to the last element, if found; otherwise, –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0)">
      <summary>Searches for the specified object and returns the zero-based index of the last occurrence within the entire immutable list.</summary>
      <param name="list">The list to search.</param>
      <param name="item">The object to locate in the Immutable list. The value can be null for reference types.</param>
      <typeparam name="T">The type of items in the list.</typeparam>
      <returns>The zero-based index of the last occurrence of item within the entire the Immutable list, if found; otherwise, –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Searches for the specified object and returns the zero-based index of the last occurrence within the entire immutable list.</summary>
      <param name="list">The list to search.</param>
      <param name="item">The object to locate in the Immutable list. The value can be null for reference types.</param>
      <param name="equalityComparer">The equality comparer to use in the search.</param>
      <typeparam name="T">The type of items in the list.</typeparam>
      <returns>The zero-based index of the last occurrence of item within the entire the Immutable list, if found; otherwise, –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32)">
      <summary>Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the immutable list that extends from the first element to the specified index.</summary>
      <param name="list">The list to search.</param>
      <param name="item">The object to locate in the Immutable list. The value can be null for reference types.</param>
      <param name="startIndex">The zero-based starting index of the backward search.</param>
      <typeparam name="T">The type of items in the list.</typeparam>
      <returns>The zero-based index of the last occurrence of item within the range of elements in the Immutable list that extends from the first element to index, if found; otherwise, –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32,System.Int32)">
      <summary>Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the immutable list that extends from the first element to the specified index.</summary>
      <param name="list">The list to search.</param>
      <param name="item">The object to locate in the Immutable list. The value can be null for reference types.</param>
      <param name="startIndex">The zero-based starting index of the backward search.</param>
      <param name="count">The number of elements in the section to search.</param>
      <typeparam name="T">The type of items in the list.</typeparam>
      <returns>The zero-based index of the last occurrence of item within the range of elements in the Immutable list that extends from the first element to index, if found; otherwise, –1.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList`1">
      <summary>Represents an immutable list, which is a strongly typed list of objects that can be accessed by index.  
 NuGet package: System.Collections.Immutable (about immutable collections and how to install)</summary>
      <typeparam name="T">The type of elements in the list.</typeparam>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList`1.Builder">
      <summary>Represents a list that mutates with little or no memory allocations and that can produce or build on immutable list instances very efficiently.  
 NuGet package: System.Collections.Immutable (about immutable collections and how to install)</summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.RemoveAt(System.Int32)">
      <summary>Removes the item at the specified index of the immutable list.</summary>
      <param name="index">The zero-based index of the item to remove from the list.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Clear">
      <summary>Removes all items from the immutable list.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>An enumerator that can be used to iterate through the list.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.GetRange(System.Int32,System.Int32)">
      <summary>Creates a shallow copy of a range of elements in the source immutable list.</summary>
      <param name="index">The zero-based index at which the range starts.</param>
      <param name="count">The number of elements in the range.</param>
      <returns>A shallow copy of a range of elements in the source immutable list.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Reverse">
      <summary>Reverses the order of the elements in the entire immutable list.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Reverse(System.Int32,System.Int32)">
      <summary>Reverses the order of the elements in the specified range of the immutable list.</summary>
      <param name="index">The zero-based starting index of the range to reverse.</param>
      <param name="count">The number of elements in the range to reverse.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.Sort">
      <summary>Sorts the elements in the entire immutable list by using the default comparer.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Builder.ToImmutable">
      <summary>Creates an immutable list based on the contents of this instance.</summary>
      <returns>An immutable list.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.Count">
      <summary>Gets the number of elements in this immutable list.</summary>
      <returns>The number of elements in this list.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Builder.Item(System.Int32)">
      <summary>Gets or sets the value for a given index in the list.</summary>
      <param name="index">The index of the item to get or set.</param>
      <returns>The value at the specified index.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableList`1.Enumerator">
      <summary>Enumerates the contents of a binary tree.  
 NuGet package: System.Collections.Immutable (about immutable collections and how to install)</summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Enumerator.Dispose">
      <summary>Releases the resources used by the current instance of the <see cref="T:System.Collections.Immutable.ImmutableList`1.Enumerator"></see> class.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Enumerator.MoveNext">
      <summary>Advances enumeration to the next element of the immutable list.</summary>
      <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the list.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Enumerator.Reset">
      <summary>Sets the enumerator to its initial position, which is before the first element in the immutable list.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Enumerator.Current">
      <summary>Gets the element at the current position of the enumerator.</summary>
      <returns>The element at the current position of the enumerator.</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableList`1.Empty">
      <summary>Gets an empty set with the default sort comparer.</summary>
      <returns>
      </returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Clear">
      <summary>Removes all elements from the immutable list.</summary>
      <returns>An empty list that retains the same sort or unordered semantics that this instance has.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.BinarySearch(`0)">
      <summary>Searches the entire sorted list for an element using the default comparer and returns the zero-based index of the element.</summary>
      <param name="item">The object to locate. The value can be null for reference types.</param>
      <returns>The zero-based index of item in the sorted List, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than item or, if there is no larger element, the bitwise complement of <see cref="System.Collections.ICollection.Count"></see>.</returns>
      <exception cref="T:System.InvalidOperationException">The default comparer cannot find a comparer implementation of the for type T.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
      <summary>Searches the entire sorted list for an element using the specified comparer and returns the zero-based index of the element.</summary>
      <param name="item">The object to locate. The value can be null for reference types.</param>
      <param name="comparer">The  comparer implementation to use when comparing elements or null to use the default comparer.</param>
      <returns>The zero-based index of item in the sorted List, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than item or, if there is no larger element, the bitwise complement of <see cref="System.Collections.ICollection.Count"></see>.</returns>
      <exception cref="T:System.InvalidOperationException">comparer is null, and the default comparer cannot find an comparer implementation for type T.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
      <summary>Searches a range of elements in the sorted list for an element using the specified comparer and returns the zero-based index of the element.</summary>
      <param name="index">The zero-based starting index of the range to search.</param>
      <param name="count">The length of the range to search.</param>
      <param name="item">The object to locate. The value can be null for reference types.</param>
      <param name="comparer">The comparer implementation to use when comparing elements, or null to use the default comparer.</param>
      <returns>The zero-based index of item in the sorted list, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than item or, if there is no larger element, the bitwise complement of <paramref name="count">count</paramref>.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">index is less than 0 or <paramref name="count">count</paramref> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">index and <paramref name="count">count</paramref> do not denote a valid range in the list.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="comparer">comparer</paramref> is null, and the default comparer cannot find an comparer implementation for type T.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ToBuilder">
      <summary>Creates a list that has the same contents as this list and can be efficiently mutated across multiple operations using standard mutable interfaces.</summary>
      <returns>The created list with the same contents as this list.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Add(`0)">
      <summary>Adds the specified object to the end of the immutable list.</summary>
      <param name="value">The object to add.</param>
      <returns>A new immutable list with the object added, or the current list if it already contains the specified object.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Adds the elements of the specified collection to the end of the immutable list.</summary>
      <param name="items">The collection whose elements will be added to the end of the list.</param>
      <returns>A new immutable list with the elements added, or the current list if it already contains the specified elements.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Insert(System.Int32,`0)">
      <summary>Inserts the specified object into the immutable list at the specified index.</summary>
      <param name="index">The zero-based index at which to insert the object.</param>
      <param name="item">The object to insert.</param>
      <returns>The new immutable list after the object is inserted.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary>Inserts the elements of a collection into the immutable list at the specified index.</summary>
      <param name="index">The zero-based index at which to insert the elements.</param>
      <param name="items">The collection whose elements should be inserted.</param>
      <returns>The new immutable list after the elements are inserted.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Remove(`0)">
      <summary>Removes the first occurrence of the specified object from this immutable list.</summary>
      <param name="value">The object to remove.</param>
      <returns>A new list with the object removed, or this list if the specified object is not in this list.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Removes the first occurrence of the object that matches the specified value from this immutable list.</summary>
      <param name="value">The value of the element to remove from the list.</param>
      <param name="equalityComparer">The equality comparer to use in the search.</param>
      <returns>A new list with the object removed, or this list if the specified object is not in this list.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Int32,System.Int32)">
      <summary>Removes a range of elements, starting from the specified index and containing the specified number of elements, from this immutable list.</summary>
      <param name="index">The starting index to begin removal.</param>
      <param name="count">The number of elements to remove.</param>
      <returns>A new list with the elements removed.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Removes a range of elements from this immutable list.</summary>
      <param name="items">The collection whose elements should be removed if matches are found in this list.</param>
      <returns>A new list with the elements removed.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Removes the specified values from this list.</summary>
      <param name="items">The items to remove if matches are found in this list.</param>
      <param name="equalityComparer">The equality comparer to use in the search.</param>
      <returns>A new list with the elements removed.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveAt(System.Int32)">
      <summary>Removes the element at the specified index.</summary>
      <param name="index">The zero-based index of the element to remove.</param>
      <returns>A new list with the element removed.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.RemoveAll(System.Predicate{`0})">
      <summary>Removes all the elements that match the conditions defined by the specified predicate.</summary>
      <param name="match">The delegate that defines the conditions of the elements to remove.</param>
      <returns>The new list with the elements removed.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.SetItem(System.Int32,`0)">
      <summary>Replaces an element at a given position in the immutable list with the specified element.</summary>
      <param name="index">The position in the list of the element to replace.</param>
      <param name="value">The element to replace the old element with.</param>
      <returns>The new list with the replaced element, even if it is equal to the old element at that position.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Replace(`0,`0)">
      <summary>Replaces the specified element in the immutable list with a new element.</summary>
      <param name="oldValue">The element to replace.</param>
      <param name="newValue">The element to replace oldValue with.</param>
      <returns>The new list with the replaced element, even if it is equal to the old element.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="oldValue">oldValue</paramref> does not exist in the immutable list.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Replaces the specified element in the immutable list with a new element.</summary>
      <param name="oldValue">The element to replace in the list.</param>
      <param name="newValue">The element to replace oldValue with.</param>
      <param name="equalityComparer">The comparer to use to check for equality.</param>
      <returns>A new list with the object replaced, or this list if the specified object is not in this list.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Reverse">
      <summary>Reverses the order of the elements in the entire immutable list.</summary>
      <returns>The reversed list.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Reverse(System.Int32,System.Int32)">
      <summary>Reverses the order of the elements in the specified range of the immutable list.</summary>
      <param name="index">The zero-based starting index of the range to reverse.</param>
      <param name="count">The number of elements in the range to reverse.</param>
      <returns>The reversed list.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort">
      <summary>Sorts the elements in the entire immutable list using the default comparer.</summary>
      <returns>The sorted list.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort(System.Comparison{`0})">
      <summary>Sorts the elements in the entire immutable list using the specified comparer.</summary>
      <param name="comparison">The delegate to use when comparing elements.</param>
      <returns>The sorted list.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort(System.Collections.Generic.IComparer{`0})">
      <summary>Sorts the elements in the entire immutable list using the specified comparer.</summary>
      <param name="comparer">The  implementation to use when comparing elements, or null to use the default comparer (<see cref="P:System.Collections.Generic.Comparer`1.Default"></see>).</param>
      <returns>The sorted list.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary>Sorts a range of elements in the immutable list using the specified comparer.</summary>
      <param name="index">The zero-based starting index of the range to sort.</param>
      <param name="count">The length of the range to sort.</param>
      <param name="comparer">The implementation to use when comparing elements, or null to use the default comparer (<see cref="P:System.Collections.Generic.Comparer`1.Default"></see>).</param>
      <returns>The sorted list.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ForEach(System.Action{`0})">
      <summary>Performs the specified action on each element of the immutable list.</summary>
      <param name="action">The delegate to perform on each element of the immutable list.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.CopyTo(`0[])">
      <summary>Copies the entire immutable list to a compatible one-dimensional array, starting at the beginning of the target array.</summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from the immutable list. The array must have zero-based indexing.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.CopyTo(`0[],System.Int32)">
      <summary>Copies the entire immutable list to a compatible one-dimensional array, starting at the specified index of the target array.</summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from the immutable list. The array must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
      <summary>Copies a range of elements from the immutable list to a compatible one-dimensional array, starting at the specified index of the target array.</summary>
      <param name="index">The zero-based index in the source immutable list at which copying begins.</param>
      <param name="array">The one-dimensional array that is the destination of the elements copied from the immutable list. The array must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
      <param name="count">The number of elements to copy.</param>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.GetRange(System.Int32,System.Int32)">
      <summary>Creates a shallow copy of a range of elements in the source immutable list.</summary>
      <param name="index">The zero-based index at which the range starts.</param>
      <param name="count">The number of elements in the range.</param>
      <returns>A shallow copy of a range of elements in the source immutable list.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.ConvertAll``1(System.Func{`0,``0})">
      <summary>Converts the elements in the current immutable list to another type, and returns a list containing the converted elements.</summary>
      <param name="converter">A delegate that converts each element from one type to another type.</param>
      <typeparam name="TOutput">The type of the elements of the target array.</typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Exists(System.Predicate{`0})">
      <summary>Determines whether the immutable list contains elements that match the conditions defined by the specified predicate.</summary>
      <param name="match">The delegate that defines the conditions of the elements to search for.</param>
      <returns>true if the immutable list contains one or more elements that match the conditions defined by the specified predicate; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Find(System.Predicate{`0})">
      <summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire immutable list.</summary>
      <param name="match">The delegate that defines the conditions of the element to search for.</param>
      <returns>The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type <paramref name="T">T</paramref>.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindAll(System.Predicate{`0})">
      <summary>Retrieves all the elements that match the conditions defined by the specified predicate.</summary>
      <param name="match">The delegate that defines the conditions of the elements to search for.</param>
      <returns>An immutable list that contains all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty immutable list.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindIndex(System.Predicate{`0})">
      <summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire immutable list.</summary>
      <param name="match">The delegate that defines the conditions of the element to search for.</param>
      <returns>The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, ?1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindIndex(System.Int32,System.Predicate{`0})">
      <summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the immutable list that extends from the specified index to the last element.</summary>
      <param name="startIndex">The zero-based starting index of the search.</param>
      <param name="match">The delegate that defines the conditions of the element to search for.</param>
      <returns>The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, ?1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the immutable list that starts at the specified index and contains the specified number of elements.</summary>
      <param name="startIndex">The zero-based starting index of the search.</param>
      <param name="count">The number of elements in the section to search.</param>
      <param name="match">The delegate that defines the conditions of the element to search for.</param>
      <returns>The zero-based index of the first occurrence of an element that matches the conditions defined by match, if found; otherwise, ?1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLast(System.Predicate{`0})">
      <summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire immutable list.</summary>
      <param name="match">The delegate that defines the conditions of the element to search for.</param>
      <returns>The last element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type <paramref name="T">T</paramref>.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Predicate{`0})">
      <summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire immutable list.</summary>
      <param name="match">The delegate that defines the conditions of the element to search for.</param>
      <returns>The zero-based index of the last occurrence of an element that matches the conditions defined by <paramref name="match">match</paramref>, if found; otherwise, ?1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Int32,System.Predicate{`0})">
      <summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the immutable list that extends from the first element to the specified index.</summary>
      <param name="startIndex">The zero-based starting index of the backward search.</param>
      <param name="match">The delegate that defines the conditions of the element to search for.</param>
      <returns>The zero-based index of the last occurrence of an element that matches the conditions defined by <paramref name="match">match</paramref>, if found; otherwise, ?1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the immutable list that contains the specified number of elements and ends at the specified index.</summary>
      <param name="startIndex">The zero-based starting index of the backward search.</param>
      <param name="count">The number of elements in the section to search.</param>
      <param name="match">The delegate that defines the conditions of the element to search for.</param>
      <returns>The zero-based index of the last occurrence of an element that matches the conditions defined by <paramref name="match">match</paramref>, if found; otherwise, ?1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the list that starts at the specified index and contains the specified number of elements.</summary>
      <param name="item">The object to locate in the list The value can be null for reference types.</param>
      <param name="index">The zero-based starting index of the search. 0 (zero) is valid in an empty list.</param>
      <param name="count">The number of elements in the section to search.</param>
      <param name="equalityComparer">The equality comparer to use in the search.</param>
      <returns>The zero-based index of the first occurrence of item within the range of elements in the list that starts at index and contains count number of elements, if found; otherwise, –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the list that contains the specified number of elements and ends at the specified index.</summary>
      <param name="item">The object to locate in the list. The value can be null for reference types.</param>
      <param name="index">The zero-based starting index of the backward search.</param>
      <param name="count">The number of elements in the section to search.</param>
      <param name="equalityComparer">The equality comparer to use in the search.</param>
      <returns>The zero-based index of the last occurrence of item within the range of elements in the list that contains count number of elements and ends at index, if found; otherwise, –1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.TrueForAll(System.Predicate{`0})">
      <summary>Determines whether every element in the immutable list matches the conditions defined by the specified predicate.</summary>
      <param name="match">The delegate that defines the conditions to check against the elements.</param>
      <returns>true if every element in the immutable list matches the conditions defined by the specified predicate; otherwise, false. If the list has no elements, the return value is true.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.Contains(`0)">
      <summary>Determines whether this immutable list contains the specified value.</summary>
      <param name="value">The value to locate.</param>
      <returns>true if the list contains the specified value; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.IndexOf(`0)">
      <summary>Searches for the specified object and returns the zero-based index of the first occurrence within the entire immutable list.</summary>
      <param name="value">The object to locate in the immutable list. The value can be null for reference types.</param>
      <returns>The zero-based index of the first occurrence of <paramref name="value">value</paramref> within the entire immutable list, if found; otherwise, ?1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableList`1.GetEnumerator">
      <summary>Returns an enumerator that iterates through the immutable list.</summary>
      <returns>An enumerator  that can be used to iterate through the immutable list.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.IsEmpty">
      <summary>Gets a value that indicates whether this list is empty.</summary>
      <returns>true if the list is empty; otherwise, false.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Count">
      <summary>Gets the number of elements contained in the list.</summary>
      <returns>The number of elements in the list.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableList`1.Item(System.Int32)">
      <summary>Gets the element at the specified index of the list.</summary>
      <param name="index">The index of the element to retrieve.</param>
      <returns>The element at the specified index.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableQueue">
      <summary>Provides a set of initialization methods for instances of the <see cref="T:System.Collections.Immutable.ImmutableQueue`1"></see> class.  
 NuGet package: System.Collections.Immutable (about immutable collections and how to install)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Create``1">
      <summary>Creates an empty immutable queue.</summary>
      <typeparam name="T">The type of items to be stored in the immutable queue.</typeparam>
      <returns>An empty immutable queue.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Create``1(``0)">
      <summary>Creates a new immutable queue that contains the specified item.</summary>
      <param name="item">The item to prepopulate the queue with.</param>
      <typeparam name="T">The type of items in the immutable queue.</typeparam>
      <returns>A new immutable queue that contains the specified item.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Creates a new immutable queue that contains the specified items.</summary>
      <param name="items">The items to add to the queue before immutability is applied.</param>
      <typeparam name="T">The type of elements in the queue.</typeparam>
      <returns>An immutable queue that contains the specified items.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Create``1(``0[])">
      <summary>Creates a new immutable queue that contains the specified array of items.</summary>
      <param name="items">An array that contains the items to prepopulate the queue with.</param>
      <typeparam name="T">The type of items in the immutable queue.</typeparam>
      <returns>A new immutable queue that contains the specified items.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue.Dequeue``1(System.Collections.Immutable.IImmutableQueue{``0},``0@)">
      <summary>Removes the item at the beginning of the immutable queue, and returns the new queue.</summary>
      <param name="queue">The queue to remove the item from.</param>
      <param name="value">When this method returns, contains the item from the beginning of the queue.</param>
      <typeparam name="T">The type of elements in the immutable queue.</typeparam>
      <returns>The new queue with the item removed.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableQueue`1">
      <summary>Represents an immutable queue.  
 NuGet package: System.Collections.Immutable (about immutable collections and how to install)</summary>
      <typeparam name="T">The type of elements in the queue.</typeparam>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableQueue`1.Enumerator">
      <summary>Enumerates the contents of an immutable queue without allocating any memory.  
 NuGet package: System.Collections.Immutable (about immutable collections and how to install)</summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Enumerator.MoveNext">
      <summary>Advances the enumerator to the next element of the immutable queue.</summary>
      <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the queue.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableQueue`1.Enumerator.Current">
      <summary>Gets the element at the current position of the enumerator.</summary>
      <returns>The element at the current position of the enumerator.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Clear">
      <summary>Removes all objects from the immutable queue.</summary>
      <returns>The empty immutable queue.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Peek">
      <summary>Returns the element at the beginning of the immutable queue without removing it.</summary>
      <returns>The element at the beginning of the queue.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Enqueue(`0)">
      <summary>Adds an element to the end of the immutable queue, and returns the new queue.</summary>
      <param name="value">The element to add.</param>
      <returns>The new immutable queue.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Dequeue">
      <summary>Removes the element at the beginning of the immutable queue, and returns the new queue.</summary>
      <returns>The new immutable queue; never null.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.Dequeue(`0@)">
      <summary>Removes the item at the beginning of the immutable queue, and returns the new queue.</summary>
      <param name="value">When this method returns, contains the element from the beginning of the queue.</param>
      <returns>The new immutable queue with the beginning element removed.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableQueue`1.GetEnumerator">
      <summary>Returns an enumerator that iterates through the immutable queue.</summary>
      <returns>An enumerator that can be used to iterate through the queue.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableQueue`1.IsEmpty">
      <summary>Gets a value that indicates whether this immutable queue is empty.  
 NuGet package: System.Collections.Immutable (about immutable collections and how to install)</summary>
      <returns>true if this queue is empty; otherwise, false.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableQueue`1.Empty">
      <summary>Gets an empty immutable queue.</summary>
      <returns>An empty immutable queue.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary">
      <summary>Provides a set of initialization methods for instances of the <see cref="T:System.Collections.Immutable.ImmutableSortedDictionary`2"></see> class.  
 NuGet package: System.Collections.Immutable (about immutable collections and how to install)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.Create``2">
      <summary>Creates an empty immutable sorted dictionary.</summary>
      <typeparam name="TKey">The type of keys stored by the dictionary.</typeparam>
      <typeparam name="TValue">The type of values stored by the dictionary.</typeparam>
      <returns>An empty immutable sorted dictionary.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.Create``2(System.Collections.Generic.IComparer{``0})">
      <summary>Creates an empty immutable sorted dictionary that uses the specified key comparer.</summary>
      <param name="keyComparer">The implementation to use to determine the equality of keys in the dictionary.</param>
      <typeparam name="TKey">The type of keys stored by the dictionary.</typeparam>
      <typeparam name="TValue">The type of values stored by the dictionary.</typeparam>
      <returns>An empty immutable sorted dictionary.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.Create``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Creates an empty immutable sorted dictionary that uses the specified key and value comparers.</summary>
      <param name="keyComparer">The implementation to use to determine the equality of keys in the dictionary.</param>
      <param name="valueComparer">The implementation to use to determine the equality of values in the dictonary.</param>
      <typeparam name="TKey">The type of keys stored by the dictionary.</typeparam>
      <typeparam name="TValue">The type of values stored by the dictionary.</typeparam>
      <returns>An empty immutable sorted dictionary.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateRange``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>Creates an immutable sorted dictionary that contains the specified items and uses the default comparer.</summary>
      <param name="items">The items to add to the sorted dictionary before it’s immutable.</param>
      <typeparam name="TKey">The type of keys stored in the dictionary.</typeparam>
      <typeparam name="TValue">The type of values stored in the dictionary.</typeparam>
      <returns>An immutable sorted dictionary that contains the specified items.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateRange``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>Creates a new immutable sorted dictionary from the specified range of items with the specified key comparer.</summary>
      <param name="keyComparer">The comparer implementation to use to evaluate keys for equality and sorting.</param>
      <param name="items">The items to add to the sorted dictionary.</param>
      <typeparam name="TKey">The type of keys stored in the dictionary.</typeparam>
      <typeparam name="TValue">The type of values stored in the dictionary.</typeparam>
      <returns>The new immutable sorted dictionary that contains the specified items and uses the specified key comparer.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateRange``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>Creates a new immutable sorted dictionary from the specified range of items with the specified key and value comparers.</summary>
      <param name="keyComparer">The comparer implementation to use to compare keys for equality and sorting.</param>
      <param name="valueComparer">The comparer implementation to use to compare values for equality and sorting.</param>
      <param name="items">The items to add to the sorted dictionary before it’s immutable.</param>
      <typeparam name="TKey">The type of keys stored in the dictionary.</typeparam>
      <typeparam name="TValue">The type of values stored in the dictionary.</typeparam>
      <returns>An immutable sorted dictionary that contains the specified items and uses the specified comparers.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateBuilder``2">
      <summary>Creates a new immutable sorted dictionary builder.</summary>
      <typeparam name="TKey">The type of keys stored by the dictionary.</typeparam>
      <typeparam name="TValue">The type of values stored by the dictionary.</typeparam>
      <returns>The immutable collection builder.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateBuilder``2(System.Collections.Generic.IComparer{``0})">
      <summary>Creates a new immutable sorted dictionary builder.</summary>
      <param name="keyComparer">The key comparer.</param>
      <typeparam name="TKey">The type of keys stored by the dictionary.</typeparam>
      <typeparam name="TValue">The type of values stored by the dictionary.</typeparam>
      <returns>The immutable collection builder.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.CreateBuilder``2(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Creates a new immutable sorted dictionary builder.</summary>
      <param name="keyComparer">The key comparer.</param>
      <param name="valueComparer">The value comparer.</param>
      <typeparam name="TKey">The type of keys stored by the dictionary.</typeparam>
      <typeparam name="TValue">The type of values stored by the dictionary.</typeparam>
      <returns>The immutable collection builder.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>Enumerates and transforms a sequence, and produces an immutable sorted dictionary of its contents by using the specified key and value comparers.</summary>
      <param name="source">The sequence to enumerate to generate the dictionary.</param>
      <param name="keySelector">The function that will produce the key for the dictionary from each sequence element.</param>
      <param name="elementSelector">The function that will produce the value for the dictionary from each sequence element.</param>
      <param name="keyComparer">The key comparer to use for the dictionary.</param>
      <param name="valueComparer">The value comparer to use for the dictionary.</param>
      <typeparam name="TSource">The type of the elements in the sequence.</typeparam>
      <typeparam name="TKey">The type of the keys in the resulting dictionary.</typeparam>
      <typeparam name="TValue">The type of the values in the resulting dictionary.</typeparam>
      <returns>An immutable sorted dictionary that contains the items in the specified sequence.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IComparer{``1})">
      <summary>Enumerates and transforms a sequence, and produces an immutable sorted dictionary of its contents by using the specified key comparer.</summary>
      <param name="source">The sequence to enumerate to generate the dictionary.</param>
      <param name="keySelector">The function that will produce the key for the dictionary from each sequence element.</param>
      <param name="elementSelector">The function that will produce the value for the dictionary from each sequence element.</param>
      <param name="keyComparer">The key comparer to use for the dictionary.</param>
      <typeparam name="TSource">The type of the elements in the sequence.</typeparam>
      <typeparam name="TKey">The type of the keys in the resulting dictionary.</typeparam>
      <typeparam name="TValue">The type of the values in the resulting dictionary.</typeparam>
      <returns>An immutable dictionary that contains the items in the specified sequence.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>Enumerates and transforms a sequence, and produces an immutable sorted dictionary of its contents.</summary>
      <param name="source">The sequence to enumerate to generate the dictionary.</param>
      <param name="keySelector">The function that will produce the key for the dictionary from each sequence element.</param>
      <param name="elementSelector">The function that will produce the value for the dictionary from each sequence element.</param>
      <typeparam name="TSource">The type of the elements in the sequence.</typeparam>
      <typeparam name="TKey">The type of the keys in the resulting dictionary.</typeparam>
      <typeparam name="TValue">The type of the values in the resulting dictionary.</typeparam>
      <returns>An immutable sorted dictionary that contains the items in the specified sequence.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Enumerates a sequence of key/value pairs and produces an immutable sorted dictionary of its contents by using the specified key and value comparers.</summary>
      <param name="source">The sequence of key/value pairs to enumerate.</param>
      <param name="keyComparer">The key comparer to use when building the immutable dictionary.</param>
      <param name="valueComparer">The value comparer to use for the immutable dictionary.</param>
      <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
      <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
      <returns>An immutable sorted dictionary that contains the key/value pairs in the specified sequence.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IComparer{``0})">
      <summary>Enumerates a sequence of key/value pairs and produces an immutable dictionary of its contents by using the specified key comparer.</summary>
      <param name="source">The sequence of key/value pairs to enumerate.</param>
      <param name="keyComparer">The key comparer to use when building the immutable dictionary.</param>
      <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
      <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
      <returns>An immutable sorted dictionary that contains the key/value pairs in the specified sequence.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary.ToImmutableSortedDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
      <summary>Enumerates a sequence of key/value pairs and produces an immutable sorted dictionary of its contents.</summary>
      <param name="source">The sequence of key/value pairs to enumerate.</param>
      <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
      <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
      <returns>An immutable sorted dictionary that contains the key/value pairs in the specified sequence.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary`2">
      <summary>Represents an immutable sorted dictionary.  
 NuGet package: System.Collections.Immutable (about immutable collections and how to install)</summary>
      <typeparam name="TKey">The type of the key contained in the dictionary.</typeparam>
      <typeparam name="TValue">The type of the value contained in the dictionary.</typeparam>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder">
      <summary>Represents a sorted dictionary that mutates with little or no memory allocations and that can produce or build on immutable sorted dictionary instances very efficiently.  
 NuGet package: System.Collections.Immutable (about immutable collections and how to install)</summary>
      <typeparam name="TKey">
      </typeparam>
      <typeparam name="TValue">
      </typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Clear">
      <summary>Removes all items from the immutable sorted dictionary.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.GetEnumerator">
      <summary>Returns an enumerator that iterates through the immutable sorted dictionary.</summary>
      <returns>An enumerator that can be used to iterate through the dictionary.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ToImmutable">
      <summary>Creates an immutable sorted dictionary based on the contents of this instance.</summary>
      <returns>An immutable sorted dictionary.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Keys">
      <summary>Gets a strongly typed, read-only collection of elements.</summary>
      <returns>A strongly typed, read-only collection of elements.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Values">
      <summary>Gets a collection that contains the values of the immutable sorted dictionary.</summary>
      <returns>A collection that contains the values of the object that implements the dictionary.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.Count">
      <summary>Gets the number of elements in this immutable sorted dictionary.</summary>
      <returns>The number of elements in this dictionary.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.KeyComparer">
      <summary>Gets or sets the key comparer.</summary>
      <returns>The key comparer.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Builder.ValueComparer">
      <summary>Gets or sets the value comparer.</summary>
      <returns>The value comparer.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator">
      <summary>Enumerates the contents of a binary tree.  
 NuGet package: System.Collections.Immutable (about immutable collections and how to install)</summary>
      <typeparam name="TKey">
      </typeparam>
      <typeparam name="TValue">
      </typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.Dispose">
      <summary>Releases the resources used by the current instance of the <see cref="T:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator"></see> class.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.MoveNext">
      <summary>Advances the enumerator to the next element of the immutable sorted dictionary.</summary>
      <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the sorted dictionary.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.Reset">
      <summary>Sets the enumerator to its initial position, which is before the first element in the immutable sorted dictionary.</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Enumerator.Current">
      <summary>Gets the element at the current position of the enumerator.</summary>
      <returns>The element at the current position of the enumerator.</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableSortedDictionary`2.Empty">
      <summary>Gets an empty immutable sorted dictionary.</summary>
      <returns>
      </returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Clear">
      <summary>Retrieves an empty immutable sorted dictionary that has the same ordering and key/value comparison rules as this dictionary instance.</summary>
      <returns>An empty dictionary with equivalent ordering and key/value comparison rules.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ToBuilder">
      <summary>Creates an immutable sorted dictionary with the same contents as this dictionary that can be efficiently mutated across multiple operations by using standard mutable interfaces.</summary>
      <returns>A collection with the same contents as this dictionary.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Add(`0,`1)">
      <summary>Adds an element with the specified key and value to the immutable sorted dictionary.</summary>
      <param name="key">The key of the entry to add.</param>
      <param name="value">The value of entry to add.</param>
      <returns>A new immutable sorted dictionary that contains the additional key/value pair.</returns>
      <exception cref="T:System.ArgumentException">The given key already exists in the dictionary but has a different value.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.SetItem(`0,`1)">
      <summary>Sets the specified key and value in the immutable sorted dictionary, possibly overwriting an existing value for the given key.</summary>
      <param name="key">The key of the entry to add.</param>
      <param name="value">The key value to set.</param>
      <returns>A new immutable sorted dictionary that contains the specified key/value pair.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.SetItems(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>Sets the specified key/value pairs in the immutable sorted dictionary, possibly overwriting existing values for the keys.</summary>
      <param name="items">The key/value pairs to set in the dictionary. If any of the keys already exist in the dictionary, this method will overwrite their previous values.</param>
      <returns>An immutable dictionary that contains the specified key/value pairs.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>Adds the specific key/value pairs to the immutable sorted dictionary.</summary>
      <param name="items">The key/value pairs to add.</param>
      <returns>A new immutable dictionary that contains the additional key/value pairs.</returns>
      <exception cref="T:System.ArgumentException">One of the given keys already exists in the dictionary but has a different value.</exception>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Remove(`0)">
      <summary>Removes the element with the specified value from the immutable sorted dictionary.</summary>
      <param name="value">The value of the element to remove.</param>
      <returns>A new immutable dictionary with the specified element removed; or this instance if the specified value cannot be found in the dictionary.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Removes the elements with the specified keys from the immutable sorted dictionary.</summary>
      <param name="keys">The keys of the elements to remove.</param>
      <returns>A new immutable dictionary with the specified keys removed; or this instance if the specified keys cannot be found in the dictionary.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.WithComparers(System.Collections.Generic.IComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
      <summary>Gets an instance of the immutable sorted dictionary that uses the specified key and value comparers.</summary>
      <param name="keyComparer">The key comparer to use.</param>
      <param name="valueComparer">The value comparer to use.</param>
      <returns>An instance of the immutable dictionary that uses the given comparers.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.WithComparers(System.Collections.Generic.IComparer{`0})">
      <summary>Gets an instance of the immutable sorted dictionary that uses the specified key comparer.</summary>
      <param name="keyComparer">The key comparer to use.</param>
      <returns>An instance of the immutable dictionary that uses the given comparer.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ContainsValue(`1)">
      <summary>Determines whether the immutable sorted dictionary contains an element with the specified value.</summary>
      <param name="value">The value to locate. The value can be null for reference types.</param>
      <returns>true if the dictionary contains an element with the specified value; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.ContainsKey(`0)">
      <summary>Determines whether this immutable sorted map contains the specified key.</summary>
      <param name="key">The key to locate.</param>
      <returns>true if the immutable dictionary contains the specified key; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary>Determines whether this immutable sorted dictionary contains the specified key/value pair.</summary>
      <param name="pair">The key/value pair to locate.</param>
      <returns>true if the specified key/value pair is found in the dictionary; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.TryGetValue(`0,`1@)">
      <summary>Gets the value associated with the specified key.</summary>
      <param name="key">The key whose value will be retrieved.</param>
      <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, contains the default value for the type of the value parameter.</param>
      <returns>true if the dictionary contains an element with the specified key; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.TryGetKey(`0,`0@)">
      <summary>Determines whether this dictionary contains a specified key.</summary>
      <param name="equalKey">The key to search for.</param>
      <param name="actualKey">The matching key located in the dictionary if found, or equalkey if no match is found.</param>
      <returns>true if a match for <paramref name="equalKey">equalKey</paramref> is found; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedDictionary`2.GetEnumerator">
      <summary>Returns an enumerator that iterates through the immutable sorted dictionary.</summary>
      <returns>An enumerator that can be used to iterate through the dictionary.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.ValueComparer">
      <summary>Gets the value comparer used to determine whether values are equal.</summary>
      <returns>The value comparer used to determine whether values are equal.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.IsEmpty">
      <summary>Gets a value that indicates whether this instance of the immutable sorted dictionary is empty.</summary>
      <returns>true if this instance is empty; otherwise, false.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Count">
      <summary>Gets the number of key/value pairs in the immutable sorted dictionary.</summary>
      <returns>The number of key/value pairs in the dictionary.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Keys">
      <summary>Gets the keys in the immutable sorted dictionary.</summary>
      <returns>The keys in the immutable dictionary.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Values">
      <summary>Gets the values in the immutable sorted dictionary.</summary>
      <returns>The values in the dictionary.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.KeyComparer">
      <summary>Gets the key comparer for the immutable sorted dictionary.</summary>
      <returns>The key comparer for the dictionary.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedDictionary`2.Item(`0)">
      <summary>Gets the <paramref name="TValue">TValue</paramref> associated with the specified key.</summary>
      <param name="key">The key to retrieve the value for.</param>
      <returns>The value associated with the specified key. If no results are found, the operation throws an exception.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet">
      <summary>Provides a set of initialization methods for instances of the <see cref="T:System.Collections.Immutable.ImmutableSortedSet`1"></see> class.  
 NuGet package: System.Collections.Immutable (about immutable collections and how to install)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1">
      <summary>Creates an empty immutable sorted set.</summary>
      <typeparam name="T">The type of items to be stored in the immutable set.</typeparam>
      <returns>An empty immutable sorted set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0})">
      <summary>Creates an empty immutable sorted set that uses the specified comparer.</summary>
      <param name="comparer">The implementation to use when comparing items in the set.</param>
      <typeparam name="T">The type of items in the immutable set.</typeparam>
      <returns>An empty immutable set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(``0)">
      <summary>Creates a new immutable sorted set that contains the specified item.</summary>
      <param name="item">The item to prepopulate the set with.</param>
      <typeparam name="T">The type of items in the immutable set.</typeparam>
      <returns>A new immutable set that contains the specified item.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0},``0)">
      <summary>Creates a new immutable sorted set that contains the specified item and uses the specified comparer.</summary>
      <param name="comparer">The implementation to use when comparing items in the set.</param>
      <param name="item">The item to prepopulate the set with.</param>
      <typeparam name="T">The type of items stored in the immutable set.</typeparam>
      <returns>A new immutable set that contains the specified item.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Creates a new immutable collection that contains the specified items.</summary>
      <param name="items">The items to add to the set with before it’s immutable.</param>
      <typeparam name="T">The type of items stored by the collection.</typeparam>
      <returns>The new immutable set that contains the specified items.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateRange``1(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Creates a new immutable collection that contains the specified items.</summary>
      <param name="comparer">The comparer to use to compare elements in this set.</param>
      <param name="items">The items to add to the set before it’s immutable.</param>
      <typeparam name="T">The type of items stored by the collection.</typeparam>
      <returns>The new immutable set that contains the specified items.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(``0[])">
      <summary>Creates a new immutable sorted set that contains the specified array of items.</summary>
      <param name="items">An array that contains the items to prepopulate the set with.</param>
      <typeparam name="T">The type of items in the immutable set.</typeparam>
      <returns>A new immutable set that contains the specified items.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0},``0[])">
      <summary>Creates a new immutable sorted set that contains the specified array of items and uses the specified comparer.</summary>
      <param name="comparer">The implementation to use when comparing items in the set.</param>
      <param name="items">An array that contains the items to prepopulate the set with.</param>
      <typeparam name="T">The type of items in the immutable set.</typeparam>
      <returns>A new immutable set that contains the specified items.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateBuilder``1">
      <summary>Returns a collection that can be used to build an immutable sorted set.</summary>
      <typeparam name="T">The type of items stored by the collection.</typeparam>
      <returns>The immutable collection builder.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.CreateBuilder``1(System.Collections.Generic.IComparer{``0})">
      <summary>Returns a collection that can be used to build an immutable sorted set.</summary>
      <param name="comparer">The comparer used to compare items in the set for equality.</param>
      <typeparam name="T">The type of items stored by the collection.</typeparam>
      <returns>The immutable collection.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
      <summary>Enumerates a sequence, produces an immutable sorted set of its contents, and uses the specified comparer.</summary>
      <param name="source">The sequence to enumerate.</param>
      <param name="comparer">The comparer to use for initializing and adding members to the sorted set.</param>
      <typeparam name="TSource">The type of the elements in the sequence.</typeparam>
      <returns>An immutable sorted set that contains the items in the specified sequence.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Enumerates a sequence and produces an immutable sorted set of its contents.</summary>
      <param name="source">The sequence to enumerate.</param>
      <typeparam name="TSource">The type of the elements in the sequence.</typeparam>
      <returns>An immutable sorted set that contains the items in the specified sequence.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet`1">
      <summary>Represents an immutable sorted set implementation.  
 NuGet package: System.Collections.Immutable (about immutable collections and how to install)</summary>
      <typeparam name="T">The type of elements in the set.</typeparam>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet`1.Builder">
      <summary>Represents a sorted set that enables changes with little or no memory allocations, and efficiently manipulates or builds immutable sorted sets.  
 NuGet package: System.Collections.Immutable (about immutable collections and how to install)</summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Clear">
      <summary>Removes all elements from this set.</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.GetEnumerator">
      <summary>Returns an enumerator that iterates through the set.</summary>
      <returns>A enumerator that can be used to iterate through the set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Reverse">
      <summary>Returns an enumerator that iterates over the immutable sorted set in reverse order.</summary>
      <returns>An enumerator that iterates over the set in reverse order.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Builder.ToImmutable">
      <summary>Creates an immutable sorted set based on the contents of this instance.</summary>
      <returns>An immutable set.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Count">
      <summary>Gets the number of elements in the immutable sorted set.</summary>
      <returns>The number of elements in this set.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Item(System.Int32)">
      <summary>Gets the element of the set at the given index.</summary>
      <param name="index">The 0-based index of the element in the set to return.</param>
      <returns>The element at the given position.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Max">
      <summary>Gets the maximum value in the immutable sorted set, as defined by the comparer.</summary>
      <returns>The maximum value in the set.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.Min">
      <summary>Gets the minimum value in the immutable sorted set, as defined by the comparer.</summary>
      <returns>The minimum value in the set.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Builder.KeyComparer">
      <summary>Gets or sets the object that is used to determine equality for the values in the immutable sorted set.</summary>
      <returns>The comparer that is used to determine equality for the values in the set.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator">
      <summary>Enumerates the contents of a binary tree.  
 NuGet package: System.Collections.Immutable (about immutable collections and how to install)</summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.Dispose">
      <summary>Releases the resources used by the current instance of the <see cref="T:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator"></see> class.  
 NuGet package: System.Collections.Immutable (about immutable collections and how to install)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.MoveNext">
      <summary>Advances the enumerator to the next element of the immutable sorted set.  
 NuGet package: System.Collections.Immutable (about immutable collections and how to install)</summary>
      <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the sorted set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.Reset">
      <summary>Sets the enumerator to its initial position, which is before the first element in the immutable sorted set.  
 NuGet package: System.Collections.Immutable (about immutable collections and how to install)</summary>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Enumerator.Current">
      <summary>Gets the element at the current position of the enumerator.  
 NuGet package: System.Collections.Immutable (about immutable collections and how to install)</summary>
      <returns>The element at the current position of the enumerator.</returns>
    </member>
    <member name="F:System.Collections.Immutable.ImmutableSortedSet`1.Empty">
      <summary>Gets an empty immutable sorted set.</summary>
      <returns>
      </returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Clear">
      <summary>Removes all elements from the immutable sorted set.</summary>
      <returns>An empty set with the elements removed.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.ToBuilder">
      <summary>Creates a collection that has the same contents as this immutable sorted set that can be efficiently manipulated by using standard mutable interfaces.</summary>
      <returns>The sorted set builder.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Add(`0)">
      <summary>Adds the specified value to this immutable sorted set.</summary>
      <param name="value">The value to add.</param>
      <returns>A new set with the element added, or this set if the element is already in this set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Remove(`0)">
      <summary>Removes the specified value from this immutable sorted set.</summary>
      <param name="value">The element to remove.</param>
      <returns>A new immutable sorted set with the element removed, or this set if the element was not found in the set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.TryGetValue(`0,`0@)">
      <summary>Searches the set for a given value and returns the equal value it finds, if any.</summary>
      <param name="equalValue">The value to search for.</param>
      <param name="actualValue">The value from the set that the search found, or the original value if the search yielded no match.</param>
      <returns>A value indicating whether the search was successful.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Intersect(System.Collections.Generic.IEnumerable{`0})">
      <summary>Creates an immutable sorted set that contains elements that exist both in this set and in the specified set.</summary>
      <param name="other">The set to intersect with this one.</param>
      <returns>A new immutable sorted set that contains any elements that exist in both sets.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Except(System.Collections.Generic.IEnumerable{`0})">
      <summary>Removes a specified set of items from this immutable sorted set.</summary>
      <param name="other">The items to remove from this set.</param>
      <returns>A new set with the items removed; or the original set if none of the items were in the set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.SymmetricExcept(System.Collections.Generic.IEnumerable{`0})">
      <summary>Creates an immutable sorted set that contains elements that exist either in this set or in a given sequence, but not both.</summary>
      <param name="other">The other sequence of items.</param>
      <returns>The new immutable sorted set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Union(System.Collections.Generic.IEnumerable{`0})">
      <summary>Adds a given set of items to this immutable sorted set.</summary>
      <param name="other">The items to add.</param>
      <returns>The new set with the items added; or the original set if all the items were already in the set.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.WithComparer(System.Collections.Generic.IComparer{`0})">
      <summary>Returns the immutable sorted set that has the specified key comparer.</summary>
      <param name="comparer">The comparer to check for.</param>
      <returns>The immutable sorted set that has the specified key comparer.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determines whether the current immutable sorted set and the specified collection contain the same elements.</summary>
      <param name="other">The collection to compare to the current set.</param>
      <returns>true if the sets are equal; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determines whether the current immutable sorted set is a proper (strict) subset of the specified collection.</summary>
      <param name="other">The collection to compare to the current set.</param>
      <returns>true if the current set is a proper subset of <paramref name="other">other</paramref>; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determines whether the current immutable sorted set is a proper superset of a specified collection.</summary>
      <param name="other">The collection to compare to the current set.</param>
      <returns>true if the current set is a proper superset of <paramref name="other">other</paramref>; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determines whether the current immutable sorted set is a subset of a specified collection.</summary>
      <param name="other">The collection to compare to the current set.</param>
      <returns>true if the current set is a subset of <paramref name="other">other</paramref>; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determines whether the current immutable sorted set is a superset of a specified collection.</summary>
      <param name="other">The collection to compare to the current set.</param>
      <returns>true if the current set is a superset of <paramref name="other">other</paramref>; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determines whether the current immutable sorted set and a specified collection share common elements.</summary>
      <param name="other">The collection to compare to the current set.</param>
      <returns>true if the current set and <paramref name="other">other</paramref> share at least one common element; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Reverse">
      <summary>Returns an <see cref="T:System.Collections.Generic.IEnumerable`1"></see> that iterates over this immutable sorted set in reverse order.</summary>
      <returns>An enumerator that iterates over the immutable sorted set in reverse order.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.IndexOf(`0)">
      <summary>Gets the position within this immutable sorted set that the specified value appears in.</summary>
      <param name="item">The value whose position is being sought.</param>
      <returns>The index of the specified <paramref name="item">item</paramref> in the sorted set, if <paramref name="item">item</paramref> is found. If <paramref name="item">item</paramref> is not found and is less than one or more elements in this set, this method returns a negative number that is the bitwise complement of the index of the first element that is larger than value. If <paramref name="item">item</paramref> is not found and is greater than any of the elements in the set, this method returns a negative number that is the bitwise complement of the index of the last element plus 1.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.Contains(`0)">
      <summary>Determines whether this immutable sorted set contains the specified value.</summary>
      <param name="value">The value to check for.</param>
      <returns>true if the set contains the specified value; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableSortedSet`1.GetEnumerator">
      <summary>Returns an enumerator that iterates through the immutable sorted set.</summary>
      <returns>An enumerator that can be used to iterate through the set.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Max">
      <summary>Gets the maximum value in the immutable sorted set, as defined by the comparer.</summary>
      <returns>The maximum value in the set.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Min">
      <summary>Gets the minimum value in the immutable sorted set, as defined by the comparer.</summary>
      <returns>The minimum value in the set.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.IsEmpty">
      <summary>Gets a value that indicates whether this immutable sorted set is empty.</summary>
      <returns>true if this set is empty; otherwise, false.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Count">
      <summary>Gets the number of elements in the immutable sorted set.</summary>
      <returns>The number of elements in the immutable sorted set.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.KeyComparer">
      <summary>Gets the comparer used to sort keys in the immutable sorted set.</summary>
      <returns>The comparer used to sort keys.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableSortedSet`1.Item(System.Int32)">
      <summary>Gets the element of the immutable sorted set at the given index.</summary>
      <param name="index">The index of the element to retrieve from the sorted set.</param>
      <returns>The element at the given index.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableStack">
      <summary>Provides a set of initialization methods for instances of the <see cref="T:System.Collections.Immutable.ImmutableStack`1"></see> class.  
 NuGet package: System.Collections.Immutable (about immutable collections and how to install)</summary>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Create``1">
      <summary>Creates an empty immutable stack.</summary>
      <typeparam name="T">The type of items to be stored in the immutable stack.</typeparam>
      <returns>An empty immutable stack.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Create``1(``0)">
      <summary>Creates a new immutable stack that contains the specified item.</summary>
      <param name="item">The item to prepopulate the stack with.</param>
      <typeparam name="T">The type of items in the immutable stack.</typeparam>
      <returns>A new immutable collection that contains the specified item.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.CreateRange``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Creates a new immutable stack that contains the specified items.</summary>
      <param name="items">The items to add to the stack before it’s immutable.</param>
      <typeparam name="T">The type of items in the stack.</typeparam>
      <returns>An immutable stack that contains the specified items.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Create``1(``0[])">
      <summary>Creates a new immutable stack that contains the specified array of items.</summary>
      <param name="items">An array that contains the items to prepopulate the stack with.</param>
      <typeparam name="T">The type of items in the immutable stack.</typeparam>
      <returns>A new immutable stack that contains the specified items.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack.Pop``1(System.Collections.Immutable.IImmutableStack{``0},``0@)">
      <summary>Removes the specified item from an immutable stack.</summary>
      <param name="stack">The stack to modify.</param>
      <param name="value">The item to remove from the stack.</param>
      <typeparam name="T">The type of items contained in the stack.</typeparam>
      <returns>A stack; never null.</returns>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableStack`1">
      <summary>Represents an immutable stack.  
 NuGet package: System.Collections.Immutable (about immutable collections and how to install)</summary>
      <typeparam name="T">The type of element on the stack.</typeparam>
    </member>
    <member name="T:System.Collections.Immutable.ImmutableStack`1.Enumerator">
      <summary>Enumerates the contents of an immutable stack without allocating any memory.  
 NuGet package: System.Collections.Immutable (about immutable collections and how to install)</summary>
      <typeparam name="T">
      </typeparam>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Enumerator.MoveNext">
      <summary>Advances the enumerator to the next element of the immutable stack.</summary>
      <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the stack.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableStack`1.Enumerator.Current">
      <summary>Gets the element at the current position of the enumerator.</summary>
      <returns>The element at the current position of the enumerator.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Clear">
      <summary>Removes all objects from the immutable stack.</summary>
      <returns>An empty immutable stack.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Peek">
      <summary>Returns the object at the top of the stack without removing it.</summary>
      <returns>The object at the top of the stack.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Push(`0)">
      <summary>Inserts an object at the top of the immutable stack and returns the new stack.</summary>
      <param name="value">The object to push onto the stack.</param>
      <returns>The new stack.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Pop">
      <summary>Removes the element at the top of the immutable stack and returns the stack after the removal.</summary>
      <returns>A stack; never null.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.Pop(`0@)">
      <summary>Removes the specified element from the immutable stack and returns the stack after the removal.</summary>
      <param name="value">The value to remove from the stack.</param>
      <returns>A stack; never null.</returns>
    </member>
    <member name="M:System.Collections.Immutable.ImmutableStack`1.GetEnumerator">
      <summary>Returns an enumerator that iterates through the immutable stack.</summary>
      <returns>An enumerator that can be used to iterate through the stack.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableStack`1.Empty">
      <summary>Gets an empty immutable stack.</summary>
      <returns>An empty immutable stack.</returns>
    </member>
    <member name="P:System.Collections.Immutable.ImmutableStack`1.IsEmpty">
      <summary>Gets a value that indicates whether this instance of the immutable stack is empty.</summary>
      <returns>true if this instance is empty; otherwise, false.</returns>
    </member>
    <member name="T:System.Reflection.MethodSemanticsAttributes" />
    <member name="F:System.Reflection.MethodSemanticsAttributes.Setter">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.MethodSemanticsAttributes.Getter">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.MethodSemanticsAttributes.Other">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.MethodSemanticsAttributes.Adder">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.MethodSemanticsAttributes.Remover">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.MethodSemanticsAttributes.Raiser">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.DeclarativeSecurityAction" />
    <member name="F:System.Reflection.DeclarativeSecurityAction.None">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.DeclarativeSecurityAction.Demand">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.DeclarativeSecurityAction.Assert">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.DeclarativeSecurityAction.Deny">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.DeclarativeSecurityAction.PermitOnly">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.DeclarativeSecurityAction.LinkDemand">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.DeclarativeSecurityAction.InheritanceDemand">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.DeclarativeSecurityAction.RequestMinimum">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.DeclarativeSecurityAction.RequestOptional">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.DeclarativeSecurityAction.RequestRefuse">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.MethodImportAttributes" />
    <member name="F:System.Reflection.MethodImportAttributes.None">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.MethodImportAttributes.ExactSpelling">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.MethodImportAttributes.BestFitMappingDisable">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.MethodImportAttributes.BestFitMappingEnable">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.MethodImportAttributes.BestFitMappingMask">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.MethodImportAttributes.CharSetAnsi">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.MethodImportAttributes.CharSetUnicode">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.MethodImportAttributes.CharSetAuto">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.MethodImportAttributes.CharSetMask">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.MethodImportAttributes.ThrowOnUnmappableCharEnable">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.MethodImportAttributes.ThrowOnUnmappableCharDisable">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.MethodImportAttributes.ThrowOnUnmappableCharMask">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.MethodImportAttributes.SetLastError">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.MethodImportAttributes.CallingConventionWinApi">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.MethodImportAttributes.CallingConventionCDecl">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.MethodImportAttributes.CallingConventionStdCall">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.MethodImportAttributes.CallingConventionThisCall">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.MethodImportAttributes.CallingConventionFastCall">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.MethodImportAttributes.CallingConventionMask">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.ManifestResourceAttributes" />
    <member name="F:System.Reflection.ManifestResourceAttributes.Public">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.ManifestResourceAttributes.Private">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.ManifestResourceAttributes.VisibilityMask">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.AssemblyHashAlgorithm" />
    <member name="F:System.Reflection.AssemblyHashAlgorithm.None">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.AssemblyHashAlgorithm.MD5">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.AssemblyHashAlgorithm.Sha1">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.AssemblyHashAlgorithm.Sha256">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.AssemblyHashAlgorithm.Sha384">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.AssemblyHashAlgorithm.Sha512">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.AssemblyFlags" />
    <member name="F:System.Reflection.AssemblyFlags.PublicKey">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.AssemblyFlags.Retargetable">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.AssemblyFlags.WindowsRuntime">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.AssemblyFlags.ContentTypeMask">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.AssemblyFlags.DisableJitCompileOptimizer">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.AssemblyFlags.EnableJitCompileTracking">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.PortableExecutable.ManagedPEBuilder" />
    <member name="F:System.Reflection.PortableExecutable.ManagedPEBuilder.ManagedResourcesDataAlignment">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.ManagedPEBuilder.MappedFieldDataAlignment">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.PortableExecutable.ManagedPEBuilder.#ctor(System.Reflection.PortableExecutable.PEHeaderBuilder,System.Reflection.Metadata.Ecma335.MetadataRootBuilder,System.Reflection.Metadata.BlobBuilder,System.Reflection.Metadata.BlobBuilder,System.Reflection.Metadata.BlobBuilder,System.Reflection.PortableExecutable.ResourceSectionBuilder,System.Reflection.PortableExecutable.DebugDirectoryBuilder,System.Int32,System.Reflection.Metadata.MethodDefinitionHandle,System.Reflection.PortableExecutable.CorFlags,System.Func{System.Collections.Generic.IEnumerable{System.Reflection.Metadata.Blob},System.Reflection.Metadata.BlobContentId})">
      <param name="header">
      </param>
      <param name="metadataRootBuilder">
      </param>
      <param name="ilStream">
      </param>
      <param name="mappedFieldData">
      </param>
      <param name="managedResources">
      </param>
      <param name="nativeResources">
      </param>
      <param name="debugDirectoryBuilder">
      </param>
      <param name="strongNameSignatureSize">
      </param>
      <param name="entryPoint">
      </param>
      <param name="flags">
      </param>
      <param name="deterministicIdProvider">
      </param>
    </member>
    <member name="M:System.Reflection.PortableExecutable.ManagedPEBuilder.CreateSections">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.PortableExecutable.ManagedPEBuilder.SerializeSection(System.String,System.Reflection.PortableExecutable.SectionLocation)">
      <param name="name">
      </param>
      <param name="location">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.PortableExecutable.ManagedPEBuilder.GetDirectories">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.PortableExecutable.ManagedPEBuilder.Sign(System.Reflection.Metadata.BlobBuilder,System.Func{System.Collections.Generic.IEnumerable{System.Reflection.Metadata.Blob},System.Byte[]})">
      <param name="peImage">
      </param>
      <param name="signatureProvider">
      </param>
    </member>
    <member name="T:System.Reflection.PortableExecutable.PEBuilder" />
    <member name="T:System.Reflection.PortableExecutable.PEBuilder.Section" />
    <member name="F:System.Reflection.PortableExecutable.PEBuilder.Section.Name">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.PEBuilder.Section.Characteristics">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.PortableExecutable.PEBuilder.Section.#ctor(System.String,System.Reflection.PortableExecutable.SectionCharacteristics)">
      <param name="name">
      </param>
      <param name="characteristics">
      </param>
    </member>
    <member name="M:System.Reflection.PortableExecutable.PEBuilder.#ctor(System.Reflection.PortableExecutable.PEHeaderBuilder,System.Func{System.Collections.Generic.IEnumerable{System.Reflection.Metadata.Blob},System.Reflection.Metadata.BlobContentId})">
      <param name="header">
      </param>
      <param name="deterministicIdProvider">
      </param>
    </member>
    <member name="M:System.Reflection.PortableExecutable.PEBuilder.GetSections">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.PortableExecutable.PEBuilder.CreateSections">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.PortableExecutable.PEBuilder.SerializeSection(System.String,System.Reflection.PortableExecutable.SectionLocation)">
      <param name="name">
      </param>
      <param name="location">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.PortableExecutable.PEBuilder.GetDirectories">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.PortableExecutable.PEBuilder.Serialize(System.Reflection.Metadata.BlobBuilder)">
      <param name="builder">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEBuilder.Header">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEBuilder.IdProvider">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEBuilder.IsDeterministic">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.PortableExecutable.DebugDirectoryBuilder" />
    <member name="M:System.Reflection.PortableExecutable.DebugDirectoryBuilder.#ctor" />
    <member name="M:System.Reflection.PortableExecutable.DebugDirectoryBuilder.AddCodeViewEntry(System.String,System.Reflection.Metadata.BlobContentId,System.UInt16)">
      <param name="pdbPath">
      </param>
      <param name="pdbContentId">
      </param>
      <param name="portablePdbVersion">
      </param>
    </member>
    <member name="M:System.Reflection.PortableExecutable.DebugDirectoryBuilder.AddReproducibleEntry" />
    <member name="M:System.Reflection.PortableExecutable.DebugDirectoryBuilder.AddEmbeddedPortablePdbEntry(System.Reflection.Metadata.BlobBuilder,System.UInt16)">
      <param name="debugMetadata">
      </param>
      <param name="portablePdbVersion">
      </param>
    </member>
    <member name="T:System.Reflection.PortableExecutable.PEDirectoriesBuilder" />
    <member name="M:System.Reflection.PortableExecutable.PEDirectoriesBuilder.#ctor" />
    <member name="P:System.Reflection.PortableExecutable.PEDirectoriesBuilder.AddressOfEntryPoint">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEDirectoriesBuilder.ExportTable">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEDirectoriesBuilder.ImportTable">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEDirectoriesBuilder.ResourceTable">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEDirectoriesBuilder.ExceptionTable">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEDirectoriesBuilder.BaseRelocationTable">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEDirectoriesBuilder.DebugTable">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEDirectoriesBuilder.CopyrightTable">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEDirectoriesBuilder.GlobalPointerTable">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEDirectoriesBuilder.ThreadLocalStorageTable">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEDirectoriesBuilder.LoadConfigTable">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEDirectoriesBuilder.BoundImportTable">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEDirectoriesBuilder.ImportAddressTable">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEDirectoriesBuilder.DelayImportTable">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEDirectoriesBuilder.CorHeaderTable">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.PortableExecutable.PEHeaderBuilder" />
    <member name="M:System.Reflection.PortableExecutable.PEHeaderBuilder.#ctor(System.Reflection.PortableExecutable.Machine,System.Int32,System.Int32,System.UInt64,System.Byte,System.Byte,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.UInt16,System.Reflection.PortableExecutable.Subsystem,System.Reflection.PortableExecutable.DllCharacteristics,System.Reflection.PortableExecutable.Characteristics,System.UInt64,System.UInt64,System.UInt64,System.UInt64)">
      <param name="machine">
      </param>
      <param name="sectionAlignment">
      </param>
      <param name="fileAlignment">
      </param>
      <param name="imageBase">
      </param>
      <param name="majorLinkerVersion">
      </param>
      <param name="minorLinkerVersion">
      </param>
      <param name="majorOperatingSystemVersion">
      </param>
      <param name="minorOperatingSystemVersion">
      </param>
      <param name="majorImageVersion">
      </param>
      <param name="minorImageVersion">
      </param>
      <param name="majorSubsystemVersion">
      </param>
      <param name="minorSubsystemVersion">
      </param>
      <param name="subsystem">
      </param>
      <param name="dllCharacteristics">
      </param>
      <param name="imageCharacteristics">
      </param>
      <param name="sizeOfStackReserve">
      </param>
      <param name="sizeOfStackCommit">
      </param>
      <param name="sizeOfHeapReserve">
      </param>
      <param name="sizeOfHeapCommit">
      </param>
    </member>
    <member name="M:System.Reflection.PortableExecutable.PEHeaderBuilder.CreateExecutableHeader">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.PortableExecutable.PEHeaderBuilder.CreateLibraryHeader">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEHeaderBuilder.Machine">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEHeaderBuilder.ImageCharacteristics">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEHeaderBuilder.MajorLinkerVersion">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEHeaderBuilder.MinorLinkerVersion">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEHeaderBuilder.ImageBase">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEHeaderBuilder.SectionAlignment">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEHeaderBuilder.FileAlignment">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEHeaderBuilder.MajorOperatingSystemVersion">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEHeaderBuilder.MinorOperatingSystemVersion">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEHeaderBuilder.MajorImageVersion">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEHeaderBuilder.MinorImageVersion">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEHeaderBuilder.MajorSubsystemVersion">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEHeaderBuilder.MinorSubsystemVersion">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEHeaderBuilder.Subsystem">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEHeaderBuilder.DllCharacteristics">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEHeaderBuilder.SizeOfStackReserve">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEHeaderBuilder.SizeOfStackCommit">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEHeaderBuilder.SizeOfHeapReserve">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEHeaderBuilder.SizeOfHeapCommit">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.PortableExecutable.ResourceSectionBuilder" />
    <member name="M:System.Reflection.PortableExecutable.ResourceSectionBuilder.#ctor" />
    <member name="M:System.Reflection.PortableExecutable.ResourceSectionBuilder.Serialize(System.Reflection.Metadata.BlobBuilder,System.Reflection.PortableExecutable.SectionLocation)">
      <param name="builder">
      </param>
      <param name="location">
      </param>
    </member>
    <member name="T:System.Reflection.PortableExecutable.SectionLocation" />
    <member name="M:System.Reflection.PortableExecutable.SectionLocation.#ctor(System.Int32,System.Int32)">
      <param name="relativeVirtualAddress">
      </param>
      <param name="pointerToRawData">
      </param>
    </member>
    <member name="P:System.Reflection.PortableExecutable.SectionLocation.RelativeVirtualAddress">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.SectionLocation.PointerToRawData">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.PortableExecutable.CoffHeader" />
    <member name="P:System.Reflection.PortableExecutable.CoffHeader.Machine">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.CoffHeader.NumberOfSections">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.CoffHeader.TimeDateStamp">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.CoffHeader.PointerToSymbolTable">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.CoffHeader.NumberOfSymbols">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.CoffHeader.SizeOfOptionalHeader">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.CoffHeader.Characteristics">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.PortableExecutable.CorFlags" />
    <member name="F:System.Reflection.PortableExecutable.CorFlags.ILOnly">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.CorFlags.Requires32Bit">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.CorFlags.ILLibrary">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.CorFlags.StrongNameSigned">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.CorFlags.NativeEntryPoint">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.CorFlags.TrackDebugData">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.CorFlags.Prefers32Bit">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.PortableExecutable.CorHeader" />
    <member name="P:System.Reflection.PortableExecutable.CorHeader.MajorRuntimeVersion">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.CorHeader.MinorRuntimeVersion">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.CorHeader.MetadataDirectory">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.CorHeader.Flags">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.CorHeader.EntryPointTokenOrRelativeVirtualAddress">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.CorHeader.ResourcesDirectory">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.CorHeader.StrongNameSignatureDirectory">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.CorHeader.CodeManagerTableDirectory">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.CorHeader.VtableFixupsDirectory">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.CorHeader.ExportAddressTableJumpsDirectory">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.CorHeader.ManagedNativeHeaderDirectory">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.PortableExecutable.CodeViewDebugDirectoryData" />
    <member name="P:System.Reflection.PortableExecutable.CodeViewDebugDirectoryData.Guid">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.CodeViewDebugDirectoryData.Age">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.CodeViewDebugDirectoryData.Path">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.PortableExecutable.DebugDirectoryEntry" />
    <member name="M:System.Reflection.PortableExecutable.DebugDirectoryEntry.#ctor(System.UInt32,System.UInt16,System.UInt16,System.Reflection.PortableExecutable.DebugDirectoryEntryType,System.Int32,System.Int32,System.Int32)">
      <param name="stamp">
      </param>
      <param name="majorVersion">
      </param>
      <param name="minorVersion">
      </param>
      <param name="type">
      </param>
      <param name="dataSize">
      </param>
      <param name="dataRelativeVirtualAddress">
      </param>
      <param name="dataPointer">
      </param>
    </member>
    <member name="P:System.Reflection.PortableExecutable.DebugDirectoryEntry.Stamp">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.DebugDirectoryEntry.MajorVersion">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.DebugDirectoryEntry.MinorVersion">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.DebugDirectoryEntry.Type">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.DebugDirectoryEntry.DataSize">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.DebugDirectoryEntry.DataRelativeVirtualAddress">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.DebugDirectoryEntry.DataPointer">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.DebugDirectoryEntry.IsPortableCodeView">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.PortableExecutable.DebugDirectoryEntryType" />
    <member name="F:System.Reflection.PortableExecutable.DebugDirectoryEntryType.Unknown">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.DebugDirectoryEntryType.Coff">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.DebugDirectoryEntryType.CodeView">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.DebugDirectoryEntryType.Reproducible">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.DebugDirectoryEntryType.EmbeddedPortablePdb">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.PortableExecutable.DirectoryEntry" />
    <member name="F:System.Reflection.PortableExecutable.DirectoryEntry.RelativeVirtualAddress">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.DirectoryEntry.Size">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.PortableExecutable.DirectoryEntry.#ctor(System.Int32,System.Int32)">
      <param name="relativeVirtualAddress">
      </param>
      <param name="size">
      </param>
    </member>
    <member name="T:System.Reflection.PortableExecutable.Machine" />
    <member name="F:System.Reflection.PortableExecutable.Machine.Unknown">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.Machine.I386">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.Machine.WceMipsV2">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.Machine.Alpha">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.Machine.SH3">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.Machine.SH3Dsp">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.Machine.SH3E">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.Machine.SH4">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.Machine.SH5">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.Machine.Arm">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.Machine.Thumb">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.Machine.ArmThumb2">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.Machine.AM33">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.Machine.PowerPC">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.Machine.PowerPCFP">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.Machine.IA64">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.Machine.MIPS16">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.Machine.Alpha64">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.Machine.MipsFpu">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.Machine.MipsFpu16">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.Machine.Tricore">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.Machine.Ebc">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.Machine.Amd64">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.Machine.M32R">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.PortableExecutable.Characteristics" />
    <member name="F:System.Reflection.PortableExecutable.Characteristics.RelocsStripped">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.Characteristics.ExecutableImage">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.Characteristics.LineNumsStripped">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.Characteristics.LocalSymsStripped">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.Characteristics.AggressiveWSTrim">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.Characteristics.LargeAddressAware">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.Characteristics.BytesReversedLo">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.Characteristics.Bit32Machine">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.Characteristics.DebugStripped">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.Characteristics.RemovableRunFromSwap">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.Characteristics.NetRunFromSwap">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.Characteristics.System">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.Characteristics.Dll">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.Characteristics.UpSystemOnly">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.Characteristics.BytesReversedHi">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.PortableExecutable.PEMagic" />
    <member name="F:System.Reflection.PortableExecutable.PEMagic.PE32">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.PEMagic.PE32Plus">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.PortableExecutable.Subsystem" />
    <member name="F:System.Reflection.PortableExecutable.Subsystem.Unknown">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.Subsystem.Native">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.Subsystem.WindowsGui">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.Subsystem.WindowsCui">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.Subsystem.OS2Cui">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.Subsystem.PosixCui">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.Subsystem.NativeWindows">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.Subsystem.WindowsCEGui">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.Subsystem.EfiApplication">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.Subsystem.EfiBootServiceDriver">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.Subsystem.EfiRuntimeDriver">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.Subsystem.EfiRom">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.Subsystem.Xbox">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.Subsystem.WindowsBootApplication">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.PortableExecutable.DllCharacteristics" />
    <member name="F:System.Reflection.PortableExecutable.DllCharacteristics.ProcessInit">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.DllCharacteristics.ProcessTerm">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.DllCharacteristics.ThreadInit">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.DllCharacteristics.ThreadTerm">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.DllCharacteristics.HighEntropyVirtualAddressSpace">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.DllCharacteristics.DynamicBase">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.DllCharacteristics.NxCompatible">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.DllCharacteristics.NoIsolation">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.DllCharacteristics.NoSeh">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.DllCharacteristics.NoBind">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.DllCharacteristics.AppContainer">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.DllCharacteristics.WdmDriver">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.DllCharacteristics.TerminalServerAware">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.PortableExecutable.SectionCharacteristics" />
    <member name="F:System.Reflection.PortableExecutable.SectionCharacteristics.TypeReg">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.SectionCharacteristics.TypeDSect">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.SectionCharacteristics.TypeNoLoad">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.SectionCharacteristics.TypeGroup">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.SectionCharacteristics.TypeNoPad">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.SectionCharacteristics.TypeCopy">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.SectionCharacteristics.ContainsCode">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.SectionCharacteristics.ContainsInitializedData">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.SectionCharacteristics.ContainsUninitializedData">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.SectionCharacteristics.LinkerOther">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.SectionCharacteristics.LinkerInfo">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.SectionCharacteristics.TypeOver">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.SectionCharacteristics.LinkerRemove">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.SectionCharacteristics.LinkerComdat">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.SectionCharacteristics.MemProtected">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.SectionCharacteristics.NoDeferSpecExc">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.SectionCharacteristics.GPRel">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.SectionCharacteristics.MemFardata">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.SectionCharacteristics.MemSysheap">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.SectionCharacteristics.MemPurgeable">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.SectionCharacteristics.Mem16Bit">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.SectionCharacteristics.MemLocked">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.SectionCharacteristics.MemPreload">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.SectionCharacteristics.Align1Bytes">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.SectionCharacteristics.Align2Bytes">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.SectionCharacteristics.Align4Bytes">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.SectionCharacteristics.Align8Bytes">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.SectionCharacteristics.Align16Bytes">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.SectionCharacteristics.Align32Bytes">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.SectionCharacteristics.Align64Bytes">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.SectionCharacteristics.Align128Bytes">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.SectionCharacteristics.Align256Bytes">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.SectionCharacteristics.Align512Bytes">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.SectionCharacteristics.Align1024Bytes">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.SectionCharacteristics.Align2048Bytes">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.SectionCharacteristics.Align4096Bytes">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.SectionCharacteristics.Align8192Bytes">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.SectionCharacteristics.AlignMask">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.SectionCharacteristics.LinkerNRelocOvfl">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.SectionCharacteristics.MemDiscardable">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.SectionCharacteristics.MemNotCached">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.SectionCharacteristics.MemNotPaged">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.SectionCharacteristics.MemShared">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.SectionCharacteristics.MemExecute">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.SectionCharacteristics.MemRead">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.SectionCharacteristics.MemWrite">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.PortableExecutable.PEHeader" />
    <member name="P:System.Reflection.PortableExecutable.PEHeader.Magic">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEHeader.MajorLinkerVersion">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEHeader.MinorLinkerVersion">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEHeader.SizeOfCode">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEHeader.SizeOfInitializedData">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEHeader.SizeOfUninitializedData">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEHeader.AddressOfEntryPoint">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEHeader.BaseOfCode">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEHeader.BaseOfData">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEHeader.ImageBase">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEHeader.SectionAlignment">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEHeader.FileAlignment">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEHeader.MajorOperatingSystemVersion">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEHeader.MinorOperatingSystemVersion">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEHeader.MajorImageVersion">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEHeader.MinorImageVersion">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEHeader.MajorSubsystemVersion">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEHeader.MinorSubsystemVersion">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEHeader.SizeOfImage">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEHeader.SizeOfHeaders">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEHeader.CheckSum">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEHeader.Subsystem">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEHeader.DllCharacteristics">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEHeader.SizeOfStackReserve">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEHeader.SizeOfStackCommit">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEHeader.SizeOfHeapReserve">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEHeader.SizeOfHeapCommit">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEHeader.NumberOfRvaAndSizes">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEHeader.ExportTableDirectory">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEHeader.ImportTableDirectory">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEHeader.ResourceTableDirectory">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEHeader.ExceptionTableDirectory">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEHeader.CertificateTableDirectory">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEHeader.BaseRelocationTableDirectory">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEHeader.DebugTableDirectory">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEHeader.CopyrightTableDirectory">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEHeader.GlobalPointerTableDirectory">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEHeader.ThreadLocalStorageTableDirectory">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEHeader.LoadConfigTableDirectory">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEHeader.BoundImportTableDirectory">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEHeader.ImportAddressTableDirectory">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEHeader.DelayImportTableDirectory">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEHeader.CorHeaderTableDirectory">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.PortableExecutable.PEHeaders" />
    <member name="M:System.Reflection.PortableExecutable.PEHeaders.#ctor(System.IO.Stream)">
      <param name="peStream">
      </param>
    </member>
    <member name="M:System.Reflection.PortableExecutable.PEHeaders.#ctor(System.IO.Stream,System.Int32)">
      <param name="peStream">
      </param>
      <param name="size">
      </param>
    </member>
    <member name="M:System.Reflection.PortableExecutable.PEHeaders.#ctor(System.IO.Stream,System.Int32,System.Boolean)">
      <param name="peStream">
      </param>
      <param name="size">
      </param>
      <param name="isLoadedImage">
      </param>
    </member>
    <member name="M:System.Reflection.PortableExecutable.PEHeaders.TryGetDirectoryOffset(System.Reflection.PortableExecutable.DirectoryEntry,System.Int32@)">
      <param name="directory">
      </param>
      <param name="offset">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.PortableExecutable.PEHeaders.GetContainingSectionIndex(System.Int32)">
      <param name="relativeVirtualAddress">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEHeaders.MetadataStartOffset">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEHeaders.MetadataSize">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEHeaders.CoffHeader">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEHeaders.CoffHeaderStartOffset">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEHeaders.IsCoffOnly">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEHeaders.PEHeader">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEHeaders.PEHeaderStartOffset">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEHeaders.SectionHeaders">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEHeaders.CorHeader">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEHeaders.CorHeaderStartOffset">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEHeaders.IsConsoleApplication">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEHeaders.IsDll">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEHeaders.IsExe">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.PortableExecutable.PEMemoryBlock" />
    <member name="M:System.Reflection.PortableExecutable.PEMemoryBlock.GetReader">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.PortableExecutable.PEMemoryBlock.GetReader(System.Int32,System.Int32)">
      <param name="start">
      </param>
      <param name="length">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.PortableExecutable.PEMemoryBlock.GetContent">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.PortableExecutable.PEMemoryBlock.GetContent(System.Int32,System.Int32)">
      <param name="start">
      </param>
      <param name="length">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEMemoryBlock.Pointer">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEMemoryBlock.Length">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.PortableExecutable.PEReader" />
    <member name="M:System.Reflection.PortableExecutable.PEReader.#ctor(System.Byte*,System.Int32)">
      <param name="peImage">
      </param>
      <param name="size">
      </param>
    </member>
    <member name="M:System.Reflection.PortableExecutable.PEReader.#ctor(System.Byte*,System.Int32,System.Boolean)">
      <param name="peImage">
      </param>
      <param name="size">
      </param>
      <param name="isLoadedImage">
      </param>
    </member>
    <member name="M:System.Reflection.PortableExecutable.PEReader.#ctor(System.IO.Stream)">
      <param name="peStream">
      </param>
    </member>
    <member name="M:System.Reflection.PortableExecutable.PEReader.#ctor(System.IO.Stream,System.Reflection.PortableExecutable.PEStreamOptions)">
      <param name="peStream">
      </param>
      <param name="options">
      </param>
    </member>
    <member name="M:System.Reflection.PortableExecutable.PEReader.#ctor(System.IO.Stream,System.Reflection.PortableExecutable.PEStreamOptions,System.Int32)">
      <param name="peStream">
      </param>
      <param name="options">
      </param>
      <param name="size">
      </param>
    </member>
    <member name="M:System.Reflection.PortableExecutable.PEReader.#ctor(System.Collections.Immutable.ImmutableArray{System.Byte})">
      <param name="peImage">
      </param>
    </member>
    <member name="M:System.Reflection.PortableExecutable.PEReader.Dispose" />
    <member name="M:System.Reflection.PortableExecutable.PEReader.GetEntireImage">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.PortableExecutable.PEReader.GetMetadata">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.PortableExecutable.PEReader.GetSectionData(System.Int32)">
      <param name="relativeVirtualAddress">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.PortableExecutable.PEReader.GetSectionData(System.String)">
      <param name="sectionName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.PortableExecutable.PEReader.ReadDebugDirectory">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.PortableExecutable.PEReader.ReadCodeViewDebugDirectoryData(System.Reflection.PortableExecutable.DebugDirectoryEntry)">
      <param name="entry">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.PortableExecutable.PEReader.TryOpenAssociatedPortablePdb(System.String,System.Func{System.String,System.IO.Stream},System.Reflection.Metadata.MetadataReaderProvider@,System.String@)">
      <param name="peImagePath">
      </param>
      <param name="pdbFileStreamProvider">
      </param>
      <param name="pdbReaderProvider">
      </param>
      <param name="pdbPath">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.PortableExecutable.PEReader.ReadEmbeddedPortablePdbDebugDirectoryData(System.Reflection.PortableExecutable.DebugDirectoryEntry)">
      <param name="entry">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEReader.IsLoadedImage">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEReader.PEHeaders">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEReader.IsEntireImageAvailable">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.PEReader.HasMetadata">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.PortableExecutable.PEStreamOptions" />
    <member name="F:System.Reflection.PortableExecutable.PEStreamOptions.Default">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.PEStreamOptions.LeaveOpen">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchMetadata">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.PEStreamOptions.PrefetchEntireImage">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.PortableExecutable.PEStreamOptions.IsLoadedImage">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.PortableExecutable.SectionHeader" />
    <member name="P:System.Reflection.PortableExecutable.SectionHeader.Name">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.SectionHeader.VirtualSize">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.SectionHeader.VirtualAddress">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.SectionHeader.SizeOfRawData">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.SectionHeader.PointerToRawData">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.SectionHeader.PointerToRelocations">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.SectionHeader.PointerToLineNumbers">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.SectionHeader.NumberOfRelocations">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.SectionHeader.NumberOfLineNumbers">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.PortableExecutable.SectionHeader.SectionCharacteristics">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.EntityHandle" />
    <member name="F:System.Reflection.Metadata.EntityHandle.ModuleDefinition">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.EntityHandle.AssemblyDefinition">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.EntityHandle.op_Implicit(System.Reflection.Metadata.EntityHandle)~System.Reflection.Metadata.Handle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.EntityHandle.op_Explicit(System.Reflection.Metadata.Handle)~System.Reflection.Metadata.EntityHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.EntityHandle.Equals(System.Object)">
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.EntityHandle.Equals(System.Reflection.Metadata.EntityHandle)">
      <param name="other">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.EntityHandle.GetHashCode">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.EntityHandle.op_Equality(System.Reflection.Metadata.EntityHandle,System.Reflection.Metadata.EntityHandle)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.EntityHandle.op_Inequality(System.Reflection.Metadata.EntityHandle,System.Reflection.Metadata.EntityHandle)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.EntityHandle.IsNil">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.EntityHandle.Kind">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.Blob" />
    <member name="M:System.Reflection.Metadata.Blob.GetBytes">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.Blob.Length">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.Blob.IsDefault">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.BlobWriter" />
    <member name="M:System.Reflection.Metadata.BlobWriter.#ctor(System.Int32)">
      <param name="size">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobWriter.#ctor(System.Byte[])">
      <param name="buffer">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobWriter.#ctor(System.Reflection.Metadata.Blob)">
      <param name="blob">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobWriter.#ctor(System.Byte[],System.Int32,System.Int32)">
      <param name="buffer">
      </param>
      <param name="start">
      </param>
      <param name="count">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobWriter.ContentEquals(System.Reflection.Metadata.BlobWriter)">
      <param name="other">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.BlobWriter.ToArray">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.BlobWriter.ToArray(System.Int32,System.Int32)">
      <param name="start">
      </param>
      <param name="byteCount">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.BlobWriter.ToImmutableArray">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.BlobWriter.ToImmutableArray(System.Int32,System.Int32)">
      <param name="start">
      </param>
      <param name="byteCount">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.BlobWriter.WriteBytes(System.Byte,System.Int32)">
      <param name="value">
      </param>
      <param name="byteCount">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobWriter.WriteBytes(System.Byte*,System.Int32)">
      <param name="buffer">
      </param>
      <param name="byteCount">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobWriter.WriteBytes(System.Reflection.Metadata.BlobBuilder)">
      <param name="source">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobWriter.WriteBytes(System.IO.Stream,System.Int32)">
      <param name="source">
      </param>
      <param name="byteCount">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.BlobWriter.WriteBytes(System.Collections.Immutable.ImmutableArray{System.Byte})">
      <param name="buffer">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobWriter.WriteBytes(System.Collections.Immutable.ImmutableArray{System.Byte},System.Int32,System.Int32)">
      <param name="buffer">
      </param>
      <param name="start">
      </param>
      <param name="byteCount">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobWriter.WriteBytes(System.Byte[])">
      <param name="buffer">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobWriter.WriteBytes(System.Byte[],System.Int32,System.Int32)">
      <param name="buffer">
      </param>
      <param name="start">
      </param>
      <param name="byteCount">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobWriter.PadTo(System.Int32)">
      <param name="offset">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobWriter.Align(System.Int32)">
      <param name="alignment">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobWriter.WriteBoolean(System.Boolean)">
      <param name="value">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobWriter.WriteByte(System.Byte)">
      <param name="value">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobWriter.WriteSByte(System.SByte)">
      <param name="value">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobWriter.WriteDouble(System.Double)">
      <param name="value">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobWriter.WriteSingle(System.Single)">
      <param name="value">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobWriter.WriteInt16(System.Int16)">
      <param name="value">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobWriter.WriteUInt16(System.UInt16)">
      <param name="value">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobWriter.WriteInt16BE(System.Int16)">
      <param name="value">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobWriter.WriteUInt16BE(System.UInt16)">
      <param name="value">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobWriter.WriteInt32BE(System.Int32)">
      <param name="value">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobWriter.WriteUInt32BE(System.UInt32)">
      <param name="value">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobWriter.WriteInt32(System.Int32)">
      <param name="value">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobWriter.WriteUInt32(System.UInt32)">
      <param name="value">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobWriter.WriteInt64(System.Int64)">
      <param name="value">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobWriter.WriteUInt64(System.UInt64)">
      <param name="value">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobWriter.WriteDecimal(System.Decimal)">
      <param name="value">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobWriter.WriteGuid(System.Guid)">
      <param name="value">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobWriter.WriteDateTime(System.DateTime)">
      <param name="value">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobWriter.WriteReference(System.Int32,System.Boolean)">
      <param name="reference">
      </param>
      <param name="isSmall">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobWriter.WriteUTF16(System.Char[])">
      <param name="value">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobWriter.WriteUTF16(System.String)">
      <param name="value">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobWriter.WriteSerializedString(System.String)">
      <param name="str">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobWriter.WriteUserString(System.String)">
      <param name="value">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobWriter.WriteUTF8(System.String,System.Boolean)">
      <param name="value">
      </param>
      <param name="allowUnpairedSurrogates">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobWriter.WriteCompressedSignedInteger(System.Int32)">
      <param name="value">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobWriter.WriteCompressedInteger(System.Int32)">
      <param name="value">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobWriter.WriteConstant(System.Object)">
      <param name="value">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobWriter.Clear" />
    <member name="P:System.Reflection.Metadata.BlobWriter.Offset">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.BlobWriter.Length">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.BlobWriter.RemainingBytes">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.BlobWriter.Blob">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.BlobBuilder" />
    <member name="T:System.Reflection.Metadata.BlobBuilder.Blobs" />
    <member name="M:System.Reflection.Metadata.BlobBuilder.Blobs.MoveNext">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.BlobBuilder.Blobs.Reset" />
    <member name="M:System.Reflection.Metadata.BlobBuilder.Blobs.GetEnumerator">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.BlobBuilder.Blobs.Current">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.BlobBuilder.#ctor(System.Int32)">
      <param name="capacity">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobBuilder.AllocateChunk(System.Int32)">
      <param name="minimalSize">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.BlobBuilder.FreeChunk" />
    <member name="M:System.Reflection.Metadata.BlobBuilder.Clear" />
    <member name="M:System.Reflection.Metadata.BlobBuilder.Free" />
    <member name="M:System.Reflection.Metadata.BlobBuilder.GetBlobs">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.BlobBuilder.ContentEquals(System.Reflection.Metadata.BlobBuilder)">
      <param name="other">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.BlobBuilder.ToArray">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.BlobBuilder.ToArray(System.Int32,System.Int32)">
      <param name="start">
      </param>
      <param name="byteCount">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.BlobBuilder.ToImmutableArray">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.BlobBuilder.ToImmutableArray(System.Int32,System.Int32)">
      <param name="start">
      </param>
      <param name="byteCount">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.BlobBuilder.WriteContentTo(System.IO.Stream)">
      <param name="destination">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobBuilder.WriteContentTo(System.Reflection.Metadata.BlobWriter@)">
      <param name="destination">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobBuilder.WriteContentTo(System.Reflection.Metadata.BlobBuilder)">
      <param name="destination">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobBuilder.LinkPrefix(System.Reflection.Metadata.BlobBuilder)">
      <param name="prefix">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobBuilder.LinkSuffix(System.Reflection.Metadata.BlobBuilder)">
      <param name="suffix">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobBuilder.ReserveBytes(System.Int32)">
      <param name="byteCount">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.BlobBuilder.WriteBytes(System.Byte,System.Int32)">
      <param name="value">
      </param>
      <param name="byteCount">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobBuilder.WriteBytes(System.Byte*,System.Int32)">
      <param name="buffer">
      </param>
      <param name="byteCount">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobBuilder.TryWriteBytes(System.IO.Stream,System.Int32)">
      <param name="source">
      </param>
      <param name="byteCount">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.BlobBuilder.WriteBytes(System.Collections.Immutable.ImmutableArray{System.Byte})">
      <param name="buffer">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobBuilder.WriteBytes(System.Collections.Immutable.ImmutableArray{System.Byte},System.Int32,System.Int32)">
      <param name="buffer">
      </param>
      <param name="start">
      </param>
      <param name="byteCount">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobBuilder.WriteBytes(System.Byte[])">
      <param name="buffer">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobBuilder.WriteBytes(System.Byte[],System.Int32,System.Int32)">
      <param name="buffer">
      </param>
      <param name="start">
      </param>
      <param name="byteCount">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobBuilder.PadTo(System.Int32)">
      <param name="position">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobBuilder.Align(System.Int32)">
      <param name="alignment">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobBuilder.WriteBoolean(System.Boolean)">
      <param name="value">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobBuilder.WriteByte(System.Byte)">
      <param name="value">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobBuilder.WriteSByte(System.SByte)">
      <param name="value">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobBuilder.WriteDouble(System.Double)">
      <param name="value">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobBuilder.WriteSingle(System.Single)">
      <param name="value">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobBuilder.WriteInt16(System.Int16)">
      <param name="value">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobBuilder.WriteUInt16(System.UInt16)">
      <param name="value">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobBuilder.WriteInt16BE(System.Int16)">
      <param name="value">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobBuilder.WriteUInt16BE(System.UInt16)">
      <param name="value">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobBuilder.WriteInt32BE(System.Int32)">
      <param name="value">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobBuilder.WriteUInt32BE(System.UInt32)">
      <param name="value">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobBuilder.WriteInt32(System.Int32)">
      <param name="value">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobBuilder.WriteUInt32(System.UInt32)">
      <param name="value">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobBuilder.WriteInt64(System.Int64)">
      <param name="value">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobBuilder.WriteUInt64(System.UInt64)">
      <param name="value">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobBuilder.WriteDecimal(System.Decimal)">
      <param name="value">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobBuilder.WriteGuid(System.Guid)">
      <param name="value">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobBuilder.WriteDateTime(System.DateTime)">
      <param name="value">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobBuilder.WriteReference(System.Int32,System.Boolean)">
      <param name="reference">
      </param>
      <param name="isSmall">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobBuilder.WriteUTF16(System.Char[])">
      <param name="value">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobBuilder.WriteUTF16(System.String)">
      <param name="value">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobBuilder.WriteSerializedString(System.String)">
      <param name="value">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobBuilder.WriteUserString(System.String)">
      <param name="value">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobBuilder.WriteUTF8(System.String,System.Boolean)">
      <param name="value">
      </param>
      <param name="allowUnpairedSurrogates">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobBuilder.WriteCompressedSignedInteger(System.Int32)">
      <param name="value">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobBuilder.WriteCompressedInteger(System.Int32)">
      <param name="value">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobBuilder.WriteConstant(System.Object)">
      <param name="value">
      </param>
    </member>
    <member name="P:System.Reflection.Metadata.BlobBuilder.Count">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.BlobBuilder.FreeBytes">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.BlobBuilder.ChunkCapacity">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.ReservedBlob`1">
      <typeparam name="THandle">
      </typeparam>
    </member>
    <member name="M:System.Reflection.Metadata.ReservedBlob`1.CreateWriter">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.ReservedBlob`1.Handle">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.ReservedBlob`1.Content">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.CustomAttributeNamedArgument`1">
      <summary>Represents a named argument decoded from a custom attribute signature.</summary>
      <typeparam name="TType">The type used to represent types of values decoded from the custom attribute signature.</typeparam>
    </member>
    <member name="M:System.Reflection.Metadata.CustomAttributeNamedArgument`1.#ctor(System.String,System.Reflection.Metadata.CustomAttributeNamedArgumentKind,`0,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.Metadata.CustomAttributeNamedArgument`1"></see> structure using the specified name, kind, type, and value.</summary>
      <param name="name">The name of the argument.</param>
      <param name="kind">The kind of the argument.</param>
      <param name="type">The type of the argument.</param>
      <param name="value">The value of the argument.</param>
    </member>
    <member name="P:System.Reflection.Metadata.CustomAttributeNamedArgument`1.Name">
      <summary>Gets the name of the argument.</summary>
      <returns>The argument name.</returns>
    </member>
    <member name="P:System.Reflection.Metadata.CustomAttributeNamedArgument`1.Kind">
      <summary>Gets the kind of argument.</summary>
      <returns>The argument kind.</returns>
    </member>
    <member name="P:System.Reflection.Metadata.CustomAttributeNamedArgument`1.Type">
      <summary>Gets the type of the argument.</summary>
      <returns>The argument type.</returns>
    </member>
    <member name="P:System.Reflection.Metadata.CustomAttributeNamedArgument`1.Value">
      <summary>Gets the value of the argument.</summary>
      <returns>An object containing the argument value.</returns>
    </member>
    <member name="T:System.Reflection.Metadata.CustomAttributeTypedArgument`1">
      <summary>Represents a typed argument for a custom metadata attribute.</summary>
      <typeparam name="TType">The type of the argument.</typeparam>
    </member>
    <member name="M:System.Reflection.Metadata.CustomAttributeTypedArgument`1.#ctor(`0,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.Metadata.CustomAttributeTypedArgument`1"></see> structure using the specified argument type and value.</summary>
      <param name="type">The type of the argument.</param>
      <param name="value">The argument value.</param>
    </member>
    <member name="P:System.Reflection.Metadata.CustomAttributeTypedArgument`1.Type">
      <summary>Gets the type of the argument.</summary>
      <returns>The argument type.</returns>
    </member>
    <member name="P:System.Reflection.Metadata.CustomAttributeTypedArgument`1.Value">
      <summary>Gets the value of the argument.</summary>
      <returns>The argument value.</returns>
    </member>
    <member name="T:System.Reflection.Metadata.CustomAttributeValue`1">
      <summary>Represents a custom atttribute of the type specified by <paramref name="TType">TType</paramref>.</summary>
      <typeparam name="TType">The attribute type.</typeparam>
    </member>
    <member name="M:System.Reflection.Metadata.CustomAttributeValue`1.#ctor(System.Collections.Immutable.ImmutableArray{System.Reflection.Metadata.CustomAttributeTypedArgument{`0}},System.Collections.Immutable.ImmutableArray{System.Reflection.Metadata.CustomAttributeNamedArgument{`0}})">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.Metadata.CustomAttributeValue`1"></see> structure using the specified fixed arguments and named arguments.</summary>
      <param name="fixedArguments">The fixed arguments.</param>
      <param name="namedArguments">The named arguments.</param>
    </member>
    <member name="P:System.Reflection.Metadata.CustomAttributeValue`1.FixedArguments">
      <summary>Gets the fixed arguments for the custom attribute.</summary>
      <returns>An immutable array of arguments.</returns>
    </member>
    <member name="P:System.Reflection.Metadata.CustomAttributeValue`1.NamedArguments">
      <summary>Gets the named arguments for the custom attribute value.</summary>
      <returns>An immutable array of arguments.</returns>
    </member>
    <member name="T:System.Reflection.Metadata.ICustomAttributeTypeProvider`1">
      <typeparam name="TType">
      </typeparam>
    </member>
    <member name="M:System.Reflection.Metadata.ICustomAttributeTypeProvider`1.GetSystemType">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.ICustomAttributeTypeProvider`1.IsSystemType(`0)">
      <param name="type">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.ICustomAttributeTypeProvider`1.GetTypeFromSerializedName(System.String)">
      <param name="name">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.ICustomAttributeTypeProvider`1.GetUnderlyingEnumType(`0)">
      <param name="type">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.ILOpCode" />
    <member name="F:System.Reflection.Metadata.ILOpCode.Nop">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Break">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Ldarg_0">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Ldarg_1">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Ldarg_2">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Ldarg_3">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Ldloc_0">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Ldloc_1">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Ldloc_2">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Ldloc_3">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Stloc_0">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Stloc_1">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Stloc_2">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Stloc_3">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Ldarg_s">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Ldarga_s">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Starg_s">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Ldloc_s">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Ldloca_s">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Stloc_s">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Ldnull">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Ldc_i4_m1">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Ldc_i4_0">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Ldc_i4_1">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Ldc_i4_2">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Ldc_i4_3">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Ldc_i4_4">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Ldc_i4_5">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Ldc_i4_6">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Ldc_i4_7">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Ldc_i4_8">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Ldc_i4_s">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Ldc_i4">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Ldc_i8">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Ldc_r4">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Ldc_r8">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Dup">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Pop">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Jmp">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Call">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Calli">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Ret">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Br_s">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Brfalse_s">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Brtrue_s">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Beq_s">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Bge_s">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Bgt_s">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Ble_s">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Blt_s">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Bne_un_s">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Bge_un_s">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Bgt_un_s">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Ble_un_s">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Blt_un_s">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Br">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Brfalse">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Brtrue">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Beq">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Bge">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Bgt">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Ble">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Blt">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Bne_un">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Bge_un">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Bgt_un">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Ble_un">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Blt_un">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Switch">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Ldind_i1">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Ldind_u1">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Ldind_i2">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Ldind_u2">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Ldind_i4">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Ldind_u4">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Ldind_i8">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Ldind_i">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Ldind_r4">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Ldind_r8">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Ldind_ref">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Stind_ref">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Stind_i1">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Stind_i2">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Stind_i4">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Stind_i8">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Stind_r4">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Stind_r8">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Add">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Sub">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Mul">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Div">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Div_un">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Rem">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Rem_un">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.And">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Or">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Xor">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Shl">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Shr">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Shr_un">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Neg">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Not">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Conv_i1">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Conv_i2">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Conv_i4">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Conv_i8">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Conv_r4">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Conv_r8">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Conv_u4">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Conv_u8">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Callvirt">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Cpobj">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Ldobj">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Ldstr">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Newobj">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Castclass">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Isinst">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Conv_r_un">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Unbox">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Throw">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Ldfld">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Ldflda">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Stfld">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Ldsfld">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Ldsflda">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Stsfld">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Stobj">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Conv_ovf_i1_un">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Conv_ovf_i2_un">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Conv_ovf_i4_un">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Conv_ovf_i8_un">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Conv_ovf_u1_un">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Conv_ovf_u2_un">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Conv_ovf_u4_un">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Conv_ovf_u8_un">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Conv_ovf_i_un">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Conv_ovf_u_un">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Box">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Newarr">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Ldlen">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Ldelema">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Ldelem_i1">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Ldelem_u1">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Ldelem_i2">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Ldelem_u2">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Ldelem_i4">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Ldelem_u4">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Ldelem_i8">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Ldelem_i">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Ldelem_r4">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Ldelem_r8">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Ldelem_ref">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Stelem_i">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Stelem_i1">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Stelem_i2">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Stelem_i4">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Stelem_i8">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Stelem_r4">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Stelem_r8">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Stelem_ref">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Ldelem">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Stelem">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Unbox_any">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Conv_ovf_i1">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Conv_ovf_u1">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Conv_ovf_i2">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Conv_ovf_u2">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Conv_ovf_i4">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Conv_ovf_u4">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Conv_ovf_i8">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Conv_ovf_u8">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Refanyval">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Ckfinite">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Mkrefany">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Ldtoken">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Conv_u2">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Conv_u1">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Conv_i">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Conv_ovf_i">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Conv_ovf_u">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Add_ovf">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Add_ovf_un">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Mul_ovf">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Mul_ovf_un">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Sub_ovf">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Sub_ovf_un">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Endfinally">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Leave">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Leave_s">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Stind_i">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Conv_u">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Arglist">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Ceq">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Cgt">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Cgt_un">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Clt">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Clt_un">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Ldftn">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Ldvirtftn">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Ldarg">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Ldarga">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Starg">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Ldloc">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Ldloca">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Stloc">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Localloc">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Endfilter">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Unaligned">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Volatile">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Tail">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Initobj">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Constrained">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Cpblk">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Initblk">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Rethrow">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Sizeof">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Refanytype">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ILOpCode.Readonly">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.ILOpCodeExtensions" />
    <member name="M:System.Reflection.Metadata.ILOpCodeExtensions.IsBranch(System.Reflection.Metadata.ILOpCode)">
      <param name="opCode">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.ILOpCodeExtensions.GetBranchOperandSize(System.Reflection.Metadata.ILOpCode)">
      <param name="opCode">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.ILOpCodeExtensions.GetShortBranch(System.Reflection.Metadata.ILOpCode)">
      <param name="opCode">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.ILOpCodeExtensions.GetLongBranch(System.Reflection.Metadata.ILOpCode)">
      <param name="opCode">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.ImageFormatLimitationException" />
    <member name="M:System.Reflection.Metadata.ImageFormatLimitationException.#ctor" />
    <member name="M:System.Reflection.Metadata.ImageFormatLimitationException.#ctor(System.String)">
      <param name="message">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.ImageFormatLimitationException.#ctor(System.String,System.Exception)">
      <param name="message">
      </param>
      <param name="innerException">
      </param>
    </member>
    <member name="T:System.Reflection.Metadata.MetadataStreamOptions" />
    <member name="F:System.Reflection.Metadata.MetadataStreamOptions.Default">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.MetadataStreamOptions.LeaveOpen">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.MetadataStreamOptions.PrefetchMetadata">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.MetadataReaderProvider" />
    <member name="M:System.Reflection.Metadata.MetadataReaderProvider.FromPortablePdbImage(System.Byte*,System.Int32)">
      <param name="start">
      </param>
      <param name="size">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MetadataReaderProvider.FromMetadataImage(System.Byte*,System.Int32)">
      <param name="start">
      </param>
      <param name="size">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MetadataReaderProvider.FromPortablePdbImage(System.Collections.Immutable.ImmutableArray{System.Byte})">
      <param name="image">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MetadataReaderProvider.FromMetadataImage(System.Collections.Immutable.ImmutableArray{System.Byte})">
      <param name="image">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MetadataReaderProvider.FromPortablePdbStream(System.IO.Stream,System.Reflection.Metadata.MetadataStreamOptions,System.Int32)">
      <param name="stream">
      </param>
      <param name="options">
      </param>
      <param name="size">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MetadataReaderProvider.FromMetadataStream(System.IO.Stream,System.Reflection.Metadata.MetadataStreamOptions,System.Int32)">
      <param name="stream">
      </param>
      <param name="options">
      </param>
      <param name="size">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MetadataReaderProvider.Dispose" />
    <member name="M:System.Reflection.Metadata.MetadataReaderProvider.GetMetadataReader(System.Reflection.Metadata.MetadataReaderOptions,System.Reflection.Metadata.MetadataStringDecoder)">
      <param name="options">
      </param>
      <param name="utf8Decoder">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.BlobContentId" />
    <member name="M:System.Reflection.Metadata.BlobContentId.#ctor(System.Guid,System.UInt32)">
      <param name="guid">
      </param>
      <param name="stamp">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobContentId.#ctor(System.Collections.Immutable.ImmutableArray{System.Byte})">
      <param name="id">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobContentId.#ctor(System.Byte[])">
      <param name="id">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobContentId.FromHash(System.Collections.Immutable.ImmutableArray{System.Byte})">
      <param name="hashCode">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.BlobContentId.FromHash(System.Byte[])">
      <param name="hashCode">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.BlobContentId.GetTimeBasedProvider">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.BlobContentId.Equals(System.Reflection.Metadata.BlobContentId)">
      <param name="other">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.BlobContentId.Equals(System.Object)">
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.BlobContentId.GetHashCode">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.BlobContentId.op_Equality(System.Reflection.Metadata.BlobContentId,System.Reflection.Metadata.BlobContentId)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.BlobContentId.op_Inequality(System.Reflection.Metadata.BlobContentId,System.Reflection.Metadata.BlobContentId)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.BlobContentId.Guid">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.BlobContentId.Stamp">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.BlobContentId.IsDefault">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.PrimitiveSerializationTypeCode">
      <summary>Specifies constants that define the type codes used to encode types of primitive values in a <see cref="T:System.Reflection.Metadata.CustomAttribute"></see> value blob.</summary>
    </member>
    <member name="F:System.Reflection.Metadata.PrimitiveSerializationTypeCode.Boolean">
      <summary>A <see cref="T:System.Boolean"></see> type.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.PrimitiveSerializationTypeCode.Byte">
      <summary>An unsigned 1-byte integer type.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.PrimitiveSerializationTypeCode.SByte">
      <summary>A signed 1-byte integer type.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.PrimitiveSerializationTypeCode.Char">
      <summary>A <see cref="T:System.Char"></see> type.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.PrimitiveSerializationTypeCode.Int16">
      <summary>A signed 2-byte integer type.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.PrimitiveSerializationTypeCode.UInt16">
      <summary>An unsigned 2-byte integer type.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.PrimitiveSerializationTypeCode.Int32">
      <summary>A signed 4-byte integer type.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.PrimitiveSerializationTypeCode.UInt32">
      <summary>An unsigned 4-byte integer type.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.PrimitiveSerializationTypeCode.Int64">
      <summary>A signed 8-byte integer type.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.PrimitiveSerializationTypeCode.UInt64">
      <summary>An unsigned 8-byte integer type.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.PrimitiveSerializationTypeCode.Single">
      <summary>A 4-byte floating point type.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.PrimitiveSerializationTypeCode.Double">
      <summary>An 8-byte floating point type.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.PrimitiveSerializationTypeCode.String">
      <summary>A <see cref="T:System.String"></see> type.</summary>
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.ModuleDefinitionHandle" />
    <member name="M:System.Reflection.Metadata.ModuleDefinitionHandle.op_Implicit(System.Reflection.Metadata.ModuleDefinitionHandle)~System.Reflection.Metadata.Handle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.ModuleDefinitionHandle.op_Implicit(System.Reflection.Metadata.ModuleDefinitionHandle)~System.Reflection.Metadata.EntityHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.ModuleDefinitionHandle.op_Explicit(System.Reflection.Metadata.Handle)~System.Reflection.Metadata.ModuleDefinitionHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.ModuleDefinitionHandle.op_Explicit(System.Reflection.Metadata.EntityHandle)~System.Reflection.Metadata.ModuleDefinitionHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.ModuleDefinitionHandle.op_Equality(System.Reflection.Metadata.ModuleDefinitionHandle,System.Reflection.Metadata.ModuleDefinitionHandle)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.ModuleDefinitionHandle.Equals(System.Object)">
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.ModuleDefinitionHandle.Equals(System.Reflection.Metadata.ModuleDefinitionHandle)">
      <param name="other">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.ModuleDefinitionHandle.GetHashCode">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.ModuleDefinitionHandle.op_Inequality(System.Reflection.Metadata.ModuleDefinitionHandle,System.Reflection.Metadata.ModuleDefinitionHandle)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.ModuleDefinitionHandle.IsNil">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.AssemblyDefinitionHandle" />
    <member name="M:System.Reflection.Metadata.AssemblyDefinitionHandle.op_Implicit(System.Reflection.Metadata.AssemblyDefinitionHandle)~System.Reflection.Metadata.Handle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.AssemblyDefinitionHandle.op_Implicit(System.Reflection.Metadata.AssemblyDefinitionHandle)~System.Reflection.Metadata.EntityHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.AssemblyDefinitionHandle.op_Explicit(System.Reflection.Metadata.Handle)~System.Reflection.Metadata.AssemblyDefinitionHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.AssemblyDefinitionHandle.op_Explicit(System.Reflection.Metadata.EntityHandle)~System.Reflection.Metadata.AssemblyDefinitionHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.AssemblyDefinitionHandle.op_Equality(System.Reflection.Metadata.AssemblyDefinitionHandle,System.Reflection.Metadata.AssemblyDefinitionHandle)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.AssemblyDefinitionHandle.Equals(System.Object)">
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.AssemblyDefinitionHandle.Equals(System.Reflection.Metadata.AssemblyDefinitionHandle)">
      <param name="other">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.AssemblyDefinitionHandle.GetHashCode">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.AssemblyDefinitionHandle.op_Inequality(System.Reflection.Metadata.AssemblyDefinitionHandle,System.Reflection.Metadata.AssemblyDefinitionHandle)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.AssemblyDefinitionHandle.IsNil">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.InterfaceImplementationHandle" />
    <member name="M:System.Reflection.Metadata.InterfaceImplementationHandle.op_Implicit(System.Reflection.Metadata.InterfaceImplementationHandle)~System.Reflection.Metadata.Handle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.InterfaceImplementationHandle.op_Implicit(System.Reflection.Metadata.InterfaceImplementationHandle)~System.Reflection.Metadata.EntityHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.InterfaceImplementationHandle.op_Explicit(System.Reflection.Metadata.Handle)~System.Reflection.Metadata.InterfaceImplementationHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.InterfaceImplementationHandle.op_Explicit(System.Reflection.Metadata.EntityHandle)~System.Reflection.Metadata.InterfaceImplementationHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.InterfaceImplementationHandle.op_Equality(System.Reflection.Metadata.InterfaceImplementationHandle,System.Reflection.Metadata.InterfaceImplementationHandle)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.InterfaceImplementationHandle.Equals(System.Object)">
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.InterfaceImplementationHandle.Equals(System.Reflection.Metadata.InterfaceImplementationHandle)">
      <param name="other">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.InterfaceImplementationHandle.GetHashCode">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.InterfaceImplementationHandle.op_Inequality(System.Reflection.Metadata.InterfaceImplementationHandle,System.Reflection.Metadata.InterfaceImplementationHandle)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.InterfaceImplementationHandle.IsNil">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.MethodDefinitionHandle" />
    <member name="M:System.Reflection.Metadata.MethodDefinitionHandle.op_Implicit(System.Reflection.Metadata.MethodDefinitionHandle)~System.Reflection.Metadata.Handle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MethodDefinitionHandle.op_Implicit(System.Reflection.Metadata.MethodDefinitionHandle)~System.Reflection.Metadata.EntityHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MethodDefinitionHandle.op_Explicit(System.Reflection.Metadata.Handle)~System.Reflection.Metadata.MethodDefinitionHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MethodDefinitionHandle.op_Explicit(System.Reflection.Metadata.EntityHandle)~System.Reflection.Metadata.MethodDefinitionHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MethodDefinitionHandle.op_Equality(System.Reflection.Metadata.MethodDefinitionHandle,System.Reflection.Metadata.MethodDefinitionHandle)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MethodDefinitionHandle.Equals(System.Object)">
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MethodDefinitionHandle.Equals(System.Reflection.Metadata.MethodDefinitionHandle)">
      <param name="other">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MethodDefinitionHandle.GetHashCode">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MethodDefinitionHandle.op_Inequality(System.Reflection.Metadata.MethodDefinitionHandle,System.Reflection.Metadata.MethodDefinitionHandle)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MethodDefinitionHandle.ToDebugInformationHandle">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.MethodDefinitionHandle.IsNil">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.MethodImplementationHandle" />
    <member name="M:System.Reflection.Metadata.MethodImplementationHandle.op_Implicit(System.Reflection.Metadata.MethodImplementationHandle)~System.Reflection.Metadata.Handle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MethodImplementationHandle.op_Implicit(System.Reflection.Metadata.MethodImplementationHandle)~System.Reflection.Metadata.EntityHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MethodImplementationHandle.op_Explicit(System.Reflection.Metadata.Handle)~System.Reflection.Metadata.MethodImplementationHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MethodImplementationHandle.op_Explicit(System.Reflection.Metadata.EntityHandle)~System.Reflection.Metadata.MethodImplementationHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MethodImplementationHandle.op_Equality(System.Reflection.Metadata.MethodImplementationHandle,System.Reflection.Metadata.MethodImplementationHandle)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MethodImplementationHandle.Equals(System.Object)">
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MethodImplementationHandle.Equals(System.Reflection.Metadata.MethodImplementationHandle)">
      <param name="other">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MethodImplementationHandle.GetHashCode">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MethodImplementationHandle.op_Inequality(System.Reflection.Metadata.MethodImplementationHandle,System.Reflection.Metadata.MethodImplementationHandle)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.MethodImplementationHandle.IsNil">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.MethodSpecificationHandle" />
    <member name="M:System.Reflection.Metadata.MethodSpecificationHandle.op_Implicit(System.Reflection.Metadata.MethodSpecificationHandle)~System.Reflection.Metadata.Handle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MethodSpecificationHandle.op_Implicit(System.Reflection.Metadata.MethodSpecificationHandle)~System.Reflection.Metadata.EntityHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MethodSpecificationHandle.op_Explicit(System.Reflection.Metadata.Handle)~System.Reflection.Metadata.MethodSpecificationHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MethodSpecificationHandle.op_Explicit(System.Reflection.Metadata.EntityHandle)~System.Reflection.Metadata.MethodSpecificationHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MethodSpecificationHandle.op_Equality(System.Reflection.Metadata.MethodSpecificationHandle,System.Reflection.Metadata.MethodSpecificationHandle)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MethodSpecificationHandle.Equals(System.Object)">
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MethodSpecificationHandle.Equals(System.Reflection.Metadata.MethodSpecificationHandle)">
      <param name="other">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MethodSpecificationHandle.GetHashCode">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MethodSpecificationHandle.op_Inequality(System.Reflection.Metadata.MethodSpecificationHandle,System.Reflection.Metadata.MethodSpecificationHandle)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.MethodSpecificationHandle.IsNil">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.TypeDefinitionHandle" />
    <member name="M:System.Reflection.Metadata.TypeDefinitionHandle.op_Implicit(System.Reflection.Metadata.TypeDefinitionHandle)~System.Reflection.Metadata.Handle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.TypeDefinitionHandle.op_Implicit(System.Reflection.Metadata.TypeDefinitionHandle)~System.Reflection.Metadata.EntityHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.TypeDefinitionHandle.op_Explicit(System.Reflection.Metadata.Handle)~System.Reflection.Metadata.TypeDefinitionHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.TypeDefinitionHandle.op_Explicit(System.Reflection.Metadata.EntityHandle)~System.Reflection.Metadata.TypeDefinitionHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.TypeDefinitionHandle.op_Equality(System.Reflection.Metadata.TypeDefinitionHandle,System.Reflection.Metadata.TypeDefinitionHandle)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.TypeDefinitionHandle.Equals(System.Object)">
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.TypeDefinitionHandle.Equals(System.Reflection.Metadata.TypeDefinitionHandle)">
      <param name="other">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.TypeDefinitionHandle.GetHashCode">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.TypeDefinitionHandle.op_Inequality(System.Reflection.Metadata.TypeDefinitionHandle,System.Reflection.Metadata.TypeDefinitionHandle)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.TypeDefinitionHandle.IsNil">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.ExportedTypeHandle" />
    <member name="M:System.Reflection.Metadata.ExportedTypeHandle.op_Implicit(System.Reflection.Metadata.ExportedTypeHandle)~System.Reflection.Metadata.Handle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.ExportedTypeHandle.op_Implicit(System.Reflection.Metadata.ExportedTypeHandle)~System.Reflection.Metadata.EntityHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.ExportedTypeHandle.op_Explicit(System.Reflection.Metadata.Handle)~System.Reflection.Metadata.ExportedTypeHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.ExportedTypeHandle.op_Explicit(System.Reflection.Metadata.EntityHandle)~System.Reflection.Metadata.ExportedTypeHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.ExportedTypeHandle.op_Equality(System.Reflection.Metadata.ExportedTypeHandle,System.Reflection.Metadata.ExportedTypeHandle)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.ExportedTypeHandle.Equals(System.Object)">
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.ExportedTypeHandle.Equals(System.Reflection.Metadata.ExportedTypeHandle)">
      <param name="other">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.ExportedTypeHandle.GetHashCode">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.ExportedTypeHandle.op_Inequality(System.Reflection.Metadata.ExportedTypeHandle,System.Reflection.Metadata.ExportedTypeHandle)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.ExportedTypeHandle.IsNil">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.TypeReferenceHandle" />
    <member name="M:System.Reflection.Metadata.TypeReferenceHandle.op_Implicit(System.Reflection.Metadata.TypeReferenceHandle)~System.Reflection.Metadata.Handle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.TypeReferenceHandle.op_Implicit(System.Reflection.Metadata.TypeReferenceHandle)~System.Reflection.Metadata.EntityHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.TypeReferenceHandle.op_Explicit(System.Reflection.Metadata.Handle)~System.Reflection.Metadata.TypeReferenceHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.TypeReferenceHandle.op_Explicit(System.Reflection.Metadata.EntityHandle)~System.Reflection.Metadata.TypeReferenceHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.TypeReferenceHandle.op_Equality(System.Reflection.Metadata.TypeReferenceHandle,System.Reflection.Metadata.TypeReferenceHandle)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.TypeReferenceHandle.Equals(System.Object)">
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.TypeReferenceHandle.Equals(System.Reflection.Metadata.TypeReferenceHandle)">
      <param name="other">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.TypeReferenceHandle.GetHashCode">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.TypeReferenceHandle.op_Inequality(System.Reflection.Metadata.TypeReferenceHandle,System.Reflection.Metadata.TypeReferenceHandle)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.TypeReferenceHandle.IsNil">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.TypeSpecificationHandle" />
    <member name="M:System.Reflection.Metadata.TypeSpecificationHandle.op_Implicit(System.Reflection.Metadata.TypeSpecificationHandle)~System.Reflection.Metadata.Handle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.TypeSpecificationHandle.op_Implicit(System.Reflection.Metadata.TypeSpecificationHandle)~System.Reflection.Metadata.EntityHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.TypeSpecificationHandle.op_Explicit(System.Reflection.Metadata.Handle)~System.Reflection.Metadata.TypeSpecificationHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.TypeSpecificationHandle.op_Explicit(System.Reflection.Metadata.EntityHandle)~System.Reflection.Metadata.TypeSpecificationHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.TypeSpecificationHandle.op_Equality(System.Reflection.Metadata.TypeSpecificationHandle,System.Reflection.Metadata.TypeSpecificationHandle)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.TypeSpecificationHandle.Equals(System.Object)">
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.TypeSpecificationHandle.Equals(System.Reflection.Metadata.TypeSpecificationHandle)">
      <param name="other">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.TypeSpecificationHandle.GetHashCode">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.TypeSpecificationHandle.op_Inequality(System.Reflection.Metadata.TypeSpecificationHandle,System.Reflection.Metadata.TypeSpecificationHandle)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.TypeSpecificationHandle.IsNil">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.MemberReferenceHandle" />
    <member name="M:System.Reflection.Metadata.MemberReferenceHandle.op_Implicit(System.Reflection.Metadata.MemberReferenceHandle)~System.Reflection.Metadata.Handle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MemberReferenceHandle.op_Implicit(System.Reflection.Metadata.MemberReferenceHandle)~System.Reflection.Metadata.EntityHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MemberReferenceHandle.op_Explicit(System.Reflection.Metadata.Handle)~System.Reflection.Metadata.MemberReferenceHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MemberReferenceHandle.op_Explicit(System.Reflection.Metadata.EntityHandle)~System.Reflection.Metadata.MemberReferenceHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MemberReferenceHandle.op_Equality(System.Reflection.Metadata.MemberReferenceHandle,System.Reflection.Metadata.MemberReferenceHandle)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MemberReferenceHandle.Equals(System.Object)">
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MemberReferenceHandle.Equals(System.Reflection.Metadata.MemberReferenceHandle)">
      <param name="other">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MemberReferenceHandle.GetHashCode">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MemberReferenceHandle.op_Inequality(System.Reflection.Metadata.MemberReferenceHandle,System.Reflection.Metadata.MemberReferenceHandle)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.MemberReferenceHandle.IsNil">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.FieldDefinitionHandle" />
    <member name="M:System.Reflection.Metadata.FieldDefinitionHandle.op_Implicit(System.Reflection.Metadata.FieldDefinitionHandle)~System.Reflection.Metadata.Handle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.FieldDefinitionHandle.op_Implicit(System.Reflection.Metadata.FieldDefinitionHandle)~System.Reflection.Metadata.EntityHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.FieldDefinitionHandle.op_Explicit(System.Reflection.Metadata.Handle)~System.Reflection.Metadata.FieldDefinitionHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.FieldDefinitionHandle.op_Explicit(System.Reflection.Metadata.EntityHandle)~System.Reflection.Metadata.FieldDefinitionHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.FieldDefinitionHandle.op_Equality(System.Reflection.Metadata.FieldDefinitionHandle,System.Reflection.Metadata.FieldDefinitionHandle)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.FieldDefinitionHandle.Equals(System.Object)">
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.FieldDefinitionHandle.Equals(System.Reflection.Metadata.FieldDefinitionHandle)">
      <param name="other">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.FieldDefinitionHandle.GetHashCode">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.FieldDefinitionHandle.op_Inequality(System.Reflection.Metadata.FieldDefinitionHandle,System.Reflection.Metadata.FieldDefinitionHandle)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.FieldDefinitionHandle.IsNil">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.EventDefinitionHandle" />
    <member name="M:System.Reflection.Metadata.EventDefinitionHandle.op_Implicit(System.Reflection.Metadata.EventDefinitionHandle)~System.Reflection.Metadata.Handle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.EventDefinitionHandle.op_Implicit(System.Reflection.Metadata.EventDefinitionHandle)~System.Reflection.Metadata.EntityHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.EventDefinitionHandle.op_Explicit(System.Reflection.Metadata.Handle)~System.Reflection.Metadata.EventDefinitionHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.EventDefinitionHandle.op_Explicit(System.Reflection.Metadata.EntityHandle)~System.Reflection.Metadata.EventDefinitionHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.EventDefinitionHandle.op_Equality(System.Reflection.Metadata.EventDefinitionHandle,System.Reflection.Metadata.EventDefinitionHandle)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.EventDefinitionHandle.Equals(System.Object)">
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.EventDefinitionHandle.Equals(System.Reflection.Metadata.EventDefinitionHandle)">
      <param name="other">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.EventDefinitionHandle.GetHashCode">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.EventDefinitionHandle.op_Inequality(System.Reflection.Metadata.EventDefinitionHandle,System.Reflection.Metadata.EventDefinitionHandle)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.EventDefinitionHandle.IsNil">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.PropertyDefinitionHandle" />
    <member name="M:System.Reflection.Metadata.PropertyDefinitionHandle.op_Implicit(System.Reflection.Metadata.PropertyDefinitionHandle)~System.Reflection.Metadata.Handle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.PropertyDefinitionHandle.op_Implicit(System.Reflection.Metadata.PropertyDefinitionHandle)~System.Reflection.Metadata.EntityHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.PropertyDefinitionHandle.op_Explicit(System.Reflection.Metadata.Handle)~System.Reflection.Metadata.PropertyDefinitionHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.PropertyDefinitionHandle.op_Explicit(System.Reflection.Metadata.EntityHandle)~System.Reflection.Metadata.PropertyDefinitionHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.PropertyDefinitionHandle.op_Equality(System.Reflection.Metadata.PropertyDefinitionHandle,System.Reflection.Metadata.PropertyDefinitionHandle)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.PropertyDefinitionHandle.Equals(System.Object)">
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.PropertyDefinitionHandle.Equals(System.Reflection.Metadata.PropertyDefinitionHandle)">
      <param name="other">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.PropertyDefinitionHandle.GetHashCode">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.PropertyDefinitionHandle.op_Inequality(System.Reflection.Metadata.PropertyDefinitionHandle,System.Reflection.Metadata.PropertyDefinitionHandle)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.PropertyDefinitionHandle.IsNil">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.StandaloneSignatureHandle" />
    <member name="M:System.Reflection.Metadata.StandaloneSignatureHandle.op_Implicit(System.Reflection.Metadata.StandaloneSignatureHandle)~System.Reflection.Metadata.Handle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.StandaloneSignatureHandle.op_Implicit(System.Reflection.Metadata.StandaloneSignatureHandle)~System.Reflection.Metadata.EntityHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.StandaloneSignatureHandle.op_Explicit(System.Reflection.Metadata.Handle)~System.Reflection.Metadata.StandaloneSignatureHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.StandaloneSignatureHandle.op_Explicit(System.Reflection.Metadata.EntityHandle)~System.Reflection.Metadata.StandaloneSignatureHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.StandaloneSignatureHandle.op_Equality(System.Reflection.Metadata.StandaloneSignatureHandle,System.Reflection.Metadata.StandaloneSignatureHandle)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.StandaloneSignatureHandle.Equals(System.Object)">
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.StandaloneSignatureHandle.Equals(System.Reflection.Metadata.StandaloneSignatureHandle)">
      <param name="other">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.StandaloneSignatureHandle.GetHashCode">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.StandaloneSignatureHandle.op_Inequality(System.Reflection.Metadata.StandaloneSignatureHandle,System.Reflection.Metadata.StandaloneSignatureHandle)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.StandaloneSignatureHandle.IsNil">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.ParameterHandle" />
    <member name="M:System.Reflection.Metadata.ParameterHandle.op_Implicit(System.Reflection.Metadata.ParameterHandle)~System.Reflection.Metadata.Handle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.ParameterHandle.op_Implicit(System.Reflection.Metadata.ParameterHandle)~System.Reflection.Metadata.EntityHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.ParameterHandle.op_Explicit(System.Reflection.Metadata.Handle)~System.Reflection.Metadata.ParameterHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.ParameterHandle.op_Explicit(System.Reflection.Metadata.EntityHandle)~System.Reflection.Metadata.ParameterHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.ParameterHandle.op_Equality(System.Reflection.Metadata.ParameterHandle,System.Reflection.Metadata.ParameterHandle)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.ParameterHandle.Equals(System.Object)">
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.ParameterHandle.Equals(System.Reflection.Metadata.ParameterHandle)">
      <param name="other">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.ParameterHandle.GetHashCode">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.ParameterHandle.op_Inequality(System.Reflection.Metadata.ParameterHandle,System.Reflection.Metadata.ParameterHandle)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.ParameterHandle.IsNil">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.GenericParameterHandle" />
    <member name="M:System.Reflection.Metadata.GenericParameterHandle.op_Implicit(System.Reflection.Metadata.GenericParameterHandle)~System.Reflection.Metadata.Handle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.GenericParameterHandle.op_Implicit(System.Reflection.Metadata.GenericParameterHandle)~System.Reflection.Metadata.EntityHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.GenericParameterHandle.op_Explicit(System.Reflection.Metadata.Handle)~System.Reflection.Metadata.GenericParameterHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.GenericParameterHandle.op_Explicit(System.Reflection.Metadata.EntityHandle)~System.Reflection.Metadata.GenericParameterHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.GenericParameterHandle.op_Equality(System.Reflection.Metadata.GenericParameterHandle,System.Reflection.Metadata.GenericParameterHandle)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.GenericParameterHandle.Equals(System.Object)">
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.GenericParameterHandle.Equals(System.Reflection.Metadata.GenericParameterHandle)">
      <param name="other">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.GenericParameterHandle.GetHashCode">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.GenericParameterHandle.op_Inequality(System.Reflection.Metadata.GenericParameterHandle,System.Reflection.Metadata.GenericParameterHandle)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.GenericParameterHandle.IsNil">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.GenericParameterConstraintHandle" />
    <member name="M:System.Reflection.Metadata.GenericParameterConstraintHandle.op_Implicit(System.Reflection.Metadata.GenericParameterConstraintHandle)~System.Reflection.Metadata.Handle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.GenericParameterConstraintHandle.op_Implicit(System.Reflection.Metadata.GenericParameterConstraintHandle)~System.Reflection.Metadata.EntityHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.GenericParameterConstraintHandle.op_Explicit(System.Reflection.Metadata.Handle)~System.Reflection.Metadata.GenericParameterConstraintHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.GenericParameterConstraintHandle.op_Explicit(System.Reflection.Metadata.EntityHandle)~System.Reflection.Metadata.GenericParameterConstraintHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.GenericParameterConstraintHandle.op_Equality(System.Reflection.Metadata.GenericParameterConstraintHandle,System.Reflection.Metadata.GenericParameterConstraintHandle)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.GenericParameterConstraintHandle.Equals(System.Object)">
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.GenericParameterConstraintHandle.Equals(System.Reflection.Metadata.GenericParameterConstraintHandle)">
      <param name="other">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.GenericParameterConstraintHandle.GetHashCode">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.GenericParameterConstraintHandle.op_Inequality(System.Reflection.Metadata.GenericParameterConstraintHandle,System.Reflection.Metadata.GenericParameterConstraintHandle)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.GenericParameterConstraintHandle.IsNil">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.ModuleReferenceHandle" />
    <member name="M:System.Reflection.Metadata.ModuleReferenceHandle.op_Implicit(System.Reflection.Metadata.ModuleReferenceHandle)~System.Reflection.Metadata.Handle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.ModuleReferenceHandle.op_Implicit(System.Reflection.Metadata.ModuleReferenceHandle)~System.Reflection.Metadata.EntityHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.ModuleReferenceHandle.op_Explicit(System.Reflection.Metadata.Handle)~System.Reflection.Metadata.ModuleReferenceHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.ModuleReferenceHandle.op_Explicit(System.Reflection.Metadata.EntityHandle)~System.Reflection.Metadata.ModuleReferenceHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.ModuleReferenceHandle.op_Equality(System.Reflection.Metadata.ModuleReferenceHandle,System.Reflection.Metadata.ModuleReferenceHandle)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.ModuleReferenceHandle.Equals(System.Object)">
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.ModuleReferenceHandle.Equals(System.Reflection.Metadata.ModuleReferenceHandle)">
      <param name="other">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.ModuleReferenceHandle.GetHashCode">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.ModuleReferenceHandle.op_Inequality(System.Reflection.Metadata.ModuleReferenceHandle,System.Reflection.Metadata.ModuleReferenceHandle)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.ModuleReferenceHandle.IsNil">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.AssemblyReferenceHandle" />
    <member name="M:System.Reflection.Metadata.AssemblyReferenceHandle.op_Implicit(System.Reflection.Metadata.AssemblyReferenceHandle)~System.Reflection.Metadata.Handle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.AssemblyReferenceHandle.op_Implicit(System.Reflection.Metadata.AssemblyReferenceHandle)~System.Reflection.Metadata.EntityHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.AssemblyReferenceHandle.op_Explicit(System.Reflection.Metadata.Handle)~System.Reflection.Metadata.AssemblyReferenceHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.AssemblyReferenceHandle.op_Explicit(System.Reflection.Metadata.EntityHandle)~System.Reflection.Metadata.AssemblyReferenceHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.AssemblyReferenceHandle.op_Equality(System.Reflection.Metadata.AssemblyReferenceHandle,System.Reflection.Metadata.AssemblyReferenceHandle)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.AssemblyReferenceHandle.Equals(System.Object)">
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.AssemblyReferenceHandle.Equals(System.Reflection.Metadata.AssemblyReferenceHandle)">
      <param name="other">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.AssemblyReferenceHandle.GetHashCode">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.AssemblyReferenceHandle.op_Inequality(System.Reflection.Metadata.AssemblyReferenceHandle,System.Reflection.Metadata.AssemblyReferenceHandle)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.AssemblyReferenceHandle.IsNil">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.CustomAttributeHandle" />
    <member name="M:System.Reflection.Metadata.CustomAttributeHandle.op_Implicit(System.Reflection.Metadata.CustomAttributeHandle)~System.Reflection.Metadata.Handle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.CustomAttributeHandle.op_Implicit(System.Reflection.Metadata.CustomAttributeHandle)~System.Reflection.Metadata.EntityHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.CustomAttributeHandle.op_Explicit(System.Reflection.Metadata.Handle)~System.Reflection.Metadata.CustomAttributeHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.CustomAttributeHandle.op_Explicit(System.Reflection.Metadata.EntityHandle)~System.Reflection.Metadata.CustomAttributeHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.CustomAttributeHandle.op_Equality(System.Reflection.Metadata.CustomAttributeHandle,System.Reflection.Metadata.CustomAttributeHandle)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.CustomAttributeHandle.Equals(System.Object)">
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.CustomAttributeHandle.Equals(System.Reflection.Metadata.CustomAttributeHandle)">
      <param name="other">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.CustomAttributeHandle.GetHashCode">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.CustomAttributeHandle.op_Inequality(System.Reflection.Metadata.CustomAttributeHandle,System.Reflection.Metadata.CustomAttributeHandle)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.CustomAttributeHandle.IsNil">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.DeclarativeSecurityAttributeHandle" />
    <member name="M:System.Reflection.Metadata.DeclarativeSecurityAttributeHandle.op_Implicit(System.Reflection.Metadata.DeclarativeSecurityAttributeHandle)~System.Reflection.Metadata.Handle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.DeclarativeSecurityAttributeHandle.op_Implicit(System.Reflection.Metadata.DeclarativeSecurityAttributeHandle)~System.Reflection.Metadata.EntityHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.DeclarativeSecurityAttributeHandle.op_Explicit(System.Reflection.Metadata.Handle)~System.Reflection.Metadata.DeclarativeSecurityAttributeHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.DeclarativeSecurityAttributeHandle.op_Explicit(System.Reflection.Metadata.EntityHandle)~System.Reflection.Metadata.DeclarativeSecurityAttributeHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.DeclarativeSecurityAttributeHandle.op_Equality(System.Reflection.Metadata.DeclarativeSecurityAttributeHandle,System.Reflection.Metadata.DeclarativeSecurityAttributeHandle)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.DeclarativeSecurityAttributeHandle.Equals(System.Object)">
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.DeclarativeSecurityAttributeHandle.Equals(System.Reflection.Metadata.DeclarativeSecurityAttributeHandle)">
      <param name="other">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.DeclarativeSecurityAttributeHandle.GetHashCode">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.DeclarativeSecurityAttributeHandle.op_Inequality(System.Reflection.Metadata.DeclarativeSecurityAttributeHandle,System.Reflection.Metadata.DeclarativeSecurityAttributeHandle)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.DeclarativeSecurityAttributeHandle.IsNil">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.ConstantHandle" />
    <member name="M:System.Reflection.Metadata.ConstantHandle.op_Implicit(System.Reflection.Metadata.ConstantHandle)~System.Reflection.Metadata.Handle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.ConstantHandle.op_Implicit(System.Reflection.Metadata.ConstantHandle)~System.Reflection.Metadata.EntityHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.ConstantHandle.op_Explicit(System.Reflection.Metadata.Handle)~System.Reflection.Metadata.ConstantHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.ConstantHandle.op_Explicit(System.Reflection.Metadata.EntityHandle)~System.Reflection.Metadata.ConstantHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.ConstantHandle.op_Equality(System.Reflection.Metadata.ConstantHandle,System.Reflection.Metadata.ConstantHandle)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.ConstantHandle.Equals(System.Object)">
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.ConstantHandle.Equals(System.Reflection.Metadata.ConstantHandle)">
      <param name="other">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.ConstantHandle.GetHashCode">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.ConstantHandle.op_Inequality(System.Reflection.Metadata.ConstantHandle,System.Reflection.Metadata.ConstantHandle)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.ConstantHandle.IsNil">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.ManifestResourceHandle" />
    <member name="M:System.Reflection.Metadata.ManifestResourceHandle.op_Implicit(System.Reflection.Metadata.ManifestResourceHandle)~System.Reflection.Metadata.Handle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.ManifestResourceHandle.op_Implicit(System.Reflection.Metadata.ManifestResourceHandle)~System.Reflection.Metadata.EntityHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.ManifestResourceHandle.op_Explicit(System.Reflection.Metadata.Handle)~System.Reflection.Metadata.ManifestResourceHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.ManifestResourceHandle.op_Explicit(System.Reflection.Metadata.EntityHandle)~System.Reflection.Metadata.ManifestResourceHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.ManifestResourceHandle.op_Equality(System.Reflection.Metadata.ManifestResourceHandle,System.Reflection.Metadata.ManifestResourceHandle)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.ManifestResourceHandle.Equals(System.Object)">
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.ManifestResourceHandle.Equals(System.Reflection.Metadata.ManifestResourceHandle)">
      <param name="other">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.ManifestResourceHandle.GetHashCode">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.ManifestResourceHandle.op_Inequality(System.Reflection.Metadata.ManifestResourceHandle,System.Reflection.Metadata.ManifestResourceHandle)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.ManifestResourceHandle.IsNil">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.AssemblyFileHandle" />
    <member name="M:System.Reflection.Metadata.AssemblyFileHandle.op_Implicit(System.Reflection.Metadata.AssemblyFileHandle)~System.Reflection.Metadata.Handle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.AssemblyFileHandle.op_Implicit(System.Reflection.Metadata.AssemblyFileHandle)~System.Reflection.Metadata.EntityHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.AssemblyFileHandle.op_Explicit(System.Reflection.Metadata.Handle)~System.Reflection.Metadata.AssemblyFileHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.AssemblyFileHandle.op_Explicit(System.Reflection.Metadata.EntityHandle)~System.Reflection.Metadata.AssemblyFileHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.AssemblyFileHandle.op_Equality(System.Reflection.Metadata.AssemblyFileHandle,System.Reflection.Metadata.AssemblyFileHandle)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.AssemblyFileHandle.Equals(System.Object)">
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.AssemblyFileHandle.Equals(System.Reflection.Metadata.AssemblyFileHandle)">
      <param name="other">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.AssemblyFileHandle.GetHashCode">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.AssemblyFileHandle.op_Inequality(System.Reflection.Metadata.AssemblyFileHandle,System.Reflection.Metadata.AssemblyFileHandle)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.AssemblyFileHandle.IsNil">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.UserStringHandle" />
    <member name="M:System.Reflection.Metadata.UserStringHandle.op_Implicit(System.Reflection.Metadata.UserStringHandle)~System.Reflection.Metadata.Handle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.UserStringHandle.op_Explicit(System.Reflection.Metadata.Handle)~System.Reflection.Metadata.UserStringHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.UserStringHandle.op_Equality(System.Reflection.Metadata.UserStringHandle,System.Reflection.Metadata.UserStringHandle)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.UserStringHandle.Equals(System.Object)">
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.UserStringHandle.Equals(System.Reflection.Metadata.UserStringHandle)">
      <param name="other">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.UserStringHandle.GetHashCode">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.UserStringHandle.op_Inequality(System.Reflection.Metadata.UserStringHandle,System.Reflection.Metadata.UserStringHandle)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.UserStringHandle.IsNil">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.StringHandle" />
    <member name="M:System.Reflection.Metadata.StringHandle.op_Implicit(System.Reflection.Metadata.StringHandle)~System.Reflection.Metadata.Handle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.StringHandle.op_Explicit(System.Reflection.Metadata.Handle)~System.Reflection.Metadata.StringHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.StringHandle.Equals(System.Object)">
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.StringHandle.Equals(System.Reflection.Metadata.StringHandle)">
      <param name="other">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.StringHandle.GetHashCode">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.StringHandle.op_Equality(System.Reflection.Metadata.StringHandle,System.Reflection.Metadata.StringHandle)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.StringHandle.op_Inequality(System.Reflection.Metadata.StringHandle,System.Reflection.Metadata.StringHandle)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.StringHandle.IsNil">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.NamespaceDefinitionHandle" />
    <member name="M:System.Reflection.Metadata.NamespaceDefinitionHandle.op_Implicit(System.Reflection.Metadata.NamespaceDefinitionHandle)~System.Reflection.Metadata.Handle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.NamespaceDefinitionHandle.op_Explicit(System.Reflection.Metadata.Handle)~System.Reflection.Metadata.NamespaceDefinitionHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.NamespaceDefinitionHandle.Equals(System.Object)">
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.NamespaceDefinitionHandle.Equals(System.Reflection.Metadata.NamespaceDefinitionHandle)">
      <param name="other">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.NamespaceDefinitionHandle.GetHashCode">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.NamespaceDefinitionHandle.op_Equality(System.Reflection.Metadata.NamespaceDefinitionHandle,System.Reflection.Metadata.NamespaceDefinitionHandle)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.NamespaceDefinitionHandle.op_Inequality(System.Reflection.Metadata.NamespaceDefinitionHandle,System.Reflection.Metadata.NamespaceDefinitionHandle)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.NamespaceDefinitionHandle.IsNil">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.BlobHandle" />
    <member name="M:System.Reflection.Metadata.BlobHandle.op_Implicit(System.Reflection.Metadata.BlobHandle)~System.Reflection.Metadata.Handle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.BlobHandle.op_Explicit(System.Reflection.Metadata.Handle)~System.Reflection.Metadata.BlobHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.BlobHandle.Equals(System.Object)">
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.BlobHandle.Equals(System.Reflection.Metadata.BlobHandle)">
      <param name="other">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.BlobHandle.GetHashCode">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.BlobHandle.op_Equality(System.Reflection.Metadata.BlobHandle,System.Reflection.Metadata.BlobHandle)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.BlobHandle.op_Inequality(System.Reflection.Metadata.BlobHandle,System.Reflection.Metadata.BlobHandle)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.BlobHandle.IsNil">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.GuidHandle" />
    <member name="M:System.Reflection.Metadata.GuidHandle.op_Implicit(System.Reflection.Metadata.GuidHandle)~System.Reflection.Metadata.Handle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.GuidHandle.op_Explicit(System.Reflection.Metadata.Handle)~System.Reflection.Metadata.GuidHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.GuidHandle.Equals(System.Object)">
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.GuidHandle.Equals(System.Reflection.Metadata.GuidHandle)">
      <param name="other">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.GuidHandle.GetHashCode">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.GuidHandle.op_Equality(System.Reflection.Metadata.GuidHandle,System.Reflection.Metadata.GuidHandle)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.GuidHandle.op_Inequality(System.Reflection.Metadata.GuidHandle,System.Reflection.Metadata.GuidHandle)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.GuidHandle.IsNil">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.AssemblyDefinition" />
    <member name="M:System.Reflection.Metadata.AssemblyDefinition.GetCustomAttributes">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.AssemblyDefinition.GetDeclarativeSecurityAttributes">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.AssemblyDefinition.HashAlgorithm">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.AssemblyDefinition.Version">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.AssemblyDefinition.Flags">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.AssemblyDefinition.Name">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.AssemblyDefinition.Culture">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.AssemblyDefinition.PublicKey">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.AssemblyFile" />
    <member name="M:System.Reflection.Metadata.AssemblyFile.GetCustomAttributes">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.AssemblyFile.ContainsMetadata">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.AssemblyFile.Name">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.AssemblyFile.HashValue">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.AssemblyReference" />
    <member name="M:System.Reflection.Metadata.AssemblyReference.GetCustomAttributes">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.AssemblyReference.Version">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.AssemblyReference.Flags">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.AssemblyReference.Name">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.AssemblyReference.Culture">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.AssemblyReference.PublicKeyOrToken">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.AssemblyReference.HashValue">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.BlobReader" />
    <member name="M:System.Reflection.Metadata.BlobReader.#ctor(System.Byte*,System.Int32)">
      <param name="buffer">
      </param>
      <param name="length">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobReader.Reset" />
    <member name="M:System.Reflection.Metadata.BlobReader.Align(System.Byte)">
      <param name="alignment">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobReader.ReadBoolean">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.BlobReader.ReadSByte">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.BlobReader.ReadByte">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.BlobReader.ReadChar">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.BlobReader.ReadInt16">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.BlobReader.ReadUInt16">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.BlobReader.ReadInt32">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.BlobReader.ReadUInt32">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.BlobReader.ReadInt64">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.BlobReader.ReadUInt64">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.BlobReader.ReadSingle">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.BlobReader.ReadDouble">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.BlobReader.ReadGuid">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.BlobReader.ReadDecimal">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.BlobReader.ReadDateTime">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.BlobReader.ReadSignatureHeader">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.BlobReader.IndexOf(System.Byte)">
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.BlobReader.ReadUTF8(System.Int32)">
      <param name="byteCount">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.BlobReader.ReadUTF16(System.Int32)">
      <param name="byteCount">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.BlobReader.ReadBytes(System.Int32)">
      <param name="byteCount">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.BlobReader.ReadBytes(System.Int32,System.Byte[],System.Int32)">
      <param name="byteCount">
      </param>
      <param name="buffer">
      </param>
      <param name="bufferOffset">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.BlobReader.TryReadCompressedInteger(System.Int32@)">
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.BlobReader.ReadCompressedInteger">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.BlobReader.TryReadCompressedSignedInteger(System.Int32@)">
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.BlobReader.ReadCompressedSignedInteger">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.BlobReader.ReadSerializationTypeCode">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.BlobReader.ReadSignatureTypeCode">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.BlobReader.ReadSerializedString">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.BlobReader.ReadTypeHandle">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.BlobReader.ReadBlobHandle">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.BlobReader.ReadConstant(System.Reflection.Metadata.ConstantTypeCode)">
      <param name="typeCode">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.BlobReader.StartPointer">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.BlobReader.CurrentPointer">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.BlobReader.Length">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.BlobReader.Offset">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.BlobReader.RemainingBytes">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.Constant" />
    <member name="P:System.Reflection.Metadata.Constant.TypeCode">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.Constant.Value">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.Constant.Parent">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.ConstantTypeCode">
      <summary>Specifies values that represent types of metadata constants.</summary>
    </member>
    <member name="F:System.Reflection.Metadata.ConstantTypeCode.Invalid">
      <summary>An invalid type.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ConstantTypeCode.Boolean">
      <summary>A Boolean type.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ConstantTypeCode.Char">
      <summary>A character type.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ConstantTypeCode.SByte">
      <summary>A signed 1-byte integer type.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ConstantTypeCode.Byte">
      <summary>An unsigned 1-byte integer.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ConstantTypeCode.Int16">
      <summary>A signed 2-byte integer type.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ConstantTypeCode.UInt16">
      <summary>An unsigned 2-byte integer type.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ConstantTypeCode.Int32">
      <summary>A signed 4-byte integer type.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ConstantTypeCode.UInt32">
      <summary>An unsigned 4-byte integer type.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ConstantTypeCode.Int64">
      <summary>A signed 8-byte integer type.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ConstantTypeCode.UInt64">
      <summary>An unsigned 8-byte integer type.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ConstantTypeCode.Single">
      <summary>A 4-byte floating point type.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ConstantTypeCode.Double">
      <summary>An 8-byte floating point type.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ConstantTypeCode.String">
      <summary>A <see cref="T:System.String"></see> type.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ConstantTypeCode.NullReference">
      <summary>A null reference.</summary>
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.CustomAttribute" />
    <member name="M:System.Reflection.Metadata.CustomAttribute.DecodeValue``1(System.Reflection.Metadata.ICustomAttributeTypeProvider{``0})">
      <param name="provider">
      </param>
      <typeparam name="TType">
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.CustomAttribute.Constructor">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.CustomAttribute.Parent">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.CustomAttribute.Value">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.CustomAttributeNamedArgumentKind">
      <summary>Specifies constants that define the kinds of arguments in a custom attribute signature.</summary>
    </member>
    <member name="F:System.Reflection.Metadata.CustomAttributeNamedArgumentKind.Field">
      <summary>A field argument.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.CustomAttributeNamedArgumentKind.Property">
      <summary>A property argument.</summary>
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.DeclarativeSecurityAttribute" />
    <member name="P:System.Reflection.Metadata.DeclarativeSecurityAttribute.Action">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.DeclarativeSecurityAttribute.Parent">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.DeclarativeSecurityAttribute.PermissionSet">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.ArrayShape">
      <summary>Represents the shape of an array type.</summary>
    </member>
    <member name="M:System.Reflection.Metadata.ArrayShape.#ctor(System.Int32,System.Collections.Immutable.ImmutableArray{System.Int32},System.Collections.Immutable.ImmutableArray{System.Int32})">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.Metadata.ArrayShape"></see> structure.</summary>
      <param name="rank">The number of dimensions in the array.</param>
      <param name="sizes">The size of each dimension.</param>
      <param name="lowerBounds">The lower-bound of each dimension.</param>
    </member>
    <member name="P:System.Reflection.Metadata.ArrayShape.Rank">
      <summary>Gets the number of dimensions in the array.</summary>
      <returns>The number of dimensions.</returns>
    </member>
    <member name="P:System.Reflection.Metadata.ArrayShape.Sizes">
      <summary>Gets the sizes of all dimensions.</summary>
      <returns>An array of sizes.</returns>
    </member>
    <member name="P:System.Reflection.Metadata.ArrayShape.LowerBounds">
      <summary>Gets the lower-bounds of all dimensions. Length may be smaller than rank, in which case the trailing dimensions have unspecified lower bounds.</summary>
      <returns>An array of lower-bounds.</returns>
    </member>
    <member name="T:System.Reflection.Metadata.ISZArrayTypeProvider`1">
      <typeparam name="TType">
      </typeparam>
    </member>
    <member name="M:System.Reflection.Metadata.ISZArrayTypeProvider`1.GetSZArrayType(`0)">
      <param name="elementType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.ISignatureTypeProvider`2">
      <typeparam name="TType">
      </typeparam>
      <typeparam name="TGenericContext">
      </typeparam>
    </member>
    <member name="M:System.Reflection.Metadata.ISignatureTypeProvider`2.GetFunctionPointerType(System.Reflection.Metadata.MethodSignature{`0})">
      <param name="signature">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.ISignatureTypeProvider`2.GetGenericMethodParameter(`1,System.Int32)">
      <param name="genericContext">
      </param>
      <param name="index">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.ISignatureTypeProvider`2.GetGenericTypeParameter(`1,System.Int32)">
      <param name="genericContext">
      </param>
      <param name="index">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.ISignatureTypeProvider`2.GetModifiedType(`0,`0,System.Boolean)">
      <param name="modifier">
      </param>
      <param name="unmodifiedType">
      </param>
      <param name="isRequired">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.ISignatureTypeProvider`2.GetPinnedType(`0)">
      <param name="elementType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.ISignatureTypeProvider`2.GetTypeFromSpecification(System.Reflection.Metadata.MetadataReader,`1,System.Reflection.Metadata.TypeSpecificationHandle,System.Byte)">
      <param name="reader">
      </param>
      <param name="genericContext">
      </param>
      <param name="handle">
      </param>
      <param name="rawTypeKind">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.ISimpleTypeProvider`1">
      <typeparam name="TType">
      </typeparam>
    </member>
    <member name="M:System.Reflection.Metadata.ISimpleTypeProvider`1.GetPrimitiveType(System.Reflection.Metadata.PrimitiveTypeCode)">
      <param name="typeCode">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.ISimpleTypeProvider`1.GetTypeFromDefinition(System.Reflection.Metadata.MetadataReader,System.Reflection.Metadata.TypeDefinitionHandle,System.Byte)">
      <param name="reader">
      </param>
      <param name="handle">
      </param>
      <param name="rawTypeKind">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.ISimpleTypeProvider`1.GetTypeFromReference(System.Reflection.Metadata.MetadataReader,System.Reflection.Metadata.TypeReferenceHandle,System.Byte)">
      <param name="reader">
      </param>
      <param name="handle">
      </param>
      <param name="rawTypeKind">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.SignatureTypeKind">
      <summary>Indicates the type definition of the signature.</summary>
    </member>
    <member name="F:System.Reflection.Metadata.SignatureTypeKind.Unknown">
      <summary>It isn&amp;#39;t known in the current context if the type reference or definition is a class or value type.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.SignatureTypeKind.Class">
      <summary>The type definition or reference refers to a class.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.SignatureTypeKind.ValueType">
      <summary>The type definition or reference refers to a value type.</summary>
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.IConstructedTypeProvider`1">
      <typeparam name="TType">
      </typeparam>
    </member>
    <member name="M:System.Reflection.Metadata.IConstructedTypeProvider`1.GetGenericInstantiation(`0,System.Collections.Immutable.ImmutableArray{`0})">
      <param name="genericType">
      </param>
      <param name="typeArguments">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.IConstructedTypeProvider`1.GetArrayType(`0,System.Reflection.Metadata.ArrayShape)">
      <param name="elementType">
      </param>
      <param name="shape">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.IConstructedTypeProvider`1.GetByReferenceType(`0)">
      <param name="elementType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.IConstructedTypeProvider`1.GetPointerType(`0)">
      <param name="elementType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.MethodSignature`1">
      <summary>Represents a method (definition, reference, or standalone) or property signature. In the case of properties, the signature matches that of a getter with a distinguishing <see cref="T:System.Reflection.Metadata.SignatureHeader"></see>.</summary>
      <typeparam name="TType">The method type.</typeparam>
    </member>
    <member name="M:System.Reflection.Metadata.MethodSignature`1.#ctor(System.Reflection.Metadata.SignatureHeader,`0,System.Int32,System.Int32,System.Collections.Immutable.ImmutableArray{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.Metadata.MethodSignature`1"></see> structure using the specified header, return type, and parameter information.</summary>
      <param name="header">The information in the leading byte of the signature (kind, calling convention, flags).</param>
      <param name="returnType">The return type of the method.</param>
      <param name="requiredParameterCount">The number of required parameters.</param>
      <param name="genericParameterCount">The number of generic type parameters.</param>
      <param name="parameterTypes">The parameter types.</param>
    </member>
    <member name="P:System.Reflection.Metadata.MethodSignature`1.Header">
      <summary>Gets the information in the leading byte of the signature (kind, calling convention, flags).</summary>
      <returns>The header signature.</returns>
    </member>
    <member name="P:System.Reflection.Metadata.MethodSignature`1.ReturnType">
      <summary>Gets the return type of the method.</summary>
      <returns>The return type.</returns>
    </member>
    <member name="P:System.Reflection.Metadata.MethodSignature`1.RequiredParameterCount">
      <summary>Gets the number of parameters that are required for the method.</summary>
      <returns>The number of required parameters.</returns>
    </member>
    <member name="P:System.Reflection.Metadata.MethodSignature`1.GenericParameterCount">
      <summary>Gets the number of generic type parameters for the method.</summary>
      <returns>The number of generic type parameters, or 0 for non-generic methods.</returns>
    </member>
    <member name="P:System.Reflection.Metadata.MethodSignature`1.ParameterTypes">
      <summary>Gets the method&amp;#39;s parameter types.</summary>
      <returns>An immutable collection of parameter types.</returns>
    </member>
    <member name="T:System.Reflection.Metadata.PrimitiveTypeCode">
      <summary>Specifies constants that define primitive types found in metadata signatures.</summary>
    </member>
    <member name="F:System.Reflection.Metadata.PrimitiveTypeCode.Boolean">
      <summary>A <see cref="T:System.Boolean"></see> type.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.PrimitiveTypeCode.Byte">
      <summary>A <see cref="T:System.Byte"></see> type.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.PrimitiveTypeCode.SByte">
      <summary>An <see cref="T:System.SByte"></see> type.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.PrimitiveTypeCode.Char">
      <summary>A <see cref="T:System.Char"></see> type.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.PrimitiveTypeCode.Int16">
      <summary>A <see cref="T:System.Int16"></see> type.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.PrimitiveTypeCode.UInt16">
      <summary>A <see cref="T:System.UInt16"></see> type.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.PrimitiveTypeCode.Int32">
      <summary>A <see cref="T:System.Int32"></see> type.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.PrimitiveTypeCode.UInt32">
      <summary>A <see cref="T:System.UInt32"></see> type.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.PrimitiveTypeCode.Int64">
      <summary>A <see cref="T:System.Int64"></see> type.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.PrimitiveTypeCode.UInt64">
      <summary>A <see cref="T:System.UInt64"></see> type.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.PrimitiveTypeCode.Single">
      <summary>A <see cref="T:System.Single"></see> type.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.PrimitiveTypeCode.Double">
      <summary>A <see cref="T:System.Double"></see> type.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.PrimitiveTypeCode.IntPtr">
      <summary>A <see cref="T:System.IntPtr"></see> type.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.PrimitiveTypeCode.UIntPtr">
      <summary>A <see cref="T:System.UIntPtr"></see> type.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.PrimitiveTypeCode.Object">
      <summary>An <see cref="T:System.Object"></see> type.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.PrimitiveTypeCode.String">
      <summary>An <see cref="T:System.Single"></see> type.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.PrimitiveTypeCode.TypedReference">
      <summary>A typed reference.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.PrimitiveTypeCode.Void">
      <summary>A <see cref="T:System.Void"></see> type.</summary>
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.EventDefinition" />
    <member name="M:System.Reflection.Metadata.EventDefinition.GetCustomAttributes">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.EventDefinition.GetAccessors">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.EventDefinition.Name">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.EventDefinition.Attributes">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.EventDefinition.Type">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.ExceptionRegion" />
    <member name="P:System.Reflection.Metadata.ExceptionRegion.Kind">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.ExceptionRegion.TryOffset">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.ExceptionRegion.TryLength">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.ExceptionRegion.HandlerOffset">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.ExceptionRegion.HandlerLength">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.ExceptionRegion.FilterOffset">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.ExceptionRegion.CatchType">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.ExceptionRegionKind" />
    <member name="F:System.Reflection.Metadata.ExceptionRegionKind.Catch">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ExceptionRegionKind.Filter">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ExceptionRegionKind.Finally">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ExceptionRegionKind.Fault">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.ExportedType" />
    <member name="M:System.Reflection.Metadata.ExportedType.GetCustomAttributes">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.ExportedType.Attributes">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.ExportedType.IsForwarder">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.ExportedType.Name">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.ExportedType.Namespace">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.ExportedType.NamespaceDefinition">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.ExportedType.Implementation">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.FieldDefinition" />
    <member name="M:System.Reflection.Metadata.FieldDefinition.DecodeSignature``2(System.Reflection.Metadata.ISignatureTypeProvider{``0,``1},``1)">
      <param name="provider">
      </param>
      <param name="genericContext">
      </param>
      <typeparam name="TType">
      </typeparam>
      <typeparam name="TGenericContext">
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.FieldDefinition.GetDeclaringType">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.FieldDefinition.GetDefaultValue">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.FieldDefinition.GetRelativeVirtualAddress">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.FieldDefinition.GetOffset">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.FieldDefinition.GetMarshallingDescriptor">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.FieldDefinition.GetCustomAttributes">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.FieldDefinition.Name">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.FieldDefinition.Attributes">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.FieldDefinition.Signature">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.GenericParameter" />
    <member name="M:System.Reflection.Metadata.GenericParameter.GetConstraints">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.GenericParameter.GetCustomAttributes">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.GenericParameter.Parent">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.GenericParameter.Attributes">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.GenericParameter.Index">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.GenericParameter.Name">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.GenericParameterConstraint" />
    <member name="M:System.Reflection.Metadata.GenericParameterConstraint.GetCustomAttributes">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.GenericParameterConstraint.Parameter">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.GenericParameterConstraint.Type">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.GenericParameterHandleCollection" />
    <member name="T:System.Reflection.Metadata.GenericParameterHandleCollection.Enumerator" />
    <member name="M:System.Reflection.Metadata.GenericParameterHandleCollection.Enumerator.MoveNext">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.GenericParameterHandleCollection.Enumerator.Current">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.GenericParameterHandleCollection.GetEnumerator">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.GenericParameterHandleCollection.Count">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.GenericParameterHandleCollection.Item(System.Int32)">
      <param name="index">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.GenericParameterConstraintHandleCollection" />
    <member name="T:System.Reflection.Metadata.GenericParameterConstraintHandleCollection.Enumerator" />
    <member name="M:System.Reflection.Metadata.GenericParameterConstraintHandleCollection.Enumerator.MoveNext">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.GenericParameterConstraintHandleCollection.Enumerator.Current">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.GenericParameterConstraintHandleCollection.GetEnumerator">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.GenericParameterConstraintHandleCollection.Count">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.GenericParameterConstraintHandleCollection.Item(System.Int32)">
      <param name="index">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.CustomAttributeHandleCollection" />
    <member name="T:System.Reflection.Metadata.CustomAttributeHandleCollection.Enumerator" />
    <member name="M:System.Reflection.Metadata.CustomAttributeHandleCollection.Enumerator.MoveNext">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.CustomAttributeHandleCollection.Enumerator.Current">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.CustomAttributeHandleCollection.GetEnumerator">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.CustomAttributeHandleCollection.Count">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.DeclarativeSecurityAttributeHandleCollection" />
    <member name="T:System.Reflection.Metadata.DeclarativeSecurityAttributeHandleCollection.Enumerator" />
    <member name="M:System.Reflection.Metadata.DeclarativeSecurityAttributeHandleCollection.Enumerator.MoveNext">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.DeclarativeSecurityAttributeHandleCollection.Enumerator.Current">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.DeclarativeSecurityAttributeHandleCollection.GetEnumerator">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.DeclarativeSecurityAttributeHandleCollection.Count">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.MethodDefinitionHandleCollection" />
    <member name="T:System.Reflection.Metadata.MethodDefinitionHandleCollection.Enumerator" />
    <member name="M:System.Reflection.Metadata.MethodDefinitionHandleCollection.Enumerator.MoveNext">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.MethodDefinitionHandleCollection.Enumerator.Current">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MethodDefinitionHandleCollection.GetEnumerator">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.MethodDefinitionHandleCollection.Count">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.FieldDefinitionHandleCollection" />
    <member name="T:System.Reflection.Metadata.FieldDefinitionHandleCollection.Enumerator" />
    <member name="M:System.Reflection.Metadata.FieldDefinitionHandleCollection.Enumerator.MoveNext">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.FieldDefinitionHandleCollection.Enumerator.Current">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.FieldDefinitionHandleCollection.GetEnumerator">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.FieldDefinitionHandleCollection.Count">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.PropertyDefinitionHandleCollection" />
    <member name="T:System.Reflection.Metadata.PropertyDefinitionHandleCollection.Enumerator" />
    <member name="M:System.Reflection.Metadata.PropertyDefinitionHandleCollection.Enumerator.MoveNext">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.PropertyDefinitionHandleCollection.Enumerator.Current">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.PropertyDefinitionHandleCollection.GetEnumerator">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.PropertyDefinitionHandleCollection.Count">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.EventDefinitionHandleCollection" />
    <member name="T:System.Reflection.Metadata.EventDefinitionHandleCollection.Enumerator" />
    <member name="M:System.Reflection.Metadata.EventDefinitionHandleCollection.Enumerator.MoveNext">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.EventDefinitionHandleCollection.Enumerator.Current">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.EventDefinitionHandleCollection.GetEnumerator">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.EventDefinitionHandleCollection.Count">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.MethodImplementationHandleCollection" />
    <member name="T:System.Reflection.Metadata.MethodImplementationHandleCollection.Enumerator" />
    <member name="M:System.Reflection.Metadata.MethodImplementationHandleCollection.Enumerator.MoveNext">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.MethodImplementationHandleCollection.Enumerator.Current">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MethodImplementationHandleCollection.GetEnumerator">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.MethodImplementationHandleCollection.Count">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.ParameterHandleCollection" />
    <member name="T:System.Reflection.Metadata.ParameterHandleCollection.Enumerator" />
    <member name="M:System.Reflection.Metadata.ParameterHandleCollection.Enumerator.MoveNext">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.ParameterHandleCollection.Enumerator.Current">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.ParameterHandleCollection.GetEnumerator">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.ParameterHandleCollection.Count">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.InterfaceImplementationHandleCollection" />
    <member name="T:System.Reflection.Metadata.InterfaceImplementationHandleCollection.Enumerator" />
    <member name="M:System.Reflection.Metadata.InterfaceImplementationHandleCollection.Enumerator.MoveNext">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.InterfaceImplementationHandleCollection.Enumerator.Current">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.InterfaceImplementationHandleCollection.GetEnumerator">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.InterfaceImplementationHandleCollection.Count">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.TypeDefinitionHandleCollection" />
    <member name="T:System.Reflection.Metadata.TypeDefinitionHandleCollection.Enumerator" />
    <member name="M:System.Reflection.Metadata.TypeDefinitionHandleCollection.Enumerator.MoveNext">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.TypeDefinitionHandleCollection.Enumerator.Current">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.TypeDefinitionHandleCollection.GetEnumerator">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.TypeDefinitionHandleCollection.Count">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.TypeReferenceHandleCollection" />
    <member name="T:System.Reflection.Metadata.TypeReferenceHandleCollection.Enumerator" />
    <member name="M:System.Reflection.Metadata.TypeReferenceHandleCollection.Enumerator.MoveNext">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.TypeReferenceHandleCollection.Enumerator.Current">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.TypeReferenceHandleCollection.GetEnumerator">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.TypeReferenceHandleCollection.Count">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.ExportedTypeHandleCollection" />
    <member name="T:System.Reflection.Metadata.ExportedTypeHandleCollection.Enumerator" />
    <member name="M:System.Reflection.Metadata.ExportedTypeHandleCollection.Enumerator.MoveNext">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.ExportedTypeHandleCollection.Enumerator.Current">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.ExportedTypeHandleCollection.GetEnumerator">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.ExportedTypeHandleCollection.Count">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.MemberReferenceHandleCollection" />
    <member name="T:System.Reflection.Metadata.MemberReferenceHandleCollection.Enumerator" />
    <member name="M:System.Reflection.Metadata.MemberReferenceHandleCollection.Enumerator.MoveNext">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.MemberReferenceHandleCollection.Enumerator.Current">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MemberReferenceHandleCollection.GetEnumerator">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.MemberReferenceHandleCollection.Count">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.PropertyAccessors" />
    <member name="P:System.Reflection.Metadata.PropertyAccessors.Getter">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.PropertyAccessors.Setter">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.EventAccessors" />
    <member name="P:System.Reflection.Metadata.EventAccessors.Adder">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.EventAccessors.Remover">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.EventAccessors.Raiser">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.AssemblyReferenceHandleCollection" />
    <member name="T:System.Reflection.Metadata.AssemblyReferenceHandleCollection.Enumerator" />
    <member name="M:System.Reflection.Metadata.AssemblyReferenceHandleCollection.Enumerator.MoveNext">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.AssemblyReferenceHandleCollection.Enumerator.Current">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.AssemblyReferenceHandleCollection.GetEnumerator">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.AssemblyReferenceHandleCollection.Count">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.ManifestResourceHandleCollection" />
    <member name="T:System.Reflection.Metadata.ManifestResourceHandleCollection.Enumerator" />
    <member name="M:System.Reflection.Metadata.ManifestResourceHandleCollection.Enumerator.MoveNext">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.ManifestResourceHandleCollection.Enumerator.Current">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.ManifestResourceHandleCollection.GetEnumerator">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.ManifestResourceHandleCollection.Count">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.AssemblyFileHandleCollection" />
    <member name="T:System.Reflection.Metadata.AssemblyFileHandleCollection.Enumerator" />
    <member name="M:System.Reflection.Metadata.AssemblyFileHandleCollection.Enumerator.MoveNext">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.AssemblyFileHandleCollection.Enumerator.Current">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.AssemblyFileHandleCollection.GetEnumerator">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.AssemblyFileHandleCollection.Count">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.HandleComparer" />
    <member name="M:System.Reflection.Metadata.HandleComparer.Equals(System.Reflection.Metadata.Handle,System.Reflection.Metadata.Handle)">
      <param name="x">
      </param>
      <param name="y">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.HandleComparer.Equals(System.Reflection.Metadata.EntityHandle,System.Reflection.Metadata.EntityHandle)">
      <param name="x">
      </param>
      <param name="y">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.HandleComparer.GetHashCode(System.Reflection.Metadata.Handle)">
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.HandleComparer.GetHashCode(System.Reflection.Metadata.EntityHandle)">
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.HandleComparer.Compare(System.Reflection.Metadata.Handle,System.Reflection.Metadata.Handle)">
      <param name="x">
      </param>
      <param name="y">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.HandleComparer.Compare(System.Reflection.Metadata.EntityHandle,System.Reflection.Metadata.EntityHandle)">
      <param name="x">
      </param>
      <param name="y">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.HandleComparer.Default">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.HandleKind" />
    <member name="F:System.Reflection.Metadata.HandleKind.ModuleDefinition">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.HandleKind.TypeReference">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.HandleKind.TypeDefinition">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.HandleKind.FieldDefinition">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.HandleKind.MethodDefinition">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.HandleKind.Parameter">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.HandleKind.InterfaceImplementation">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.HandleKind.MemberReference">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.HandleKind.Constant">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.HandleKind.CustomAttribute">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.HandleKind.DeclarativeSecurityAttribute">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.HandleKind.StandaloneSignature">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.HandleKind.EventDefinition">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.HandleKind.PropertyDefinition">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.HandleKind.MethodImplementation">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.HandleKind.ModuleReference">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.HandleKind.TypeSpecification">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.HandleKind.AssemblyDefinition">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.HandleKind.AssemblyFile">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.HandleKind.AssemblyReference">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.HandleKind.ExportedType">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.HandleKind.GenericParameter">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.HandleKind.MethodSpecification">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.HandleKind.GenericParameterConstraint">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.HandleKind.ManifestResource">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.HandleKind.Document">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.HandleKind.MethodDebugInformation">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.HandleKind.LocalScope">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.HandleKind.LocalVariable">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.HandleKind.LocalConstant">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.HandleKind.ImportScope">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.HandleKind.CustomDebugInformation">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.HandleKind.NamespaceDefinition">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.HandleKind.UserString">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.HandleKind.String">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.HandleKind.Blob">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.HandleKind.Guid">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.Handle" />
    <member name="F:System.Reflection.Metadata.Handle.ModuleDefinition">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.Handle.AssemblyDefinition">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Handle.Equals(System.Object)">
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Handle.Equals(System.Reflection.Metadata.Handle)">
      <param name="other">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Handle.GetHashCode">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Handle.op_Equality(System.Reflection.Metadata.Handle,System.Reflection.Metadata.Handle)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Handle.op_Inequality(System.Reflection.Metadata.Handle,System.Reflection.Metadata.Handle)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.Handle.Kind">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.Handle.IsNil">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.InterfaceImplementation" />
    <member name="M:System.Reflection.Metadata.InterfaceImplementation.GetCustomAttributes">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.InterfaceImplementation.Interface">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.ManifestResource" />
    <member name="M:System.Reflection.Metadata.ManifestResource.GetCustomAttributes">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.ManifestResource.Offset">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.ManifestResource.Attributes">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.ManifestResource.Name">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.ManifestResource.Implementation">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.MemberReference" />
    <member name="M:System.Reflection.Metadata.MemberReference.DecodeFieldSignature``2(System.Reflection.Metadata.ISignatureTypeProvider{``0,``1},``1)">
      <param name="provider">
      </param>
      <param name="genericContext">
      </param>
      <typeparam name="TType">
      </typeparam>
      <typeparam name="TGenericContext">
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MemberReference.DecodeMethodSignature``2(System.Reflection.Metadata.ISignatureTypeProvider{``0,``1},``1)">
      <param name="provider">
      </param>
      <param name="genericContext">
      </param>
      <typeparam name="TType">
      </typeparam>
      <typeparam name="TGenericContext">
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MemberReference.GetKind">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MemberReference.GetCustomAttributes">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.MemberReference.Parent">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.MemberReference.Name">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.MemberReference.Signature">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.StandaloneSignatureKind">
      <summary>Indicates whether a <see cref="T:System.Reflection.Metadata.StandaloneSignature"></see> represents a standalone method or local variable signature.</summary>
    </member>
    <member name="F:System.Reflection.Metadata.StandaloneSignatureKind.Method">
      <summary>The <see cref="T:System.Reflection.Metadata.StandaloneSignature"></see> represents a standalone method signature.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.StandaloneSignatureKind.LocalVariables">
      <summary>The <see cref="T:System.Reflection.Metadata.MemberReference"></see> references a local variable signature.</summary>
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.MemberReferenceKind">
      <summary>Specifies constants that indicate whether a <see cref="T:System.Reflection.Metadata.MemberReference"></see> references a method or field.</summary>
    </member>
    <member name="F:System.Reflection.Metadata.MemberReferenceKind.Method">
      <summary>The <see cref="T:System.Reflection.Metadata.MemberReference"></see> references a method.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.MemberReferenceKind.Field">
      <summary>The <see cref="T:System.Reflection.Metadata.MemberReference"></see> references a field.</summary>
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.MetadataKind" />
    <member name="F:System.Reflection.Metadata.MetadataKind.Ecma335">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.MetadataKind.WindowsMetadata">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.MetadataKind.ManagedWindowsMetadata">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.MetadataReader" />
    <member name="M:System.Reflection.Metadata.MetadataReader.#ctor(System.Byte*,System.Int32)">
      <param name="metadata">
      </param>
      <param name="length">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.MetadataReader.#ctor(System.Byte*,System.Int32,System.Reflection.Metadata.MetadataReaderOptions)">
      <param name="metadata">
      </param>
      <param name="length">
      </param>
      <param name="options">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.MetadataReader.#ctor(System.Byte*,System.Int32,System.Reflection.Metadata.MetadataReaderOptions,System.Reflection.Metadata.MetadataStringDecoder)">
      <param name="metadata">
      </param>
      <param name="length">
      </param>
      <param name="options">
      </param>
      <param name="utf8Decoder">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.MetadataReader.GetAssemblyDefinition">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MetadataReader.GetString(System.Reflection.Metadata.StringHandle)">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MetadataReader.GetString(System.Reflection.Metadata.NamespaceDefinitionHandle)">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MetadataReader.GetBlobBytes(System.Reflection.Metadata.BlobHandle)">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MetadataReader.GetBlobContent(System.Reflection.Metadata.BlobHandle)">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MetadataReader.GetBlobReader(System.Reflection.Metadata.BlobHandle)">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MetadataReader.GetBlobReader(System.Reflection.Metadata.StringHandle)">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MetadataReader.GetUserString(System.Reflection.Metadata.UserStringHandle)">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MetadataReader.GetGuid(System.Reflection.Metadata.GuidHandle)">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MetadataReader.GetModuleDefinition">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MetadataReader.GetAssemblyReference(System.Reflection.Metadata.AssemblyReferenceHandle)">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MetadataReader.GetTypeDefinition(System.Reflection.Metadata.TypeDefinitionHandle)">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MetadataReader.GetNamespaceDefinitionRoot">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MetadataReader.GetNamespaceDefinition(System.Reflection.Metadata.NamespaceDefinitionHandle)">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MetadataReader.GetTypeReference(System.Reflection.Metadata.TypeReferenceHandle)">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MetadataReader.GetExportedType(System.Reflection.Metadata.ExportedTypeHandle)">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MetadataReader.GetCustomAttributes(System.Reflection.Metadata.EntityHandle)">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MetadataReader.GetCustomAttribute(System.Reflection.Metadata.CustomAttributeHandle)">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MetadataReader.GetDeclarativeSecurityAttribute(System.Reflection.Metadata.DeclarativeSecurityAttributeHandle)">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MetadataReader.GetConstant(System.Reflection.Metadata.ConstantHandle)">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MetadataReader.GetMethodDefinition(System.Reflection.Metadata.MethodDefinitionHandle)">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MetadataReader.GetFieldDefinition(System.Reflection.Metadata.FieldDefinitionHandle)">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MetadataReader.GetPropertyDefinition(System.Reflection.Metadata.PropertyDefinitionHandle)">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MetadataReader.GetEventDefinition(System.Reflection.Metadata.EventDefinitionHandle)">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MetadataReader.GetMethodImplementation(System.Reflection.Metadata.MethodImplementationHandle)">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MetadataReader.GetMemberReference(System.Reflection.Metadata.MemberReferenceHandle)">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MetadataReader.GetMethodSpecification(System.Reflection.Metadata.MethodSpecificationHandle)">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MetadataReader.GetParameter(System.Reflection.Metadata.ParameterHandle)">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MetadataReader.GetGenericParameter(System.Reflection.Metadata.GenericParameterHandle)">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MetadataReader.GetGenericParameterConstraint(System.Reflection.Metadata.GenericParameterConstraintHandle)">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MetadataReader.GetManifestResource(System.Reflection.Metadata.ManifestResourceHandle)">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MetadataReader.GetAssemblyFile(System.Reflection.Metadata.AssemblyFileHandle)">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MetadataReader.GetStandaloneSignature(System.Reflection.Metadata.StandaloneSignatureHandle)">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MetadataReader.GetTypeSpecification(System.Reflection.Metadata.TypeSpecificationHandle)">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MetadataReader.GetModuleReference(System.Reflection.Metadata.ModuleReferenceHandle)">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MetadataReader.GetInterfaceImplementation(System.Reflection.Metadata.InterfaceImplementationHandle)">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MetadataReader.GetString(System.Reflection.Metadata.DocumentNameBlobHandle)">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MetadataReader.GetDocument(System.Reflection.Metadata.DocumentHandle)">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MetadataReader.GetMethodDebugInformation(System.Reflection.Metadata.MethodDebugInformationHandle)">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MetadataReader.GetMethodDebugInformation(System.Reflection.Metadata.MethodDefinitionHandle)">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MetadataReader.GetLocalScope(System.Reflection.Metadata.LocalScopeHandle)">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MetadataReader.GetLocalVariable(System.Reflection.Metadata.LocalVariableHandle)">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MetadataReader.GetLocalConstant(System.Reflection.Metadata.LocalConstantHandle)">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MetadataReader.GetImportScope(System.Reflection.Metadata.ImportScopeHandle)">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MetadataReader.GetCustomDebugInformation(System.Reflection.Metadata.CustomDebugInformationHandle)">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MetadataReader.GetCustomDebugInformation(System.Reflection.Metadata.EntityHandle)">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MetadataReader.GetLocalScopes(System.Reflection.Metadata.MethodDefinitionHandle)">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MetadataReader.GetLocalScopes(System.Reflection.Metadata.MethodDebugInformationHandle)">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.MetadataReader.MetadataPointer">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.MetadataReader.MetadataLength">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.MetadataReader.Options">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.MetadataReader.MetadataVersion">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.MetadataReader.DebugMetadataHeader">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.MetadataReader.MetadataKind">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.MetadataReader.StringComparer">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.MetadataReader.UTF8Decoder">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.MetadataReader.IsAssembly">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.MetadataReader.AssemblyReferences">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.MetadataReader.TypeDefinitions">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.MetadataReader.TypeReferences">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.MetadataReader.CustomAttributes">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.MetadataReader.DeclarativeSecurityAttributes">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.MetadataReader.MemberReferences">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.MetadataReader.ManifestResources">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.MetadataReader.AssemblyFiles">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.MetadataReader.ExportedTypes">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.MetadataReader.MethodDefinitions">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.MetadataReader.FieldDefinitions">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.MetadataReader.EventDefinitions">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.MetadataReader.PropertyDefinitions">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.MetadataReader.Documents">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.MetadataReader.MethodDebugInformation">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.MetadataReader.LocalScopes">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.MetadataReader.LocalVariables">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.MetadataReader.LocalConstants">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.MetadataReader.ImportScopes">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.MetadataReader.CustomDebugInformation">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.MetadataReaderOptions" />
    <member name="F:System.Reflection.Metadata.MetadataReaderOptions.None">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.MetadataReaderOptions.Default">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.MetadataReaderOptions.ApplyWindowsRuntimeProjections">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.MetadataStringComparer" />
    <member name="M:System.Reflection.Metadata.MetadataStringComparer.Equals(System.Reflection.Metadata.StringHandle,System.String)">
      <param name="handle">
      </param>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MetadataStringComparer.Equals(System.Reflection.Metadata.StringHandle,System.String,System.Boolean)">
      <param name="handle">
      </param>
      <param name="value">
      </param>
      <param name="ignoreCase">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MetadataStringComparer.Equals(System.Reflection.Metadata.NamespaceDefinitionHandle,System.String)">
      <param name="handle">
      </param>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MetadataStringComparer.Equals(System.Reflection.Metadata.NamespaceDefinitionHandle,System.String,System.Boolean)">
      <param name="handle">
      </param>
      <param name="value">
      </param>
      <param name="ignoreCase">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MetadataStringComparer.Equals(System.Reflection.Metadata.DocumentNameBlobHandle,System.String)">
      <param name="handle">
      </param>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MetadataStringComparer.Equals(System.Reflection.Metadata.DocumentNameBlobHandle,System.String,System.Boolean)">
      <param name="handle">
      </param>
      <param name="value">
      </param>
      <param name="ignoreCase">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MetadataStringComparer.StartsWith(System.Reflection.Metadata.StringHandle,System.String)">
      <param name="handle">
      </param>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MetadataStringComparer.StartsWith(System.Reflection.Metadata.StringHandle,System.String,System.Boolean)">
      <param name="handle">
      </param>
      <param name="value">
      </param>
      <param name="ignoreCase">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.MetadataStringDecoder" />
    <member name="M:System.Reflection.Metadata.MetadataStringDecoder.#ctor(System.Text.Encoding)">
      <param name="encoding">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.MetadataStringDecoder.GetString(System.Byte*,System.Int32)">
      <param name="bytes">
      </param>
      <param name="byteCount">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.MetadataStringDecoder.Encoding">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.MetadataStringDecoder.DefaultUTF8">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.MethodBodyBlock" />
    <member name="M:System.Reflection.Metadata.MethodBodyBlock.GetILBytes">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MethodBodyBlock.GetILContent">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MethodBodyBlock.GetILReader">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MethodBodyBlock.Create(System.Reflection.Metadata.BlobReader)">
      <param name="reader">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.MethodBodyBlock.Size">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.MethodBodyBlock.MaxStack">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.MethodBodyBlock.LocalVariablesInitialized">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.MethodBodyBlock.LocalSignature">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.MethodBodyBlock.ExceptionRegions">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.MethodDefinition" />
    <member name="M:System.Reflection.Metadata.MethodDefinition.DecodeSignature``2(System.Reflection.Metadata.ISignatureTypeProvider{``0,``1},``1)">
      <param name="provider">
      </param>
      <param name="genericContext">
      </param>
      <typeparam name="TType">
      </typeparam>
      <typeparam name="TGenericContext">
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MethodDefinition.GetDeclaringType">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MethodDefinition.GetParameters">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MethodDefinition.GetGenericParameters">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MethodDefinition.GetImport">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MethodDefinition.GetCustomAttributes">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MethodDefinition.GetDeclarativeSecurityAttributes">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.MethodDefinition.Name">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.MethodDefinition.Signature">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.MethodDefinition.RelativeVirtualAddress">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.MethodDefinition.Attributes">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.MethodDefinition.ImplAttributes">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.MethodImplementation" />
    <member name="M:System.Reflection.Metadata.MethodImplementation.GetCustomAttributes">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.MethodImplementation.Type">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.MethodImplementation.MethodBody">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.MethodImplementation.MethodDeclaration">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.MethodImport" />
    <member name="P:System.Reflection.Metadata.MethodImport.Attributes">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.MethodImport.Name">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.MethodImport.Module">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.MethodSpecification" />
    <member name="M:System.Reflection.Metadata.MethodSpecification.DecodeSignature``2(System.Reflection.Metadata.ISignatureTypeProvider{``0,``1},``1)">
      <param name="provider">
      </param>
      <param name="genericContext">
      </param>
      <typeparam name="TType">
      </typeparam>
      <typeparam name="TGenericContext">
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MethodSpecification.GetCustomAttributes">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.MethodSpecification.Method">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.MethodSpecification.Signature">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.ModuleDefinition" />
    <member name="P:System.Reflection.Metadata.ModuleDefinition.Generation">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.ModuleDefinition.Name">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.ModuleDefinition.Mvid">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.ModuleDefinition.GenerationId">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.ModuleDefinition.BaseGenerationId">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.ModuleReference" />
    <member name="M:System.Reflection.Metadata.ModuleReference.GetCustomAttributes">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.ModuleReference.Name">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.NamespaceDefinition" />
    <member name="P:System.Reflection.Metadata.NamespaceDefinition.Name">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.NamespaceDefinition.Parent">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.NamespaceDefinition.NamespaceDefinitions">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.NamespaceDefinition.TypeDefinitions">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.NamespaceDefinition.ExportedTypes">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.Parameter" />
    <member name="M:System.Reflection.Metadata.Parameter.GetDefaultValue">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Parameter.GetMarshallingDescriptor">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Parameter.GetCustomAttributes">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.Parameter.Attributes">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.Parameter.SequenceNumber">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.Parameter.Name">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.CustomDebugInformation" />
    <member name="P:System.Reflection.Metadata.CustomDebugInformation.Parent">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.CustomDebugInformation.Kind">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.CustomDebugInformation.Value">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.DebugMetadataHeader" />
    <member name="P:System.Reflection.Metadata.DebugMetadataHeader.Id">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.DebugMetadataHeader.EntryPoint">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.Document" />
    <member name="P:System.Reflection.Metadata.Document.Name">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.Document.Language">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.Document.HashAlgorithm">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.Document.Hash">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.DocumentNameBlobHandle" />
    <member name="M:System.Reflection.Metadata.DocumentNameBlobHandle.op_Implicit(System.Reflection.Metadata.DocumentNameBlobHandle)~System.Reflection.Metadata.BlobHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.DocumentNameBlobHandle.op_Explicit(System.Reflection.Metadata.BlobHandle)~System.Reflection.Metadata.DocumentNameBlobHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.DocumentNameBlobHandle.Equals(System.Object)">
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.DocumentNameBlobHandle.Equals(System.Reflection.Metadata.DocumentNameBlobHandle)">
      <param name="other">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.DocumentNameBlobHandle.GetHashCode">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.DocumentNameBlobHandle.op_Equality(System.Reflection.Metadata.DocumentNameBlobHandle,System.Reflection.Metadata.DocumentNameBlobHandle)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.DocumentNameBlobHandle.op_Inequality(System.Reflection.Metadata.DocumentNameBlobHandle,System.Reflection.Metadata.DocumentNameBlobHandle)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.DocumentNameBlobHandle.IsNil">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.DocumentHandleCollection" />
    <member name="T:System.Reflection.Metadata.DocumentHandleCollection.Enumerator" />
    <member name="M:System.Reflection.Metadata.DocumentHandleCollection.Enumerator.MoveNext">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.DocumentHandleCollection.Enumerator.Current">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.DocumentHandleCollection.GetEnumerator">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.DocumentHandleCollection.Count">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.MethodDebugInformationHandleCollection" />
    <member name="T:System.Reflection.Metadata.MethodDebugInformationHandleCollection.Enumerator" />
    <member name="M:System.Reflection.Metadata.MethodDebugInformationHandleCollection.Enumerator.MoveNext">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.MethodDebugInformationHandleCollection.Enumerator.Current">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MethodDebugInformationHandleCollection.GetEnumerator">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.MethodDebugInformationHandleCollection.Count">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.LocalScopeHandleCollection" />
    <member name="T:System.Reflection.Metadata.LocalScopeHandleCollection.Enumerator" />
    <member name="M:System.Reflection.Metadata.LocalScopeHandleCollection.Enumerator.MoveNext">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.LocalScopeHandleCollection.Enumerator.Current">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.LocalScopeHandleCollection.ChildrenEnumerator" />
    <member name="M:System.Reflection.Metadata.LocalScopeHandleCollection.ChildrenEnumerator.MoveNext">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.LocalScopeHandleCollection.ChildrenEnumerator.Current">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.LocalScopeHandleCollection.GetEnumerator">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.LocalScopeHandleCollection.Count">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.LocalVariableHandleCollection" />
    <member name="T:System.Reflection.Metadata.LocalVariableHandleCollection.Enumerator" />
    <member name="M:System.Reflection.Metadata.LocalVariableHandleCollection.Enumerator.MoveNext">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.LocalVariableHandleCollection.Enumerator.Current">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.LocalVariableHandleCollection.GetEnumerator">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.LocalVariableHandleCollection.Count">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.LocalConstantHandleCollection" />
    <member name="T:System.Reflection.Metadata.LocalConstantHandleCollection.Enumerator" />
    <member name="M:System.Reflection.Metadata.LocalConstantHandleCollection.Enumerator.MoveNext">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.LocalConstantHandleCollection.Enumerator.Current">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.LocalConstantHandleCollection.GetEnumerator">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.LocalConstantHandleCollection.Count">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.ImportScopeCollection" />
    <member name="T:System.Reflection.Metadata.ImportScopeCollection.Enumerator" />
    <member name="M:System.Reflection.Metadata.ImportScopeCollection.Enumerator.MoveNext">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.ImportScopeCollection.Enumerator.Current">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.ImportScopeCollection.GetEnumerator">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.ImportScopeCollection.Count">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.CustomDebugInformationHandleCollection" />
    <member name="T:System.Reflection.Metadata.CustomDebugInformationHandleCollection.Enumerator" />
    <member name="M:System.Reflection.Metadata.CustomDebugInformationHandleCollection.Enumerator.MoveNext">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.CustomDebugInformationHandleCollection.Enumerator.Current">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.CustomDebugInformationHandleCollection.GetEnumerator">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.CustomDebugInformationHandleCollection.Count">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.DocumentHandle" />
    <member name="M:System.Reflection.Metadata.DocumentHandle.op_Implicit(System.Reflection.Metadata.DocumentHandle)~System.Reflection.Metadata.Handle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.DocumentHandle.op_Implicit(System.Reflection.Metadata.DocumentHandle)~System.Reflection.Metadata.EntityHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.DocumentHandle.op_Explicit(System.Reflection.Metadata.Handle)~System.Reflection.Metadata.DocumentHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.DocumentHandle.op_Explicit(System.Reflection.Metadata.EntityHandle)~System.Reflection.Metadata.DocumentHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.DocumentHandle.op_Equality(System.Reflection.Metadata.DocumentHandle,System.Reflection.Metadata.DocumentHandle)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.DocumentHandle.Equals(System.Object)">
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.DocumentHandle.Equals(System.Reflection.Metadata.DocumentHandle)">
      <param name="other">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.DocumentHandle.GetHashCode">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.DocumentHandle.op_Inequality(System.Reflection.Metadata.DocumentHandle,System.Reflection.Metadata.DocumentHandle)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.DocumentHandle.IsNil">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.MethodDebugInformationHandle" />
    <member name="M:System.Reflection.Metadata.MethodDebugInformationHandle.op_Implicit(System.Reflection.Metadata.MethodDebugInformationHandle)~System.Reflection.Metadata.Handle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MethodDebugInformationHandle.op_Implicit(System.Reflection.Metadata.MethodDebugInformationHandle)~System.Reflection.Metadata.EntityHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MethodDebugInformationHandle.op_Explicit(System.Reflection.Metadata.Handle)~System.Reflection.Metadata.MethodDebugInformationHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MethodDebugInformationHandle.op_Explicit(System.Reflection.Metadata.EntityHandle)~System.Reflection.Metadata.MethodDebugInformationHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MethodDebugInformationHandle.op_Equality(System.Reflection.Metadata.MethodDebugInformationHandle,System.Reflection.Metadata.MethodDebugInformationHandle)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MethodDebugInformationHandle.Equals(System.Object)">
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MethodDebugInformationHandle.Equals(System.Reflection.Metadata.MethodDebugInformationHandle)">
      <param name="other">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MethodDebugInformationHandle.GetHashCode">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MethodDebugInformationHandle.op_Inequality(System.Reflection.Metadata.MethodDebugInformationHandle,System.Reflection.Metadata.MethodDebugInformationHandle)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MethodDebugInformationHandle.ToDefinitionHandle">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.MethodDebugInformationHandle.IsNil">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.LocalScopeHandle" />
    <member name="M:System.Reflection.Metadata.LocalScopeHandle.op_Implicit(System.Reflection.Metadata.LocalScopeHandle)~System.Reflection.Metadata.Handle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.LocalScopeHandle.op_Implicit(System.Reflection.Metadata.LocalScopeHandle)~System.Reflection.Metadata.EntityHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.LocalScopeHandle.op_Explicit(System.Reflection.Metadata.Handle)~System.Reflection.Metadata.LocalScopeHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.LocalScopeHandle.op_Explicit(System.Reflection.Metadata.EntityHandle)~System.Reflection.Metadata.LocalScopeHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.LocalScopeHandle.op_Equality(System.Reflection.Metadata.LocalScopeHandle,System.Reflection.Metadata.LocalScopeHandle)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.LocalScopeHandle.Equals(System.Object)">
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.LocalScopeHandle.Equals(System.Reflection.Metadata.LocalScopeHandle)">
      <param name="other">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.LocalScopeHandle.GetHashCode">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.LocalScopeHandle.op_Inequality(System.Reflection.Metadata.LocalScopeHandle,System.Reflection.Metadata.LocalScopeHandle)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.LocalScopeHandle.IsNil">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.LocalVariableHandle" />
    <member name="M:System.Reflection.Metadata.LocalVariableHandle.op_Implicit(System.Reflection.Metadata.LocalVariableHandle)~System.Reflection.Metadata.Handle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.LocalVariableHandle.op_Implicit(System.Reflection.Metadata.LocalVariableHandle)~System.Reflection.Metadata.EntityHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.LocalVariableHandle.op_Explicit(System.Reflection.Metadata.Handle)~System.Reflection.Metadata.LocalVariableHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.LocalVariableHandle.op_Explicit(System.Reflection.Metadata.EntityHandle)~System.Reflection.Metadata.LocalVariableHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.LocalVariableHandle.op_Equality(System.Reflection.Metadata.LocalVariableHandle,System.Reflection.Metadata.LocalVariableHandle)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.LocalVariableHandle.Equals(System.Object)">
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.LocalVariableHandle.Equals(System.Reflection.Metadata.LocalVariableHandle)">
      <param name="other">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.LocalVariableHandle.GetHashCode">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.LocalVariableHandle.op_Inequality(System.Reflection.Metadata.LocalVariableHandle,System.Reflection.Metadata.LocalVariableHandle)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.LocalVariableHandle.IsNil">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.LocalConstantHandle" />
    <member name="M:System.Reflection.Metadata.LocalConstantHandle.op_Implicit(System.Reflection.Metadata.LocalConstantHandle)~System.Reflection.Metadata.Handle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.LocalConstantHandle.op_Implicit(System.Reflection.Metadata.LocalConstantHandle)~System.Reflection.Metadata.EntityHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.LocalConstantHandle.op_Explicit(System.Reflection.Metadata.Handle)~System.Reflection.Metadata.LocalConstantHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.LocalConstantHandle.op_Explicit(System.Reflection.Metadata.EntityHandle)~System.Reflection.Metadata.LocalConstantHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.LocalConstantHandle.op_Equality(System.Reflection.Metadata.LocalConstantHandle,System.Reflection.Metadata.LocalConstantHandle)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.LocalConstantHandle.Equals(System.Object)">
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.LocalConstantHandle.Equals(System.Reflection.Metadata.LocalConstantHandle)">
      <param name="other">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.LocalConstantHandle.GetHashCode">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.LocalConstantHandle.op_Inequality(System.Reflection.Metadata.LocalConstantHandle,System.Reflection.Metadata.LocalConstantHandle)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.LocalConstantHandle.IsNil">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.ImportScopeHandle" />
    <member name="M:System.Reflection.Metadata.ImportScopeHandle.op_Implicit(System.Reflection.Metadata.ImportScopeHandle)~System.Reflection.Metadata.Handle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.ImportScopeHandle.op_Implicit(System.Reflection.Metadata.ImportScopeHandle)~System.Reflection.Metadata.EntityHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.ImportScopeHandle.op_Explicit(System.Reflection.Metadata.Handle)~System.Reflection.Metadata.ImportScopeHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.ImportScopeHandle.op_Explicit(System.Reflection.Metadata.EntityHandle)~System.Reflection.Metadata.ImportScopeHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.ImportScopeHandle.op_Equality(System.Reflection.Metadata.ImportScopeHandle,System.Reflection.Metadata.ImportScopeHandle)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.ImportScopeHandle.Equals(System.Object)">
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.ImportScopeHandle.Equals(System.Reflection.Metadata.ImportScopeHandle)">
      <param name="other">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.ImportScopeHandle.GetHashCode">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.ImportScopeHandle.op_Inequality(System.Reflection.Metadata.ImportScopeHandle,System.Reflection.Metadata.ImportScopeHandle)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.ImportScopeHandle.IsNil">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.CustomDebugInformationHandle" />
    <member name="M:System.Reflection.Metadata.CustomDebugInformationHandle.op_Implicit(System.Reflection.Metadata.CustomDebugInformationHandle)~System.Reflection.Metadata.Handle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.CustomDebugInformationHandle.op_Implicit(System.Reflection.Metadata.CustomDebugInformationHandle)~System.Reflection.Metadata.EntityHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.CustomDebugInformationHandle.op_Explicit(System.Reflection.Metadata.Handle)~System.Reflection.Metadata.CustomDebugInformationHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.CustomDebugInformationHandle.op_Explicit(System.Reflection.Metadata.EntityHandle)~System.Reflection.Metadata.CustomDebugInformationHandle">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.CustomDebugInformationHandle.op_Equality(System.Reflection.Metadata.CustomDebugInformationHandle,System.Reflection.Metadata.CustomDebugInformationHandle)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.CustomDebugInformationHandle.Equals(System.Object)">
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.CustomDebugInformationHandle.Equals(System.Reflection.Metadata.CustomDebugInformationHandle)">
      <param name="other">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.CustomDebugInformationHandle.GetHashCode">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.CustomDebugInformationHandle.op_Inequality(System.Reflection.Metadata.CustomDebugInformationHandle,System.Reflection.Metadata.CustomDebugInformationHandle)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.CustomDebugInformationHandle.IsNil">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.ImportDefinition" />
    <member name="P:System.Reflection.Metadata.ImportDefinition.Kind">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.ImportDefinition.Alias">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.ImportDefinition.TargetAssembly">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.ImportDefinition.TargetNamespace">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.ImportDefinition.TargetType">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.ImportDefinitionKind" />
    <member name="F:System.Reflection.Metadata.ImportDefinitionKind.ImportNamespace">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ImportDefinitionKind.ImportAssemblyNamespace">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ImportDefinitionKind.ImportType">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ImportDefinitionKind.ImportXmlNamespace">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ImportDefinitionKind.ImportAssemblyReferenceAlias">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ImportDefinitionKind.AliasAssemblyReference">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ImportDefinitionKind.AliasNamespace">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ImportDefinitionKind.AliasAssemblyNamespace">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.ImportDefinitionKind.AliasType">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.ImportDefinitionCollection" />
    <member name="T:System.Reflection.Metadata.ImportDefinitionCollection.Enumerator" />
    <member name="M:System.Reflection.Metadata.ImportDefinitionCollection.Enumerator.MoveNext">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.ImportDefinitionCollection.Enumerator.Reset" />
    <member name="P:System.Reflection.Metadata.ImportDefinitionCollection.Enumerator.Current">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.ImportDefinitionCollection.GetEnumerator">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.LocalConstant" />
    <member name="P:System.Reflection.Metadata.LocalConstant.Name">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.LocalConstant.Signature">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.ImportScope" />
    <member name="M:System.Reflection.Metadata.ImportScope.GetImports">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.ImportScope.Parent">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.ImportScope.ImportsBlob">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.LocalScope" />
    <member name="M:System.Reflection.Metadata.LocalScope.GetLocalVariables">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.LocalScope.GetLocalConstants">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.LocalScope.GetChildren">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.LocalScope.Method">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.LocalScope.ImportScope">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.LocalScope.StartOffset">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.LocalScope.Length">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.LocalScope.EndOffset">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.LocalVariable" />
    <member name="P:System.Reflection.Metadata.LocalVariable.Attributes">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.LocalVariable.Index">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.LocalVariable.Name">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.LocalVariableAttributes" />
    <member name="F:System.Reflection.Metadata.LocalVariableAttributes.None">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.LocalVariableAttributes.DebuggerHidden">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.MethodDebugInformation" />
    <member name="M:System.Reflection.Metadata.MethodDebugInformation.GetSequencePoints">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.MethodDebugInformation.GetStateMachineKickoffMethod">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.MethodDebugInformation.SequencePointsBlob">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.MethodDebugInformation.Document">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.MethodDebugInformation.LocalSignature">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.SequencePoint" />
    <member name="F:System.Reflection.Metadata.SequencePoint.HiddenLine">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.SequencePoint.GetHashCode">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.SequencePoint.Equals(System.Object)">
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.SequencePoint.Equals(System.Reflection.Metadata.SequencePoint)">
      <param name="other">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.SequencePoint.Document">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.SequencePoint.Offset">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.SequencePoint.StartLine">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.SequencePoint.EndLine">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.SequencePoint.StartColumn">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.SequencePoint.EndColumn">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.SequencePoint.IsHidden">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.SequencePointCollection" />
    <member name="T:System.Reflection.Metadata.SequencePointCollection.Enumerator" />
    <member name="M:System.Reflection.Metadata.SequencePointCollection.Enumerator.MoveNext">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.SequencePointCollection.Enumerator.Reset" />
    <member name="P:System.Reflection.Metadata.SequencePointCollection.Enumerator.Current">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.SequencePointCollection.GetEnumerator">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.PEReaderExtensions" />
    <member name="M:System.Reflection.Metadata.PEReaderExtensions.GetMethodBody(System.Reflection.PortableExecutable.PEReader,System.Int32)">
      <param name="peReader">
      </param>
      <param name="relativeVirtualAddress">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.PEReaderExtensions.GetMetadataReader(System.Reflection.PortableExecutable.PEReader)">
      <param name="peReader">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.PEReaderExtensions.GetMetadataReader(System.Reflection.PortableExecutable.PEReader,System.Reflection.Metadata.MetadataReaderOptions)">
      <param name="peReader">
      </param>
      <param name="options">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.PEReaderExtensions.GetMetadataReader(System.Reflection.PortableExecutable.PEReader,System.Reflection.Metadata.MetadataReaderOptions,System.Reflection.Metadata.MetadataStringDecoder)">
      <param name="peReader">
      </param>
      <param name="options">
      </param>
      <param name="utf8Decoder">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.PropertyDefinition" />
    <member name="M:System.Reflection.Metadata.PropertyDefinition.DecodeSignature``2(System.Reflection.Metadata.ISignatureTypeProvider{``0,``1},``1)">
      <param name="provider">
      </param>
      <param name="genericContext">
      </param>
      <typeparam name="TType">
      </typeparam>
      <typeparam name="TGenericContext">
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.PropertyDefinition.GetDefaultValue">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.PropertyDefinition.GetCustomAttributes">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.PropertyDefinition.GetAccessors">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.PropertyDefinition.Name">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.PropertyDefinition.Attributes">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.PropertyDefinition.Signature">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.SerializationTypeCode">
      <summary>Specifies type codes used to encode the types of values in a <see cref="T:System.Reflection.Metadata.CustomAttributeValue`1"></see> blob.</summary>
    </member>
    <member name="F:System.Reflection.Metadata.SerializationTypeCode.Invalid">
      <summary>A value equivalent to <see cref="SignatureTypeCode.Invalid"></see>.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.SerializationTypeCode.Boolean">
      <summary>A value equivalent to <see cref="SignatureTypeCode.Boolean"></see>.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.SerializationTypeCode.Char">
      <summary>A value equivalent to <see cref="SignatureTypeCode.Char"></see>.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.SerializationTypeCode.SByte">
      <summary>A value equivalent to <see cref="SignatureTypeCode.SByte"></see>.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.SerializationTypeCode.Byte">
      <summary>A value equivalent to <see cref="SignatureTypeCode.Byte"></see>.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.SerializationTypeCode.Int16">
      <summary>A value equivalent to <see cref="SignatureTypeCode.Int16"></see>.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.SerializationTypeCode.UInt16">
      <summary>A value equivalent to <see cref="SignatureTypeCode.UInt16"></see>.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.SerializationTypeCode.Int32">
      <summary>A value equivalent to <see cref="SignatureTypeCode.Int32"></see>.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.SerializationTypeCode.UInt32">
      <summary>A value equivalent to <see cref="SignatureTypeCode.UInt32"></see>.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.SerializationTypeCode.Int64">
      <summary>A value equivalent to <see cref="SignatureTypeCode.Int64"></see>.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.SerializationTypeCode.UInt64">
      <summary>A value equivalent to <see cref="SignatureTypeCode.UInt64"></see>.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.SerializationTypeCode.Single">
      <summary>A value equivalent to <see cref="SignatureTypeCode.Single"></see>.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.SerializationTypeCode.Double">
      <summary>A value equivalent to <see cref="SignatureTypeCode.Double"></see>.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.SerializationTypeCode.String">
      <summary>A value equivalent to <see cref="SignatureTypeCode.String"></see>.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.SerializationTypeCode.SZArray">
      <summary>A value equivalent to <see cref="SignatureTypeCode.SZArray"></see>.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.SerializationTypeCode.Type">
      <summary>The attribute argument is a <see cref="T:System.Type"></see> instance.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.SerializationTypeCode.TaggedObject">
      <summary>The attribute argument is &amp;quot;boxed&amp;quot; (passed to a parameter, field, or property of type object) and carries type information in the attribute blob.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.SerializationTypeCode.Enum">
      <summary>The attribute argument is an Enum instance.</summary>
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.SignatureAttributes">
      <summary>Specifies additional flags that can be applied to method signatures. The underlying values of the fields in this type correspond to the representation in the leading signature byte represented by a <see cref="T:System.Reflection.Metadata.SignatureHeader"></see> structure.</summary>
    </member>
    <member name="F:System.Reflection.Metadata.SignatureAttributes.None">
      <summary>No flags.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.SignatureAttributes.Generic">
      <summary>A generic method.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.SignatureAttributes.Instance">
      <summary>An instance method.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.SignatureAttributes.ExplicitThis">
      <summary>Indicates the first explicitly declared parameter that represents the instance pointer.</summary>
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.SignatureCallingConvention">
      <summary>Specifies how arguments in a given signature are passed from the caller to the callee. The underlying values of the fields in this type correspond to the representation in the leading signature byte represented by a <see cref="T:System.Reflection.Metadata.SignatureHeader"></see> structure.</summary>
    </member>
    <member name="F:System.Reflection.Metadata.SignatureCallingConvention.Default">
      <summary>A managed calling convention with a fixed-length argument list.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.SignatureCallingConvention.CDecl">
      <summary>An unmanaged C/C++ style calling convention where the call stack is cleaned by the caller.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.SignatureCallingConvention.StdCall">
      <summary>An unmanaged calling convention where the call stack is cleaned up by the callee.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.SignatureCallingConvention.ThisCall">
      <summary>An unmanaged C++ style calling convention for calling instance member functions with a fixed argument list.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.SignatureCallingConvention.FastCall">
      <summary>An unmanaged calling convention where arguments are passed in registers when possible.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.SignatureCallingConvention.VarArgs">
      <summary>A managed calling convention for passing extra arguments.</summary>
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.SignatureHeader">
      <summary>Represents the signature characteristics specified by the leading byte of signature blobs.</summary>
    </member>
    <member name="F:System.Reflection.Metadata.SignatureHeader.CallingConventionOrKindMask">
      <summary>Gets the mask value for the calling convention or signature kind. The default <see cref="F:System.Reflection.Metadata.SignatureHeader.CallingConventionOrKindMask"></see> value is 15 (0x0F).</summary>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.SignatureHeader.#ctor(System.Byte)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.Metadata.SignatureHeader"></see> structure using the specified byte value.</summary>
      <param name="rawValue">The byte.</param>
    </member>
    <member name="M:System.Reflection.Metadata.SignatureHeader.#ctor(System.Reflection.Metadata.SignatureKind,System.Reflection.Metadata.SignatureCallingConvention,System.Reflection.Metadata.SignatureAttributes)">
      <summary>Initializes a new instance of the <see cref="T:System.Reflection.Metadata.SignatureHeader"></see> structure using the specified signature kind, calling convention and signature attributes.</summary>
      <param name="kind">The signature kind.</param>
      <param name="convention">The calling convention.</param>
      <param name="attributes">The signature attributes.</param>
    </member>
    <member name="M:System.Reflection.Metadata.SignatureHeader.Equals(System.Object)">
      <summary>Compares the specified object with this <see cref="T:System.Reflection.Metadata.SignatureHeader"></see> for equality.</summary>
      <param name="obj">The object to compare.</param>
      <returns>true if the objects are equal; otherwise, false.</returns>
    </member>
    <member name="M:System.Reflection.Metadata.SignatureHeader.Equals(System.Reflection.Metadata.SignatureHeader)">
      <summary>Compares two <see cref="T:System.Reflection.Metadata.SignatureHeader"></see> values for equality.</summary>
      <param name="other">The value to compare.</param>
      <returns>true if the values are equal; otherwise, false.</returns>
    </member>
    <member name="M:System.Reflection.Metadata.SignatureHeader.GetHashCode">
      <summary>Gets a hash code for the current object.</summary>
      <returns>A hash code for the current object.</returns>
    </member>
    <member name="M:System.Reflection.Metadata.SignatureHeader.op_Equality(System.Reflection.Metadata.SignatureHeader,System.Reflection.Metadata.SignatureHeader)">
      <summary>Compares two <see cref="T:System.Reflection.Metadata.SignatureHeader"></see> values for equality.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>true if the values are equal; otherwise, false.</returns>
    </member>
    <member name="M:System.Reflection.Metadata.SignatureHeader.op_Inequality(System.Reflection.Metadata.SignatureHeader,System.Reflection.Metadata.SignatureHeader)">
      <summary>Determines whether two <see cref="T:System.Reflection.Metadata.SignatureHeader"></see> values are unequal.</summary>
      <param name="left">The first value to compare.</param>
      <param name="right">The second value to compare.</param>
      <returns>true if the values are unequal; otherwise, false.</returns>
    </member>
    <member name="M:System.Reflection.Metadata.SignatureHeader.ToString">
      <summary>Returns a string that represents the current object.</summary>
      <returns>A string that represents the current object.</returns>
    </member>
    <member name="P:System.Reflection.Metadata.SignatureHeader.RawValue">
      <summary>Gets the raw value of the header byte.</summary>
      <returns>The raw value of the header byte.</returns>
    </member>
    <member name="P:System.Reflection.Metadata.SignatureHeader.CallingConvention">
      <summary>Gets the calling convention.</summary>
      <returns>The calling convention.</returns>
    </member>
    <member name="P:System.Reflection.Metadata.SignatureHeader.Kind">
      <summary>Gets the signature kind.</summary>
      <returns>The signature kind.</returns>
    </member>
    <member name="P:System.Reflection.Metadata.SignatureHeader.Attributes">
      <summary>Gets the signature attributes.</summary>
      <returns>The attributes.</returns>
    </member>
    <member name="P:System.Reflection.Metadata.SignatureHeader.HasExplicitThis">
      <summary>Gets a value that indicates whether this <see cref="T:System.Reflection.Metadata.SignatureHeader"></see> structure has the <see cref="F:System.Reflection.Metadata.SignatureAttributes.ExplicitThis"></see> signature attribute.</summary>
      <returns>true if the <see cref="System.Reflection.Metadata.SignatureAttributes.ExplicitThis"></see> attribute is present; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.Metadata.SignatureHeader.IsInstance">
      <summary>Gets a value that indicates whether this <see cref="T:System.Reflection.Metadata.SignatureHeader"></see> structure has the <see cref="F:System.Reflection.Metadata.SignatureAttributes.Instance"></see> signature attribute.</summary>
      <returns>true if the <see cref="System.Reflection.Metadata.SignatureAttributes.Instance"></see> attribute is present; otherwise, false.</returns>
    </member>
    <member name="P:System.Reflection.Metadata.SignatureHeader.IsGeneric">
      <summary>Gets a value that indicates whether this <see cref="T:System.Reflection.Metadata.SignatureHeader"></see> structure has the <see cref="F:System.Reflection.Metadata.SignatureAttributes.Generic"></see> signature attribute.</summary>
      <returns>true if the <see cref="System.Reflection.Metadata.SignatureAttributes.Generic"></see> attribute is present; otherwise, false.</returns>
    </member>
    <member name="T:System.Reflection.Metadata.SignatureKind">
      <summary>Specifies the signature kind. The underlying values of the fields in this type correspond to the representation in the leading signature byte represented by a <see cref="T:System.Reflection.Metadata.SignatureHeader"></see> structure.</summary>
    </member>
    <member name="F:System.Reflection.Metadata.SignatureKind.Method">
      <summary>A method reference, method definition, or standalone method signature.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.SignatureKind.Field">
      <summary>A field signature.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.SignatureKind.LocalVariables">
      <summary>A local variables signature.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.SignatureKind.Property">
      <summary>A property signature.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.SignatureKind.MethodSpecification">
      <summary>A method specification signature.</summary>
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.SignatureTypeCode">
      <summary>Specifies constants that define type codes used in signature encoding.</summary>
    </member>
    <member name="F:System.Reflection.Metadata.SignatureTypeCode.Invalid">
      <summary>Represents an invalid or uninitialized type code. It will not appear in valid signatures.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.SignatureTypeCode.Void">
      <summary>Represents <see cref="T:System.Void"></see> in signatures.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.SignatureTypeCode.Boolean">
      <summary>Represents a <see cref="T:System.Boolean"></see> in signatures.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.SignatureTypeCode.Char">
      <summary>Represents a <see cref="T:System.Char"></see> in signatures.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.SignatureTypeCode.SByte">
      <summary>Represents an <see cref="T:System.SByte"></see> in signatures.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.SignatureTypeCode.Byte">
      <summary>Represents a <see cref="T:System.Byte"></see> in signatures.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.SignatureTypeCode.Int16">
      <summary>Represents an <see cref="T:System.Int16"></see> in signatures.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.SignatureTypeCode.UInt16">
      <summary>Represents a <see cref="T:System.UInt16"></see> in signatures.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.SignatureTypeCode.Int32">
      <summary>Represents an <see cref="T:System.Int32"></see> in signatures.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.SignatureTypeCode.UInt32">
      <summary>Represents a <see cref="T:System.UInt32"></see> in signatures.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.SignatureTypeCode.Int64">
      <summary>Represents an <see cref="T:System.Int64"></see> in signatures.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.SignatureTypeCode.UInt64">
      <summary>Represents a <see cref="T:System.UInt64"></see> in signatures.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.SignatureTypeCode.Single">
      <summary>Represents a <see cref="T:System.Single"></see> in signatures.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.SignatureTypeCode.Double">
      <summary>Represents a <see cref="T:System.Double"></see> in signatures.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.SignatureTypeCode.String">
      <summary>Represents a <see cref="T:System.String"></see> in signatures.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.SignatureTypeCode.Pointer">
      <summary>Represents an unmanaged pointer in signatures. It is followed in the blob by the signature encoding of the underlying type.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.SignatureTypeCode.ByReference">
      <summary>Represents managed pointers (byref return values and parameters) in signatures. It is followed in the blob by the signature encoding of the underlying type.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.SignatureTypeCode.GenericTypeParameter">
      <summary>Represents a generic type parameter used within a signature.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.SignatureTypeCode.Array">
      <summary>Represents a generalized <see cref="T:System.Array"></see> in signatures.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.SignatureTypeCode.GenericTypeInstance">
      <summary>Represents the instantiation of a generic type in signatures.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.SignatureTypeCode.TypedReference">
      <summary>Represents a typed reference in signatures.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.SignatureTypeCode.IntPtr">
      <summary>Represents an <see cref="T:System.IntPtr"></see> in signatures.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.SignatureTypeCode.UIntPtr">
      <summary>Represents a <see cref="T:System.UIntPtr"></see> in signatures.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.SignatureTypeCode.FunctionPointer">
      <summary>Represents function pointer types in signatures.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.SignatureTypeCode.Object">
      <summary>Represents an <see cref="T:System.Object"></see> in signatures.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.SignatureTypeCode.SZArray">
      <summary>Represents a single dimensional <see cref="T:System.Array"></see> with a lower bound of 0.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.SignatureTypeCode.GenericMethodParameter">
      <summary>Represents a generic method parameter used within a signature.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.SignatureTypeCode.RequiredModifier">
      <summary>Represents a custom modifier applied to a type within a signature that the caller must understand.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.SignatureTypeCode.OptionalModifier">
      <summary>Represents a custom modifier applied to a type within a signature that the caller can ignore.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.SignatureTypeCode.TypeHandle">
      <summary>Precedes a type <see cref="EntityHandle"></see> in signatures.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.SignatureTypeCode.Sentinel">
      <summary>Represents a marker to indicate the end of fixed arguments and the beginning of variable arguments.</summary>
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.SignatureTypeCode.Pinned">
      <summary>Represents a local variable that is pinned by garbage collector.</summary>
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.StandaloneSignature" />
    <member name="M:System.Reflection.Metadata.StandaloneSignature.DecodeMethodSignature``2(System.Reflection.Metadata.ISignatureTypeProvider{``0,``1},``1)">
      <param name="provider">
      </param>
      <param name="genericContext">
      </param>
      <typeparam name="TType">
      </typeparam>
      <typeparam name="TGenericContext">
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.StandaloneSignature.DecodeLocalSignature``2(System.Reflection.Metadata.ISignatureTypeProvider{``0,``1},``1)">
      <param name="provider">
      </param>
      <param name="genericContext">
      </param>
      <typeparam name="TType">
      </typeparam>
      <typeparam name="TGenericContext">
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.StandaloneSignature.GetCustomAttributes">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.StandaloneSignature.GetKind">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.StandaloneSignature.Signature">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.TypeDefinition" />
    <member name="M:System.Reflection.Metadata.TypeDefinition.GetLayout">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.TypeDefinition.GetDeclaringType">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.TypeDefinition.GetGenericParameters">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.TypeDefinition.GetMethods">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.TypeDefinition.GetFields">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.TypeDefinition.GetProperties">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.TypeDefinition.GetEvents">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.TypeDefinition.GetNestedTypes">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.TypeDefinition.GetMethodImplementations">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.TypeDefinition.GetInterfaceImplementations">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.TypeDefinition.GetCustomAttributes">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.TypeDefinition.GetDeclarativeSecurityAttributes">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.TypeDefinition.Attributes">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.TypeDefinition.Name">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.TypeDefinition.Namespace">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.TypeDefinition.NamespaceDefinition">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.TypeDefinition.BaseType">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.TypeLayout" />
    <member name="M:System.Reflection.Metadata.TypeLayout.#ctor(System.Int32,System.Int32)">
      <param name="size">
      </param>
      <param name="packingSize">
      </param>
    </member>
    <member name="P:System.Reflection.Metadata.TypeLayout.Size">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.TypeLayout.PackingSize">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.TypeLayout.IsDefault">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.TypeReference" />
    <member name="P:System.Reflection.Metadata.TypeReference.ResolutionScope">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.TypeReference.Name">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.TypeReference.Namespace">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.TypeSpecification" />
    <member name="M:System.Reflection.Metadata.TypeSpecification.DecodeSignature``2(System.Reflection.Metadata.ISignatureTypeProvider{``0,``1},``1)">
      <param name="provider">
      </param>
      <param name="genericContext">
      </param>
      <typeparam name="TType">
      </typeparam>
      <typeparam name="TGenericContext">
      </typeparam>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.TypeSpecification.GetCustomAttributes">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.TypeSpecification.Signature">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.Ecma335.FunctionPointerAttributes" />
    <member name="F:System.Reflection.Metadata.Ecma335.FunctionPointerAttributes.None">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.Ecma335.FunctionPointerAttributes.HasThis">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.Ecma335.FunctionPointerAttributes.HasExplicitThis">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.Ecma335.MethodBodyStreamEncoder" />
    <member name="T:System.Reflection.Metadata.Ecma335.MethodBodyStreamEncoder.MethodBody" />
    <member name="P:System.Reflection.Metadata.Ecma335.MethodBodyStreamEncoder.MethodBody.Offset">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.Ecma335.MethodBodyStreamEncoder.MethodBody.Instructions">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.Ecma335.MethodBodyStreamEncoder.MethodBody.ExceptionRegions">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MethodBodyStreamEncoder.#ctor(System.Reflection.Metadata.BlobBuilder)">
      <param name="builder">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MethodBodyStreamEncoder.AddMethodBody(System.Int32,System.Int32,System.Int32,System.Boolean,System.Reflection.Metadata.StandaloneSignatureHandle,System.Reflection.Metadata.Ecma335.MethodBodyAttributes)">
      <param name="codeSize">
      </param>
      <param name="maxStack">
      </param>
      <param name="exceptionRegionCount">
      </param>
      <param name="hasSmallExceptionRegions">
      </param>
      <param name="localVariablesSignature">
      </param>
      <param name="attributes">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MethodBodyStreamEncoder.AddMethodBody(System.Reflection.Metadata.Ecma335.InstructionEncoder,System.Int32,System.Reflection.Metadata.StandaloneSignatureHandle,System.Reflection.Metadata.Ecma335.MethodBodyAttributes)">
      <param name="instructionEncoder">
      </param>
      <param name="maxStack">
      </param>
      <param name="localVariablesSignature">
      </param>
      <param name="attributes">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.Ecma335.MethodBodyStreamEncoder.Builder">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.Ecma335.MethodBodyAttributes" />
    <member name="F:System.Reflection.Metadata.Ecma335.MethodBodyAttributes.None">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.Ecma335.MethodBodyAttributes.InitLocals">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.Ecma335.MetadataBuilder" />
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataBuilder.SetCapacity(System.Reflection.Metadata.Ecma335.TableIndex,System.Int32)">
      <param name="table">
      </param>
      <param name="rowCount">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataBuilder.GetRowCount(System.Reflection.Metadata.Ecma335.TableIndex)">
      <param name="table">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataBuilder.GetRowCounts">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataBuilder.AddModule(System.Int32,System.Reflection.Metadata.StringHandle,System.Reflection.Metadata.GuidHandle,System.Reflection.Metadata.GuidHandle,System.Reflection.Metadata.GuidHandle)">
      <param name="generation">
      </param>
      <param name="moduleName">
      </param>
      <param name="mvid">
      </param>
      <param name="encId">
      </param>
      <param name="encBaseId">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataBuilder.AddAssembly(System.Reflection.Metadata.StringHandle,System.Version,System.Reflection.Metadata.StringHandle,System.Reflection.Metadata.BlobHandle,System.Reflection.AssemblyFlags,System.Reflection.AssemblyHashAlgorithm)">
      <param name="name">
      </param>
      <param name="version">
      </param>
      <param name="culture">
      </param>
      <param name="publicKey">
      </param>
      <param name="flags">
      </param>
      <param name="hashAlgorithm">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataBuilder.AddAssemblyReference(System.Reflection.Metadata.StringHandle,System.Version,System.Reflection.Metadata.StringHandle,System.Reflection.Metadata.BlobHandle,System.Reflection.AssemblyFlags,System.Reflection.Metadata.BlobHandle)">
      <param name="name">
      </param>
      <param name="version">
      </param>
      <param name="culture">
      </param>
      <param name="publicKeyOrToken">
      </param>
      <param name="flags">
      </param>
      <param name="hashValue">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataBuilder.AddTypeDefinition(System.Reflection.TypeAttributes,System.Reflection.Metadata.StringHandle,System.Reflection.Metadata.StringHandle,System.Reflection.Metadata.EntityHandle,System.Reflection.Metadata.FieldDefinitionHandle,System.Reflection.Metadata.MethodDefinitionHandle)">
      <param name="attributes">
      </param>
      <param name="namespace">
      </param>
      <param name="name">
      </param>
      <param name="baseType">
      </param>
      <param name="fieldList">
      </param>
      <param name="methodList">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataBuilder.AddTypeLayout(System.Reflection.Metadata.TypeDefinitionHandle,System.UInt16,System.UInt32)">
      <param name="type">
      </param>
      <param name="packingSize">
      </param>
      <param name="size">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataBuilder.AddInterfaceImplementation(System.Reflection.Metadata.TypeDefinitionHandle,System.Reflection.Metadata.EntityHandle)">
      <param name="type">
      </param>
      <param name="implementedInterface">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataBuilder.AddNestedType(System.Reflection.Metadata.TypeDefinitionHandle,System.Reflection.Metadata.TypeDefinitionHandle)">
      <param name="type">
      </param>
      <param name="enclosingType">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataBuilder.AddTypeReference(System.Reflection.Metadata.EntityHandle,System.Reflection.Metadata.StringHandle,System.Reflection.Metadata.StringHandle)">
      <param name="resolutionScope">
      </param>
      <param name="namespace">
      </param>
      <param name="name">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataBuilder.AddTypeSpecification(System.Reflection.Metadata.BlobHandle)">
      <param name="signature">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataBuilder.AddStandaloneSignature(System.Reflection.Metadata.BlobHandle)">
      <param name="signature">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataBuilder.AddProperty(System.Reflection.PropertyAttributes,System.Reflection.Metadata.StringHandle,System.Reflection.Metadata.BlobHandle)">
      <param name="attributes">
      </param>
      <param name="name">
      </param>
      <param name="signature">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataBuilder.AddPropertyMap(System.Reflection.Metadata.TypeDefinitionHandle,System.Reflection.Metadata.PropertyDefinitionHandle)">
      <param name="declaringType">
      </param>
      <param name="propertyList">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataBuilder.AddEvent(System.Reflection.EventAttributes,System.Reflection.Metadata.StringHandle,System.Reflection.Metadata.EntityHandle)">
      <param name="attributes">
      </param>
      <param name="name">
      </param>
      <param name="type">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataBuilder.AddEventMap(System.Reflection.Metadata.TypeDefinitionHandle,System.Reflection.Metadata.EventDefinitionHandle)">
      <param name="declaringType">
      </param>
      <param name="eventList">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataBuilder.AddConstant(System.Reflection.Metadata.EntityHandle,System.Object)">
      <param name="parent">
      </param>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataBuilder.AddMethodSemantics(System.Reflection.Metadata.EntityHandle,System.Reflection.MethodSemanticsAttributes,System.Reflection.Metadata.MethodDefinitionHandle)">
      <param name="association">
      </param>
      <param name="semantics">
      </param>
      <param name="methodDefinition">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataBuilder.AddCustomAttribute(System.Reflection.Metadata.EntityHandle,System.Reflection.Metadata.EntityHandle,System.Reflection.Metadata.BlobHandle)">
      <param name="parent">
      </param>
      <param name="constructor">
      </param>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataBuilder.AddMethodSpecification(System.Reflection.Metadata.EntityHandle,System.Reflection.Metadata.BlobHandle)">
      <param name="method">
      </param>
      <param name="instantiation">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataBuilder.AddModuleReference(System.Reflection.Metadata.StringHandle)">
      <param name="moduleName">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataBuilder.AddParameter(System.Reflection.ParameterAttributes,System.Reflection.Metadata.StringHandle,System.Int32)">
      <param name="attributes">
      </param>
      <param name="name">
      </param>
      <param name="sequenceNumber">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataBuilder.AddGenericParameter(System.Reflection.Metadata.EntityHandle,System.Reflection.GenericParameterAttributes,System.Reflection.Metadata.StringHandle,System.Int32)">
      <param name="parent">
      </param>
      <param name="attributes">
      </param>
      <param name="name">
      </param>
      <param name="index">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataBuilder.AddGenericParameterConstraint(System.Reflection.Metadata.GenericParameterHandle,System.Reflection.Metadata.EntityHandle)">
      <param name="genericParameter">
      </param>
      <param name="constraint">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataBuilder.AddFieldDefinition(System.Reflection.FieldAttributes,System.Reflection.Metadata.StringHandle,System.Reflection.Metadata.BlobHandle)">
      <param name="attributes">
      </param>
      <param name="name">
      </param>
      <param name="signature">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataBuilder.AddFieldLayout(System.Reflection.Metadata.FieldDefinitionHandle,System.Int32)">
      <param name="field">
      </param>
      <param name="offset">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataBuilder.AddMarshallingDescriptor(System.Reflection.Metadata.EntityHandle,System.Reflection.Metadata.BlobHandle)">
      <param name="parent">
      </param>
      <param name="descriptor">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataBuilder.AddFieldRelativeVirtualAddress(System.Reflection.Metadata.FieldDefinitionHandle,System.Int32)">
      <param name="field">
      </param>
      <param name="offset">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataBuilder.AddMethodDefinition(System.Reflection.MethodAttributes,System.Reflection.MethodImplAttributes,System.Reflection.Metadata.StringHandle,System.Reflection.Metadata.BlobHandle,System.Int32,System.Reflection.Metadata.ParameterHandle)">
      <param name="attributes">
      </param>
      <param name="implAttributes">
      </param>
      <param name="name">
      </param>
      <param name="signature">
      </param>
      <param name="bodyOffset">
      </param>
      <param name="parameterList">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataBuilder.AddMethodImport(System.Reflection.Metadata.MethodDefinitionHandle,System.Reflection.MethodImportAttributes,System.Reflection.Metadata.StringHandle,System.Reflection.Metadata.ModuleReferenceHandle)">
      <param name="method">
      </param>
      <param name="attributes">
      </param>
      <param name="name">
      </param>
      <param name="module">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataBuilder.AddMethodImplementation(System.Reflection.Metadata.TypeDefinitionHandle,System.Reflection.Metadata.EntityHandle,System.Reflection.Metadata.EntityHandle)">
      <param name="type">
      </param>
      <param name="methodBody">
      </param>
      <param name="methodDeclaration">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataBuilder.AddMemberReference(System.Reflection.Metadata.EntityHandle,System.Reflection.Metadata.StringHandle,System.Reflection.Metadata.BlobHandle)">
      <param name="parent">
      </param>
      <param name="name">
      </param>
      <param name="signature">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataBuilder.AddManifestResource(System.Reflection.ManifestResourceAttributes,System.Reflection.Metadata.StringHandle,System.Reflection.Metadata.EntityHandle,System.UInt32)">
      <param name="attributes">
      </param>
      <param name="name">
      </param>
      <param name="implementation">
      </param>
      <param name="offset">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataBuilder.AddAssemblyFile(System.Reflection.Metadata.StringHandle,System.Reflection.Metadata.BlobHandle,System.Boolean)">
      <param name="name">
      </param>
      <param name="hashValue">
      </param>
      <param name="containsMetadata">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataBuilder.AddExportedType(System.Reflection.TypeAttributes,System.Reflection.Metadata.StringHandle,System.Reflection.Metadata.StringHandle,System.Reflection.Metadata.EntityHandle,System.Int32)">
      <param name="attributes">
      </param>
      <param name="namespace">
      </param>
      <param name="name">
      </param>
      <param name="implementation">
      </param>
      <param name="typeDefinitionId">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataBuilder.AddDeclarativeSecurityAttribute(System.Reflection.Metadata.EntityHandle,System.Reflection.DeclarativeSecurityAction,System.Reflection.Metadata.BlobHandle)">
      <param name="parent">
      </param>
      <param name="action">
      </param>
      <param name="permissionSet">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataBuilder.AddEncLogEntry(System.Reflection.Metadata.EntityHandle,System.Reflection.Metadata.Ecma335.EditAndContinueOperation)">
      <param name="entity">
      </param>
      <param name="code">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataBuilder.AddEncMapEntry(System.Reflection.Metadata.EntityHandle)">
      <param name="entity">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataBuilder.AddDocument(System.Reflection.Metadata.BlobHandle,System.Reflection.Metadata.GuidHandle,System.Reflection.Metadata.BlobHandle,System.Reflection.Metadata.GuidHandle)">
      <param name="name">
      </param>
      <param name="hashAlgorithm">
      </param>
      <param name="hash">
      </param>
      <param name="language">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataBuilder.AddMethodDebugInformation(System.Reflection.Metadata.DocumentHandle,System.Reflection.Metadata.BlobHandle)">
      <param name="document">
      </param>
      <param name="sequencePoints">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataBuilder.AddLocalScope(System.Reflection.Metadata.MethodDefinitionHandle,System.Reflection.Metadata.ImportScopeHandle,System.Reflection.Metadata.LocalVariableHandle,System.Reflection.Metadata.LocalConstantHandle,System.Int32,System.Int32)">
      <param name="method">
      </param>
      <param name="importScope">
      </param>
      <param name="variableList">
      </param>
      <param name="constantList">
      </param>
      <param name="startOffset">
      </param>
      <param name="length">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataBuilder.AddLocalVariable(System.Reflection.Metadata.LocalVariableAttributes,System.Int32,System.Reflection.Metadata.StringHandle)">
      <param name="attributes">
      </param>
      <param name="index">
      </param>
      <param name="name">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataBuilder.AddLocalConstant(System.Reflection.Metadata.StringHandle,System.Reflection.Metadata.BlobHandle)">
      <param name="name">
      </param>
      <param name="signature">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataBuilder.AddImportScope(System.Reflection.Metadata.ImportScopeHandle,System.Reflection.Metadata.BlobHandle)">
      <param name="parentScope">
      </param>
      <param name="imports">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataBuilder.AddStateMachineMethod(System.Reflection.Metadata.MethodDefinitionHandle,System.Reflection.Metadata.MethodDefinitionHandle)">
      <param name="moveNextMethod">
      </param>
      <param name="kickoffMethod">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataBuilder.AddCustomDebugInformation(System.Reflection.Metadata.EntityHandle,System.Reflection.Metadata.GuidHandle,System.Reflection.Metadata.BlobHandle)">
      <param name="parent">
      </param>
      <param name="kind">
      </param>
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataBuilder.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <param name="userStringHeapStartOffset">
      </param>
      <param name="stringHeapStartOffset">
      </param>
      <param name="blobHeapStartOffset">
      </param>
      <param name="guidHeapStartOffset">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataBuilder.SetCapacity(System.Reflection.Metadata.Ecma335.HeapIndex,System.Int32)">
      <param name="heap">
      </param>
      <param name="byteCount">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataBuilder.GetOrAddBlob(System.Reflection.Metadata.BlobBuilder)">
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataBuilder.GetOrAddBlob(System.Byte[])">
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataBuilder.GetOrAddBlob(System.Collections.Immutable.ImmutableArray{System.Byte})">
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataBuilder.GetOrAddConstantBlob(System.Object)">
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataBuilder.GetOrAddBlobUTF16(System.String)">
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataBuilder.GetOrAddBlobUTF8(System.String,System.Boolean)">
      <param name="value">
      </param>
      <param name="allowUnpairedSurrogates">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataBuilder.GetOrAddDocumentName(System.String)">
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataBuilder.GetOrAddGuid(System.Guid)">
      <param name="guid">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataBuilder.ReserveGuid">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataBuilder.GetOrAddString(System.String)">
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataBuilder.ReserveUserString(System.Int32)">
      <param name="length">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataBuilder.GetOrAddUserString(System.String)">
      <param name="value">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.Ecma335.MetadataRootBuilder" />
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataRootBuilder.#ctor(System.Reflection.Metadata.Ecma335.MetadataBuilder,System.String,System.Boolean)">
      <param name="tablesAndHeaps">
      </param>
      <param name="metadataVersion">
      </param>
      <param name="suppressValidation">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataRootBuilder.Serialize(System.Reflection.Metadata.BlobBuilder,System.Int32,System.Int32)">
      <param name="builder">
      </param>
      <param name="methodBodyStreamRva">
      </param>
      <param name="mappedFieldDataStreamRva">
      </param>
    </member>
    <member name="P:System.Reflection.Metadata.Ecma335.MetadataRootBuilder.MetadataVersion">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.Ecma335.MetadataRootBuilder.SuppressValidation">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.Ecma335.MetadataRootBuilder.Sizes">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.Ecma335.ControlFlowBuilder" />
    <member name="M:System.Reflection.Metadata.Ecma335.ControlFlowBuilder.#ctor" />
    <member name="M:System.Reflection.Metadata.Ecma335.ControlFlowBuilder.AddFinallyRegion(System.Reflection.Metadata.Ecma335.LabelHandle,System.Reflection.Metadata.Ecma335.LabelHandle,System.Reflection.Metadata.Ecma335.LabelHandle,System.Reflection.Metadata.Ecma335.LabelHandle)">
      <param name="tryStart">
      </param>
      <param name="tryEnd">
      </param>
      <param name="handlerStart">
      </param>
      <param name="handlerEnd">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.ControlFlowBuilder.AddFaultRegion(System.Reflection.Metadata.Ecma335.LabelHandle,System.Reflection.Metadata.Ecma335.LabelHandle,System.Reflection.Metadata.Ecma335.LabelHandle,System.Reflection.Metadata.Ecma335.LabelHandle)">
      <param name="tryStart">
      </param>
      <param name="tryEnd">
      </param>
      <param name="handlerStart">
      </param>
      <param name="handlerEnd">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.ControlFlowBuilder.AddCatchRegion(System.Reflection.Metadata.Ecma335.LabelHandle,System.Reflection.Metadata.Ecma335.LabelHandle,System.Reflection.Metadata.Ecma335.LabelHandle,System.Reflection.Metadata.Ecma335.LabelHandle,System.Reflection.Metadata.EntityHandle)">
      <param name="tryStart">
      </param>
      <param name="tryEnd">
      </param>
      <param name="handlerStart">
      </param>
      <param name="handlerEnd">
      </param>
      <param name="catchType">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.ControlFlowBuilder.AddFilterRegion(System.Reflection.Metadata.Ecma335.LabelHandle,System.Reflection.Metadata.Ecma335.LabelHandle,System.Reflection.Metadata.Ecma335.LabelHandle,System.Reflection.Metadata.Ecma335.LabelHandle,System.Reflection.Metadata.Ecma335.LabelHandle)">
      <param name="tryStart">
      </param>
      <param name="tryEnd">
      </param>
      <param name="handlerStart">
      </param>
      <param name="handlerEnd">
      </param>
      <param name="filterStart">
      </param>
    </member>
    <member name="T:System.Reflection.Metadata.Ecma335.ExceptionRegionEncoder" />
    <member name="M:System.Reflection.Metadata.Ecma335.ExceptionRegionEncoder.IsSmallRegionCount(System.Int32)">
      <param name="exceptionRegionCount">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.ExceptionRegionEncoder.IsSmallExceptionRegion(System.Int32,System.Int32)">
      <param name="startOffset">
      </param>
      <param name="length">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.ExceptionRegionEncoder.AddFinally(System.Int32,System.Int32,System.Int32,System.Int32)">
      <param name="tryOffset">
      </param>
      <param name="tryLength">
      </param>
      <param name="handlerOffset">
      </param>
      <param name="handlerLength">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.ExceptionRegionEncoder.AddFault(System.Int32,System.Int32,System.Int32,System.Int32)">
      <param name="tryOffset">
      </param>
      <param name="tryLength">
      </param>
      <param name="handlerOffset">
      </param>
      <param name="handlerLength">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.ExceptionRegionEncoder.AddCatch(System.Int32,System.Int32,System.Int32,System.Int32,System.Reflection.Metadata.EntityHandle)">
      <param name="tryOffset">
      </param>
      <param name="tryLength">
      </param>
      <param name="handlerOffset">
      </param>
      <param name="handlerLength">
      </param>
      <param name="catchType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.ExceptionRegionEncoder.AddFilter(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <param name="tryOffset">
      </param>
      <param name="tryLength">
      </param>
      <param name="handlerOffset">
      </param>
      <param name="handlerLength">
      </param>
      <param name="filterOffset">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.ExceptionRegionEncoder.Add(System.Reflection.Metadata.ExceptionRegionKind,System.Int32,System.Int32,System.Int32,System.Int32,System.Reflection.Metadata.EntityHandle,System.Int32)">
      <param name="kind">
      </param>
      <param name="tryOffset">
      </param>
      <param name="tryLength">
      </param>
      <param name="handlerOffset">
      </param>
      <param name="handlerLength">
      </param>
      <param name="catchType">
      </param>
      <param name="filterOffset">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.Ecma335.ExceptionRegionEncoder.Builder">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.Ecma335.ExceptionRegionEncoder.HasSmallFormat">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.Ecma335.InstructionEncoder" />
    <member name="M:System.Reflection.Metadata.Ecma335.InstructionEncoder.#ctor(System.Reflection.Metadata.BlobBuilder,System.Reflection.Metadata.Ecma335.ControlFlowBuilder)">
      <param name="codeBuilder">
      </param>
      <param name="controlFlowBuilder">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.InstructionEncoder.OpCode(System.Reflection.Metadata.ILOpCode)">
      <param name="code">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.InstructionEncoder.Token(System.Reflection.Metadata.EntityHandle)">
      <param name="handle">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.InstructionEncoder.Token(System.Int32)">
      <param name="token">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.InstructionEncoder.LoadString(System.Reflection.Metadata.UserStringHandle)">
      <param name="handle">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.InstructionEncoder.Call(System.Reflection.Metadata.EntityHandle)">
      <param name="methodHandle">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.InstructionEncoder.Call(System.Reflection.Metadata.MethodDefinitionHandle)">
      <param name="methodHandle">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.InstructionEncoder.Call(System.Reflection.Metadata.MethodSpecificationHandle)">
      <param name="methodHandle">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.InstructionEncoder.Call(System.Reflection.Metadata.MemberReferenceHandle)">
      <param name="methodHandle">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.InstructionEncoder.CallIndirect(System.Reflection.Metadata.StandaloneSignatureHandle)">
      <param name="signature">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.InstructionEncoder.LoadConstantI4(System.Int32)">
      <param name="value">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.InstructionEncoder.LoadConstantI8(System.Int64)">
      <param name="value">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.InstructionEncoder.LoadConstantR4(System.Single)">
      <param name="value">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.InstructionEncoder.LoadConstantR8(System.Double)">
      <param name="value">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.InstructionEncoder.LoadLocal(System.Int32)">
      <param name="slotIndex">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.InstructionEncoder.StoreLocal(System.Int32)">
      <param name="slotIndex">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.InstructionEncoder.LoadLocalAddress(System.Int32)">
      <param name="slotIndex">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.InstructionEncoder.LoadArgument(System.Int32)">
      <param name="argumentIndex">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.InstructionEncoder.LoadArgumentAddress(System.Int32)">
      <param name="argumentIndex">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.InstructionEncoder.StoreArgument(System.Int32)">
      <param name="argumentIndex">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.InstructionEncoder.DefineLabel">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.InstructionEncoder.Branch(System.Reflection.Metadata.ILOpCode,System.Reflection.Metadata.Ecma335.LabelHandle)">
      <param name="code">
      </param>
      <param name="label">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.InstructionEncoder.MarkLabel(System.Reflection.Metadata.Ecma335.LabelHandle)">
      <param name="label">
      </param>
    </member>
    <member name="P:System.Reflection.Metadata.Ecma335.InstructionEncoder.CodeBuilder">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.Ecma335.InstructionEncoder.ControlFlowBuilder">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.Ecma335.InstructionEncoder.Offset">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.Ecma335.LabelHandle" />
    <member name="M:System.Reflection.Metadata.Ecma335.LabelHandle.Equals(System.Reflection.Metadata.Ecma335.LabelHandle)">
      <param name="other">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.LabelHandle.Equals(System.Object)">
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.LabelHandle.GetHashCode">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.LabelHandle.op_Equality(System.Reflection.Metadata.Ecma335.LabelHandle,System.Reflection.Metadata.Ecma335.LabelHandle)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.LabelHandle.op_Inequality(System.Reflection.Metadata.Ecma335.LabelHandle,System.Reflection.Metadata.Ecma335.LabelHandle)">
      <param name="left">
      </param>
      <param name="right">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.Ecma335.LabelHandle.Id">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.Ecma335.LabelHandle.IsNil">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.Ecma335.CodedIndex" />
    <member name="M:System.Reflection.Metadata.Ecma335.CodedIndex.HasCustomAttribute(System.Reflection.Metadata.EntityHandle)">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.CodedIndex.HasConstant(System.Reflection.Metadata.EntityHandle)">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.CodedIndex.CustomAttributeType(System.Reflection.Metadata.EntityHandle)">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.CodedIndex.HasDeclSecurity(System.Reflection.Metadata.EntityHandle)">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.CodedIndex.HasFieldMarshal(System.Reflection.Metadata.EntityHandle)">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.CodedIndex.HasSemantics(System.Reflection.Metadata.EntityHandle)">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.CodedIndex.Implementation(System.Reflection.Metadata.EntityHandle)">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.CodedIndex.MemberForwarded(System.Reflection.Metadata.EntityHandle)">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.CodedIndex.MemberRefParent(System.Reflection.Metadata.EntityHandle)">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.CodedIndex.MethodDefOrRef(System.Reflection.Metadata.EntityHandle)">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.CodedIndex.ResolutionScope(System.Reflection.Metadata.EntityHandle)">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.CodedIndex.TypeDefOrRef(System.Reflection.Metadata.EntityHandle)">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.CodedIndex.TypeDefOrRefOrSpec(System.Reflection.Metadata.EntityHandle)">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.CodedIndex.TypeOrMethodDef(System.Reflection.Metadata.EntityHandle)">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.CodedIndex.HasCustomDebugInformation(System.Reflection.Metadata.EntityHandle)">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.Ecma335.PortablePdbBuilder" />
    <member name="M:System.Reflection.Metadata.Ecma335.PortablePdbBuilder.#ctor(System.Reflection.Metadata.Ecma335.MetadataBuilder,System.Collections.Immutable.ImmutableArray{System.Int32},System.Reflection.Metadata.MethodDefinitionHandle,System.Func{System.Collections.Generic.IEnumerable{System.Reflection.Metadata.Blob},System.Reflection.Metadata.BlobContentId})">
      <param name="tablesAndHeaps">
      </param>
      <param name="typeSystemRowCounts">
      </param>
      <param name="entryPoint">
      </param>
      <param name="idProvider">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.PortablePdbBuilder.Serialize(System.Reflection.Metadata.BlobBuilder)">
      <param name="builder">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.Ecma335.PortablePdbBuilder.MetadataVersion">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.Ecma335.PortablePdbBuilder.FormatVersion">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.Ecma335.PortablePdbBuilder.IdProvider">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.Ecma335.BlobEncoder" />
    <member name="M:System.Reflection.Metadata.Ecma335.BlobEncoder.#ctor(System.Reflection.Metadata.BlobBuilder)">
      <param name="builder">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.BlobEncoder.FieldSignature">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.BlobEncoder.MethodSpecificationSignature(System.Int32)">
      <param name="genericArgumentCount">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.BlobEncoder.MethodSignature(System.Reflection.Metadata.SignatureCallingConvention,System.Int32,System.Boolean)">
      <param name="convention">
      </param>
      <param name="genericParameterCount">
      </param>
      <param name="isInstanceMethod">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.BlobEncoder.PropertySignature(System.Boolean)">
      <param name="isInstanceProperty">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.BlobEncoder.CustomAttributeSignature(System.Reflection.Metadata.Ecma335.FixedArgumentsEncoder@,System.Reflection.Metadata.Ecma335.CustomAttributeNamedArgumentsEncoder@)">
      <param name="fixedArguments">
      </param>
      <param name="namedArguments">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.BlobEncoder.CustomAttributeSignature(System.Action{System.Reflection.Metadata.Ecma335.FixedArgumentsEncoder},System.Action{System.Reflection.Metadata.Ecma335.CustomAttributeNamedArgumentsEncoder})">
      <param name="fixedArguments">
      </param>
      <param name="namedArguments">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.BlobEncoder.LocalVariableSignature(System.Int32)">
      <param name="variableCount">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.BlobEncoder.TypeSpecificationSignature">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.BlobEncoder.PermissionSetBlob(System.Int32)">
      <param name="attributeCount">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.BlobEncoder.PermissionSetArguments(System.Int32)">
      <param name="argumentCount">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.Ecma335.BlobEncoder.Builder">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.Ecma335.MethodSignatureEncoder" />
    <member name="M:System.Reflection.Metadata.Ecma335.MethodSignatureEncoder.#ctor(System.Reflection.Metadata.BlobBuilder,System.Boolean)">
      <param name="builder">
      </param>
      <param name="hasVarArgs">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MethodSignatureEncoder.Parameters(System.Int32,System.Reflection.Metadata.Ecma335.ReturnTypeEncoder@,System.Reflection.Metadata.Ecma335.ParametersEncoder@)">
      <param name="parameterCount">
      </param>
      <param name="returnType">
      </param>
      <param name="parameters">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MethodSignatureEncoder.Parameters(System.Int32,System.Action{System.Reflection.Metadata.Ecma335.ReturnTypeEncoder},System.Action{System.Reflection.Metadata.Ecma335.ParametersEncoder})">
      <param name="parameterCount">
      </param>
      <param name="returnType">
      </param>
      <param name="parameters">
      </param>
    </member>
    <member name="P:System.Reflection.Metadata.Ecma335.MethodSignatureEncoder.Builder">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.Ecma335.MethodSignatureEncoder.HasVarArgs">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.Ecma335.LocalVariablesEncoder" />
    <member name="M:System.Reflection.Metadata.Ecma335.LocalVariablesEncoder.#ctor(System.Reflection.Metadata.BlobBuilder)">
      <param name="builder">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.LocalVariablesEncoder.AddVariable">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.Ecma335.LocalVariablesEncoder.Builder">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.Ecma335.LocalVariableTypeEncoder" />
    <member name="M:System.Reflection.Metadata.Ecma335.LocalVariableTypeEncoder.#ctor(System.Reflection.Metadata.BlobBuilder)">
      <param name="builder">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.LocalVariableTypeEncoder.CustomModifiers">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.LocalVariableTypeEncoder.Type(System.Boolean,System.Boolean)">
      <param name="isByRef">
      </param>
      <param name="isPinned">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.LocalVariableTypeEncoder.TypedReference" />
    <member name="P:System.Reflection.Metadata.Ecma335.LocalVariableTypeEncoder.Builder">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.Ecma335.ParameterTypeEncoder" />
    <member name="M:System.Reflection.Metadata.Ecma335.ParameterTypeEncoder.#ctor(System.Reflection.Metadata.BlobBuilder)">
      <param name="builder">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.ParameterTypeEncoder.CustomModifiers">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.ParameterTypeEncoder.Type(System.Boolean)">
      <param name="isByRef">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.ParameterTypeEncoder.TypedReference" />
    <member name="P:System.Reflection.Metadata.Ecma335.ParameterTypeEncoder.Builder">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.Ecma335.PermissionSetEncoder" />
    <member name="M:System.Reflection.Metadata.Ecma335.PermissionSetEncoder.#ctor(System.Reflection.Metadata.BlobBuilder)">
      <param name="builder">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.PermissionSetEncoder.AddPermission(System.String,System.Collections.Immutable.ImmutableArray{System.Byte})">
      <param name="typeName">
      </param>
      <param name="encodedArguments">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.PermissionSetEncoder.AddPermission(System.String,System.Reflection.Metadata.BlobBuilder)">
      <param name="typeName">
      </param>
      <param name="encodedArguments">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.Ecma335.PermissionSetEncoder.Builder">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.Ecma335.GenericTypeArgumentsEncoder" />
    <member name="M:System.Reflection.Metadata.Ecma335.GenericTypeArgumentsEncoder.#ctor(System.Reflection.Metadata.BlobBuilder)">
      <param name="builder">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.GenericTypeArgumentsEncoder.AddArgument">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.Ecma335.GenericTypeArgumentsEncoder.Builder">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.Ecma335.FixedArgumentsEncoder" />
    <member name="M:System.Reflection.Metadata.Ecma335.FixedArgumentsEncoder.#ctor(System.Reflection.Metadata.BlobBuilder)">
      <param name="builder">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.FixedArgumentsEncoder.AddArgument">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.Ecma335.FixedArgumentsEncoder.Builder">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.Ecma335.LiteralEncoder" />
    <member name="M:System.Reflection.Metadata.Ecma335.LiteralEncoder.#ctor(System.Reflection.Metadata.BlobBuilder)">
      <param name="builder">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.LiteralEncoder.Vector">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.LiteralEncoder.TaggedVector(System.Reflection.Metadata.Ecma335.CustomAttributeArrayTypeEncoder@,System.Reflection.Metadata.Ecma335.VectorEncoder@)">
      <param name="arrayType">
      </param>
      <param name="vector">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.LiteralEncoder.TaggedVector(System.Action{System.Reflection.Metadata.Ecma335.CustomAttributeArrayTypeEncoder},System.Action{System.Reflection.Metadata.Ecma335.VectorEncoder})">
      <param name="arrayType">
      </param>
      <param name="vector">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.LiteralEncoder.Scalar">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.LiteralEncoder.TaggedScalar(System.Reflection.Metadata.Ecma335.CustomAttributeElementTypeEncoder@,System.Reflection.Metadata.Ecma335.ScalarEncoder@)">
      <param name="type">
      </param>
      <param name="scalar">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.LiteralEncoder.TaggedScalar(System.Action{System.Reflection.Metadata.Ecma335.CustomAttributeElementTypeEncoder},System.Action{System.Reflection.Metadata.Ecma335.ScalarEncoder})">
      <param name="type">
      </param>
      <param name="scalar">
      </param>
    </member>
    <member name="P:System.Reflection.Metadata.Ecma335.LiteralEncoder.Builder">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.Ecma335.ScalarEncoder" />
    <member name="M:System.Reflection.Metadata.Ecma335.ScalarEncoder.#ctor(System.Reflection.Metadata.BlobBuilder)">
      <param name="builder">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.ScalarEncoder.NullArray" />
    <member name="M:System.Reflection.Metadata.Ecma335.ScalarEncoder.Constant(System.Object)">
      <param name="value">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.ScalarEncoder.SystemType(System.String)">
      <param name="serializedTypeName">
      </param>
    </member>
    <member name="P:System.Reflection.Metadata.Ecma335.ScalarEncoder.Builder">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.Ecma335.LiteralsEncoder" />
    <member name="M:System.Reflection.Metadata.Ecma335.LiteralsEncoder.#ctor(System.Reflection.Metadata.BlobBuilder)">
      <param name="builder">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.LiteralsEncoder.AddLiteral">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.Ecma335.LiteralsEncoder.Builder">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.Ecma335.VectorEncoder" />
    <member name="M:System.Reflection.Metadata.Ecma335.VectorEncoder.#ctor(System.Reflection.Metadata.BlobBuilder)">
      <param name="builder">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.VectorEncoder.Count(System.Int32)">
      <param name="count">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.Ecma335.VectorEncoder.Builder">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.Ecma335.NameEncoder" />
    <member name="M:System.Reflection.Metadata.Ecma335.NameEncoder.#ctor(System.Reflection.Metadata.BlobBuilder)">
      <param name="builder">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.NameEncoder.Name(System.String)">
      <param name="name">
      </param>
    </member>
    <member name="P:System.Reflection.Metadata.Ecma335.NameEncoder.Builder">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.Ecma335.CustomAttributeNamedArgumentsEncoder" />
    <member name="M:System.Reflection.Metadata.Ecma335.CustomAttributeNamedArgumentsEncoder.#ctor(System.Reflection.Metadata.BlobBuilder)">
      <param name="builder">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.CustomAttributeNamedArgumentsEncoder.Count(System.Int32)">
      <param name="count">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.Ecma335.CustomAttributeNamedArgumentsEncoder.Builder">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.Ecma335.NamedArgumentsEncoder" />
    <member name="M:System.Reflection.Metadata.Ecma335.NamedArgumentsEncoder.#ctor(System.Reflection.Metadata.BlobBuilder)">
      <param name="builder">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.NamedArgumentsEncoder.AddArgument(System.Boolean,System.Reflection.Metadata.Ecma335.NamedArgumentTypeEncoder@,System.Reflection.Metadata.Ecma335.NameEncoder@,System.Reflection.Metadata.Ecma335.LiteralEncoder@)">
      <param name="isField">
      </param>
      <param name="type">
      </param>
      <param name="name">
      </param>
      <param name="literal">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.NamedArgumentsEncoder.AddArgument(System.Boolean,System.Action{System.Reflection.Metadata.Ecma335.NamedArgumentTypeEncoder},System.Action{System.Reflection.Metadata.Ecma335.NameEncoder},System.Action{System.Reflection.Metadata.Ecma335.LiteralEncoder})">
      <param name="isField">
      </param>
      <param name="type">
      </param>
      <param name="name">
      </param>
      <param name="literal">
      </param>
    </member>
    <member name="P:System.Reflection.Metadata.Ecma335.NamedArgumentsEncoder.Builder">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.Ecma335.NamedArgumentTypeEncoder" />
    <member name="M:System.Reflection.Metadata.Ecma335.NamedArgumentTypeEncoder.#ctor(System.Reflection.Metadata.BlobBuilder)">
      <param name="builder">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.NamedArgumentTypeEncoder.ScalarType">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.NamedArgumentTypeEncoder.Object" />
    <member name="M:System.Reflection.Metadata.Ecma335.NamedArgumentTypeEncoder.SZArray">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.Ecma335.NamedArgumentTypeEncoder.Builder">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.Ecma335.CustomAttributeArrayTypeEncoder" />
    <member name="M:System.Reflection.Metadata.Ecma335.CustomAttributeArrayTypeEncoder.#ctor(System.Reflection.Metadata.BlobBuilder)">
      <param name="builder">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.CustomAttributeArrayTypeEncoder.ObjectArray" />
    <member name="M:System.Reflection.Metadata.Ecma335.CustomAttributeArrayTypeEncoder.ElementType">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.Ecma335.CustomAttributeArrayTypeEncoder.Builder">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.Ecma335.CustomAttributeElementTypeEncoder" />
    <member name="M:System.Reflection.Metadata.Ecma335.CustomAttributeElementTypeEncoder.#ctor(System.Reflection.Metadata.BlobBuilder)">
      <param name="builder">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.CustomAttributeElementTypeEncoder.Boolean" />
    <member name="M:System.Reflection.Metadata.Ecma335.CustomAttributeElementTypeEncoder.Char" />
    <member name="M:System.Reflection.Metadata.Ecma335.CustomAttributeElementTypeEncoder.SByte" />
    <member name="M:System.Reflection.Metadata.Ecma335.CustomAttributeElementTypeEncoder.Byte" />
    <member name="M:System.Reflection.Metadata.Ecma335.CustomAttributeElementTypeEncoder.Int16" />
    <member name="M:System.Reflection.Metadata.Ecma335.CustomAttributeElementTypeEncoder.UInt16" />
    <member name="M:System.Reflection.Metadata.Ecma335.CustomAttributeElementTypeEncoder.Int32" />
    <member name="M:System.Reflection.Metadata.Ecma335.CustomAttributeElementTypeEncoder.UInt32" />
    <member name="M:System.Reflection.Metadata.Ecma335.CustomAttributeElementTypeEncoder.Int64" />
    <member name="M:System.Reflection.Metadata.Ecma335.CustomAttributeElementTypeEncoder.UInt64" />
    <member name="M:System.Reflection.Metadata.Ecma335.CustomAttributeElementTypeEncoder.Single" />
    <member name="M:System.Reflection.Metadata.Ecma335.CustomAttributeElementTypeEncoder.Double" />
    <member name="M:System.Reflection.Metadata.Ecma335.CustomAttributeElementTypeEncoder.String" />
    <member name="M:System.Reflection.Metadata.Ecma335.CustomAttributeElementTypeEncoder.PrimitiveType(System.Reflection.Metadata.PrimitiveSerializationTypeCode)">
      <param name="type">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.CustomAttributeElementTypeEncoder.SystemType" />
    <member name="M:System.Reflection.Metadata.Ecma335.CustomAttributeElementTypeEncoder.Enum(System.String)">
      <param name="enumTypeName">
      </param>
    </member>
    <member name="P:System.Reflection.Metadata.Ecma335.CustomAttributeElementTypeEncoder.Builder">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.Ecma335.SignatureTypeEncoder" />
    <member name="M:System.Reflection.Metadata.Ecma335.SignatureTypeEncoder.#ctor(System.Reflection.Metadata.BlobBuilder)">
      <param name="builder">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.SignatureTypeEncoder.Boolean" />
    <member name="M:System.Reflection.Metadata.Ecma335.SignatureTypeEncoder.Char" />
    <member name="M:System.Reflection.Metadata.Ecma335.SignatureTypeEncoder.SByte" />
    <member name="M:System.Reflection.Metadata.Ecma335.SignatureTypeEncoder.Byte" />
    <member name="M:System.Reflection.Metadata.Ecma335.SignatureTypeEncoder.Int16" />
    <member name="M:System.Reflection.Metadata.Ecma335.SignatureTypeEncoder.UInt16" />
    <member name="M:System.Reflection.Metadata.Ecma335.SignatureTypeEncoder.Int32" />
    <member name="M:System.Reflection.Metadata.Ecma335.SignatureTypeEncoder.UInt32" />
    <member name="M:System.Reflection.Metadata.Ecma335.SignatureTypeEncoder.Int64" />
    <member name="M:System.Reflection.Metadata.Ecma335.SignatureTypeEncoder.UInt64" />
    <member name="M:System.Reflection.Metadata.Ecma335.SignatureTypeEncoder.Single" />
    <member name="M:System.Reflection.Metadata.Ecma335.SignatureTypeEncoder.Double" />
    <member name="M:System.Reflection.Metadata.Ecma335.SignatureTypeEncoder.String" />
    <member name="M:System.Reflection.Metadata.Ecma335.SignatureTypeEncoder.IntPtr" />
    <member name="M:System.Reflection.Metadata.Ecma335.SignatureTypeEncoder.UIntPtr" />
    <member name="M:System.Reflection.Metadata.Ecma335.SignatureTypeEncoder.Object" />
    <member name="M:System.Reflection.Metadata.Ecma335.SignatureTypeEncoder.PrimitiveType(System.Reflection.Metadata.PrimitiveTypeCode)">
      <param name="type">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.SignatureTypeEncoder.Array(System.Reflection.Metadata.Ecma335.SignatureTypeEncoder@,System.Reflection.Metadata.Ecma335.ArrayShapeEncoder@)">
      <param name="elementType">
      </param>
      <param name="arrayShape">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.SignatureTypeEncoder.Array(System.Action{System.Reflection.Metadata.Ecma335.SignatureTypeEncoder},System.Action{System.Reflection.Metadata.Ecma335.ArrayShapeEncoder})">
      <param name="elementType">
      </param>
      <param name="arrayShape">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.SignatureTypeEncoder.Type(System.Reflection.Metadata.EntityHandle,System.Boolean)">
      <param name="type">
      </param>
      <param name="isValueType">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.SignatureTypeEncoder.FunctionPointer(System.Reflection.Metadata.SignatureCallingConvention,System.Reflection.Metadata.Ecma335.FunctionPointerAttributes,System.Int32)">
      <param name="convention">
      </param>
      <param name="attributes">
      </param>
      <param name="genericParameterCount">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.SignatureTypeEncoder.GenericInstantiation(System.Reflection.Metadata.EntityHandle,System.Int32,System.Boolean)">
      <param name="genericType">
      </param>
      <param name="genericArgumentCount">
      </param>
      <param name="isValueType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.SignatureTypeEncoder.GenericMethodTypeParameter(System.Int32)">
      <param name="parameterIndex">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.SignatureTypeEncoder.GenericTypeParameter(System.Int32)">
      <param name="parameterIndex">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.SignatureTypeEncoder.Pointer">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.SignatureTypeEncoder.VoidPointer" />
    <member name="M:System.Reflection.Metadata.Ecma335.SignatureTypeEncoder.SZArray">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.SignatureTypeEncoder.CustomModifiers">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.Ecma335.SignatureTypeEncoder.Builder">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.Ecma335.CustomModifiersEncoder" />
    <member name="M:System.Reflection.Metadata.Ecma335.CustomModifiersEncoder.#ctor(System.Reflection.Metadata.BlobBuilder)">
      <param name="builder">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.CustomModifiersEncoder.AddModifier(System.Reflection.Metadata.EntityHandle,System.Boolean)">
      <param name="type">
      </param>
      <param name="isOptional">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.Ecma335.CustomModifiersEncoder.Builder">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.Ecma335.ArrayShapeEncoder" />
    <member name="M:System.Reflection.Metadata.Ecma335.ArrayShapeEncoder.#ctor(System.Reflection.Metadata.BlobBuilder)">
      <param name="builder">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.ArrayShapeEncoder.Shape(System.Int32,System.Collections.Immutable.ImmutableArray{System.Int32},System.Collections.Immutable.ImmutableArray{System.Int32})">
      <param name="rank">
      </param>
      <param name="sizes">
      </param>
      <param name="lowerBounds">
      </param>
    </member>
    <member name="P:System.Reflection.Metadata.Ecma335.ArrayShapeEncoder.Builder">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.Ecma335.ReturnTypeEncoder" />
    <member name="M:System.Reflection.Metadata.Ecma335.ReturnTypeEncoder.#ctor(System.Reflection.Metadata.BlobBuilder)">
      <param name="builder">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.ReturnTypeEncoder.CustomModifiers">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.ReturnTypeEncoder.Type(System.Boolean)">
      <param name="isByRef">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.ReturnTypeEncoder.TypedReference" />
    <member name="M:System.Reflection.Metadata.Ecma335.ReturnTypeEncoder.Void" />
    <member name="P:System.Reflection.Metadata.Ecma335.ReturnTypeEncoder.Builder">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.Ecma335.ParametersEncoder" />
    <member name="M:System.Reflection.Metadata.Ecma335.ParametersEncoder.#ctor(System.Reflection.Metadata.BlobBuilder,System.Boolean)">
      <param name="builder">
      </param>
      <param name="hasVarArgs">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.ParametersEncoder.AddParameter">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.ParametersEncoder.StartVarArgs">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.Ecma335.ParametersEncoder.Builder">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.Ecma335.ParametersEncoder.HasVarArgs">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.Ecma335.MetadataSizes" />
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataSizes.GetAlignedHeapSize(System.Reflection.Metadata.Ecma335.HeapIndex)">
      <param name="index">
      </param>
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.Ecma335.MetadataSizes.HeapSizes">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.Ecma335.MetadataSizes.RowCounts">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.Ecma335.MetadataSizes.ExternalRowCounts">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.Ecma335.SignatureDecoder`2">
      <typeparam name="TType">
      </typeparam>
      <typeparam name="TGenericContext">
      </typeparam>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.SignatureDecoder`2.#ctor(System.Reflection.Metadata.ISignatureTypeProvider{`0,`1},System.Reflection.Metadata.MetadataReader,`1)">
      <param name="provider">
      </param>
      <param name="metadataReader">
      </param>
      <param name="genericContext">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.SignatureDecoder`2.DecodeType(System.Reflection.Metadata.BlobReader@,System.Boolean)">
      <param name="blobReader">
      </param>
      <param name="allowTypeSpecifications">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.SignatureDecoder`2.DecodeMethodSignature(System.Reflection.Metadata.BlobReader@)">
      <param name="blobReader">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.SignatureDecoder`2.DecodeMethodSpecificationSignature(System.Reflection.Metadata.BlobReader@)">
      <param name="blobReader">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.SignatureDecoder`2.DecodeLocalSignature(System.Reflection.Metadata.BlobReader@)">
      <param name="blobReader">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.SignatureDecoder`2.DecodeFieldSignature(System.Reflection.Metadata.BlobReader@)">
      <param name="blobReader">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.Ecma335.EditAndContinueLogEntry" />
    <member name="M:System.Reflection.Metadata.Ecma335.EditAndContinueLogEntry.#ctor(System.Reflection.Metadata.EntityHandle,System.Reflection.Metadata.Ecma335.EditAndContinueOperation)">
      <param name="handle">
      </param>
      <param name="operation">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.EditAndContinueLogEntry.Equals(System.Object)">
      <param name="obj">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.EditAndContinueLogEntry.Equals(System.Reflection.Metadata.Ecma335.EditAndContinueLogEntry)">
      <param name="other">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.EditAndContinueLogEntry.GetHashCode">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.Ecma335.EditAndContinueLogEntry.Handle">
      <returns>
      </returns>
    </member>
    <member name="P:System.Reflection.Metadata.Ecma335.EditAndContinueLogEntry.Operation">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.Ecma335.EditAndContinueOperation" />
    <member name="F:System.Reflection.Metadata.Ecma335.EditAndContinueOperation.Default">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.Ecma335.EditAndContinueOperation.AddMethod">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.Ecma335.EditAndContinueOperation.AddField">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.Ecma335.EditAndContinueOperation.AddParameter">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.Ecma335.EditAndContinueOperation.AddProperty">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.Ecma335.EditAndContinueOperation.AddEvent">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.Ecma335.ExportedTypeExtensions" />
    <member name="M:System.Reflection.Metadata.Ecma335.ExportedTypeExtensions.GetTypeDefinitionId(System.Reflection.Metadata.ExportedType)">
      <param name="exportedType">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.Ecma335.HeapIndex" />
    <member name="F:System.Reflection.Metadata.Ecma335.HeapIndex.UserString">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.Ecma335.HeapIndex.String">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.Ecma335.HeapIndex.Blob">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.Ecma335.HeapIndex.Guid">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.Ecma335.MetadataReaderExtensions" />
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetTableRowCount(System.Reflection.Metadata.MetadataReader,System.Reflection.Metadata.Ecma335.TableIndex)">
      <param name="reader">
      </param>
      <param name="tableIndex">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetTableRowSize(System.Reflection.Metadata.MetadataReader,System.Reflection.Metadata.Ecma335.TableIndex)">
      <param name="reader">
      </param>
      <param name="tableIndex">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetTableMetadataOffset(System.Reflection.Metadata.MetadataReader,System.Reflection.Metadata.Ecma335.TableIndex)">
      <param name="reader">
      </param>
      <param name="tableIndex">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetHeapSize(System.Reflection.Metadata.MetadataReader,System.Reflection.Metadata.Ecma335.HeapIndex)">
      <param name="reader">
      </param>
      <param name="heapIndex">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetHeapMetadataOffset(System.Reflection.Metadata.MetadataReader,System.Reflection.Metadata.Ecma335.HeapIndex)">
      <param name="reader">
      </param>
      <param name="heapIndex">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetNextHandle(System.Reflection.Metadata.MetadataReader,System.Reflection.Metadata.UserStringHandle)">
      <param name="reader">
      </param>
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetNextHandle(System.Reflection.Metadata.MetadataReader,System.Reflection.Metadata.BlobHandle)">
      <param name="reader">
      </param>
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetNextHandle(System.Reflection.Metadata.MetadataReader,System.Reflection.Metadata.StringHandle)">
      <param name="reader">
      </param>
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetEditAndContinueLogEntries(System.Reflection.Metadata.MetadataReader)">
      <param name="reader">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetEditAndContinueMapEntries(System.Reflection.Metadata.MetadataReader)">
      <param name="reader">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetTypesWithProperties(System.Reflection.Metadata.MetadataReader)">
      <param name="reader">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.GetTypesWithEvents(System.Reflection.Metadata.MetadataReader)">
      <param name="reader">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataReaderExtensions.ResolveSignatureTypeKind(System.Reflection.Metadata.MetadataReader,System.Reflection.Metadata.EntityHandle,System.Byte)">
      <param name="reader">
      </param>
      <param name="typeHandle">
      </param>
      <param name="rawTypeKind">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.Ecma335.MetadataTokens" />
    <member name="F:System.Reflection.Metadata.Ecma335.MetadataTokens.TableCount">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.Ecma335.MetadataTokens.HeapCount">
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataTokens.GetRowNumber(System.Reflection.Metadata.MetadataReader,System.Reflection.Metadata.EntityHandle)">
      <param name="reader">
      </param>
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataTokens.GetHeapOffset(System.Reflection.Metadata.MetadataReader,System.Reflection.Metadata.Handle)">
      <param name="reader">
      </param>
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataTokens.GetToken(System.Reflection.Metadata.MetadataReader,System.Reflection.Metadata.EntityHandle)">
      <param name="reader">
      </param>
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataTokens.GetToken(System.Reflection.Metadata.MetadataReader,System.Reflection.Metadata.Handle)">
      <param name="reader">
      </param>
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataTokens.GetRowNumber(System.Reflection.Metadata.EntityHandle)">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataTokens.GetHeapOffset(System.Reflection.Metadata.Handle)">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataTokens.GetHeapOffset(System.Reflection.Metadata.BlobHandle)">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataTokens.GetHeapOffset(System.Reflection.Metadata.GuidHandle)">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataTokens.GetHeapOffset(System.Reflection.Metadata.UserStringHandle)">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataTokens.GetHeapOffset(System.Reflection.Metadata.StringHandle)">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataTokens.GetToken(System.Reflection.Metadata.Handle)">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataTokens.GetToken(System.Reflection.Metadata.EntityHandle)">
      <param name="handle">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataTokens.TryGetTableIndex(System.Reflection.Metadata.HandleKind,System.Reflection.Metadata.Ecma335.TableIndex@)">
      <param name="type">
      </param>
      <param name="index">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataTokens.TryGetHeapIndex(System.Reflection.Metadata.HandleKind,System.Reflection.Metadata.Ecma335.HeapIndex@)">
      <param name="type">
      </param>
      <param name="index">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataTokens.Handle(System.Int32)">
      <param name="token">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataTokens.EntityHandle(System.Int32)">
      <param name="token">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataTokens.EntityHandle(System.Reflection.Metadata.Ecma335.TableIndex,System.Int32)">
      <param name="tableIndex">
      </param>
      <param name="rowNumber">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataTokens.Handle(System.Reflection.Metadata.Ecma335.TableIndex,System.Int32)">
      <param name="tableIndex">
      </param>
      <param name="rowNumber">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataTokens.MethodDefinitionHandle(System.Int32)">
      <param name="rowNumber">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataTokens.MethodImplementationHandle(System.Int32)">
      <param name="rowNumber">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataTokens.MethodSpecificationHandle(System.Int32)">
      <param name="rowNumber">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataTokens.TypeDefinitionHandle(System.Int32)">
      <param name="rowNumber">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataTokens.ExportedTypeHandle(System.Int32)">
      <param name="rowNumber">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataTokens.TypeReferenceHandle(System.Int32)">
      <param name="rowNumber">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataTokens.TypeSpecificationHandle(System.Int32)">
      <param name="rowNumber">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataTokens.InterfaceImplementationHandle(System.Int32)">
      <param name="rowNumber">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataTokens.MemberReferenceHandle(System.Int32)">
      <param name="rowNumber">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataTokens.FieldDefinitionHandle(System.Int32)">
      <param name="rowNumber">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataTokens.EventDefinitionHandle(System.Int32)">
      <param name="rowNumber">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataTokens.PropertyDefinitionHandle(System.Int32)">
      <param name="rowNumber">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataTokens.StandaloneSignatureHandle(System.Int32)">
      <param name="rowNumber">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataTokens.ParameterHandle(System.Int32)">
      <param name="rowNumber">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataTokens.GenericParameterHandle(System.Int32)">
      <param name="rowNumber">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataTokens.GenericParameterConstraintHandle(System.Int32)">
      <param name="rowNumber">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataTokens.ModuleReferenceHandle(System.Int32)">
      <param name="rowNumber">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataTokens.AssemblyReferenceHandle(System.Int32)">
      <param name="rowNumber">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataTokens.CustomAttributeHandle(System.Int32)">
      <param name="rowNumber">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataTokens.DeclarativeSecurityAttributeHandle(System.Int32)">
      <param name="rowNumber">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataTokens.ConstantHandle(System.Int32)">
      <param name="rowNumber">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataTokens.ManifestResourceHandle(System.Int32)">
      <param name="rowNumber">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataTokens.AssemblyFileHandle(System.Int32)">
      <param name="rowNumber">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataTokens.DocumentHandle(System.Int32)">
      <param name="rowNumber">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataTokens.MethodDebugInformationHandle(System.Int32)">
      <param name="rowNumber">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataTokens.LocalScopeHandle(System.Int32)">
      <param name="rowNumber">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataTokens.LocalVariableHandle(System.Int32)">
      <param name="rowNumber">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataTokens.LocalConstantHandle(System.Int32)">
      <param name="rowNumber">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataTokens.ImportScopeHandle(System.Int32)">
      <param name="rowNumber">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataTokens.CustomDebugInformationHandle(System.Int32)">
      <param name="rowNumber">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataTokens.UserStringHandle(System.Int32)">
      <param name="offset">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataTokens.StringHandle(System.Int32)">
      <param name="offset">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataTokens.BlobHandle(System.Int32)">
      <param name="offset">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataTokens.GuidHandle(System.Int32)">
      <param name="offset">
      </param>
      <returns>
      </returns>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataTokens.DocumentNameBlobHandle(System.Int32)">
      <param name="offset">
      </param>
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.Ecma335.TableIndex" />
    <member name="F:System.Reflection.Metadata.Ecma335.TableIndex.Module">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.Ecma335.TableIndex.TypeRef">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.Ecma335.TableIndex.TypeDef">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.Ecma335.TableIndex.FieldPtr">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.Ecma335.TableIndex.Field">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.Ecma335.TableIndex.MethodPtr">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.Ecma335.TableIndex.MethodDef">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.Ecma335.TableIndex.ParamPtr">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.Ecma335.TableIndex.Param">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.Ecma335.TableIndex.InterfaceImpl">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.Ecma335.TableIndex.MemberRef">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.Ecma335.TableIndex.Constant">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.Ecma335.TableIndex.CustomAttribute">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.Ecma335.TableIndex.FieldMarshal">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.Ecma335.TableIndex.DeclSecurity">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.Ecma335.TableIndex.ClassLayout">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.Ecma335.TableIndex.FieldLayout">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.Ecma335.TableIndex.StandAloneSig">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.Ecma335.TableIndex.EventMap">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.Ecma335.TableIndex.EventPtr">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.Ecma335.TableIndex.Event">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.Ecma335.TableIndex.PropertyMap">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.Ecma335.TableIndex.PropertyPtr">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.Ecma335.TableIndex.Property">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.Ecma335.TableIndex.MethodSemantics">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.Ecma335.TableIndex.MethodImpl">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.Ecma335.TableIndex.ModuleRef">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.Ecma335.TableIndex.TypeSpec">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.Ecma335.TableIndex.ImplMap">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.Ecma335.TableIndex.FieldRva">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.Ecma335.TableIndex.EncLog">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.Ecma335.TableIndex.EncMap">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.Ecma335.TableIndex.Assembly">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.Ecma335.TableIndex.AssemblyProcessor">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.Ecma335.TableIndex.AssemblyOS">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.Ecma335.TableIndex.AssemblyRef">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.Ecma335.TableIndex.AssemblyRefProcessor">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.Ecma335.TableIndex.AssemblyRefOS">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.Ecma335.TableIndex.File">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.Ecma335.TableIndex.ExportedType">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.Ecma335.TableIndex.ManifestResource">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.Ecma335.TableIndex.NestedClass">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.Ecma335.TableIndex.GenericParam">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.Ecma335.TableIndex.MethodSpec">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.Ecma335.TableIndex.GenericParamConstraint">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.Ecma335.TableIndex.Document">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.Ecma335.TableIndex.MethodDebugInformation">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.Ecma335.TableIndex.LocalScope">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.Ecma335.TableIndex.LocalVariable">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.Ecma335.TableIndex.LocalConstant">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.Ecma335.TableIndex.ImportScope">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.Ecma335.TableIndex.StateMachineMethod">
      <returns>
      </returns>
    </member>
    <member name="F:System.Reflection.Metadata.Ecma335.TableIndex.CustomDebugInformation">
      <returns>
      </returns>
    </member>
    <member name="T:System.Reflection.Metadata.Ecma335.MetadataAggregator" />
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataAggregator.#ctor(System.Reflection.Metadata.MetadataReader,System.Collections.Generic.IReadOnlyList{System.Reflection.Metadata.MetadataReader})">
      <param name="baseReader">
      </param>
      <param name="deltaReaders">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataAggregator.#ctor(System.Collections.Generic.IReadOnlyList{System.Int32},System.Collections.Generic.IReadOnlyList{System.Int32},System.Collections.Generic.IReadOnlyList{System.Reflection.Metadata.MetadataReader})">
      <param name="baseTableRowCounts">
      </param>
      <param name="baseHeapSizes">
      </param>
      <param name="deltaReaders">
      </param>
    </member>
    <member name="M:System.Reflection.Metadata.Ecma335.MetadataAggregator.GetGenerationHandle(System.Reflection.Metadata.Handle,System.Int32@)">
      <param name="handle">
      </param>
      <param name="generation">
      </param>
      <returns>
      </returns>
    </member>
  </members>
</doc>